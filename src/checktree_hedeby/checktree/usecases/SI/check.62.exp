#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
set check_root_access_needs    "yes"
set check_name                 "si"
set check_category             "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)       "test that checks the si usecase"
set check_description(400)     "all week running test that checks the si usecase"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "si_init_level"
set check_functions            {}   
set check_highest_level        400

set check_setup_level_function "si_setup"
set check_cleanup_level_function "si_cleanup"

lappend check_functions "si_check"

#****** usecases/SI/si_init_level() ************************
#  NAME
#     si_init_level() -- init level procedure for test
#
#  SYNOPSIS
#     si_init_level { } 
#
#  FUNCTION
#     Return the supported runlevel of this test. Currently only level 0
#     is supported.
#
#  INPUTS
#
#  RESULT
#     0 for CHECK_ACT_LEVEL 0
#    -1 for all other levels
#
#*******************************************************************************
proc si_init_level {} {
  global CHECK_ACT_LEVEL
  upvar #0 hedeby_si_ctx this
  set this(check_level) $CHECK_ACT_LEVEL

  if {$this(check_level) == 0} {
     return 0
  }

  if {$this(check_level) == 400} {
     return 0
  }

  return -1
}

#****** usecases/SI/si_setup() *************************************
#  NAME
#     si_setup() -- level setup procedure
#
#  SYNOPSIS
#     si_setup { } 
#
#  FUNCTION
#     save current cluster config nr
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#*******************************************************************************
proc si_setup {} {
   upvar #0 hedeby_si_ctx this
   global ts_config
   global hedeby_config
   #this number is the the calculation of week in seconds
   set run_time 604800

   # we sets the end time of test according to run level 
   if {$this(check_level) == 400} {
      ts_log_heading "This is a week long run of SI usecase test"
      set this(end_time) [expr [timestamp] + $run_time]
   } else {
      ts_log_heading "This is a short run(aprox.20 minutes) of SI usecase test"
      set this(end_time) [timestamp]
   }
   set this(is_end) false  

   set this(master_host) $hedeby_config(hedeby_master_host)

   # get all ge-adapters
   get_hedeby_default_services service_names
   set this(adapters) $service_names(services)

   # ... and save each ts_cluster_nr, master_host and moveable_execds
   foreach adapter $this(adapters) {
      set this(ts_cluster_nr,$adapter)   $service_names(ts_cluster_nr,$adapter)
      set this(master_host,$adapter)     $service_names(master_host,$adapter)
      set this(moveable_execds,$adapter) $service_names(moveable_execds,$adapter)
   }

   # job submit for sleeper job with no output
   set this(sleeper_with_no_output) "-o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh"

   # list of all resources that are movable and used in this test (will be filled in si_check())
   set this(resource_list) {}

   set this(org_cluster_config_nr) [get_current_cluster_config_nr]
}

#****** usecases/SI/si_cleanup() ***********************************
#  NAME
#     si_cleanup() -- level cleanup procedure
#
#  SYNOPSIS
#     si_cleanup { } 
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#*******************************************************************************
proc si_cleanup {} {
   upvar #0 hedeby_si_ctx this

   #enable all queues of all ge adapater service and delete all jobs in queues 
   foreach adapter $this(adapters) {
      set_current_cluster_config_nr $this(ts_cluster_nr,$adapter)
      delete_all_jobs
      wait_for_end_of_all_jobs
   }
   
   set_current_cluster_config_nr $this(org_cluster_config_nr)

   #cleanup slos
   foreach adapter $this(adapters) {
      if {[reset_default_slos "mod_config" $adapter] != 0} {
            ts_log_severe "Cleanup: Cannot reset default slos for service $adapter"
      }
   }

   #clean up 'owner' resource property
   foreach resource $this(resource_list) {        
      if {[remove_resource_property $resource {owner}] != 0} {
            ts_log_severe "Cleanup: Cannot remove resource property for resource $resource"
      }
   }

   if {[move_resources_to_default_services] != 0} {
      if {[reset_hedeby 1] != 0} {
            ts_log_severe "Cleanup: Cannot reset Hedeby"
      }
   }

   #enable all queues of all ge adapater service
   foreach adapter $this(adapters) {
      set_current_cluster_config_nr $this(ts_cluster_nr,$adapter)
      enable_queue {\\*}
   }
   
   #reset saved active cluster configuration nr
   set_current_cluster_config_nr $this(org_cluster_config_nr)
   
   if {$this(is_end) == true} {
      unset this
   }
}

#****** usecases/SI/si_check() *************************************
#  NAME
#     si_check() -- check si usecase
#
#  SYNOPSIS
#     si_check { } 
#
#  FUNCTION
#     this function test the SI usecases
#       1) we will divide all resources among three clusters, and mark them 
#           accordingly owner = A for first cluster, owner = B for second cluster and 
#           owner = C for the third (owner properties are set to ge-adapter names)
#       2) we will disable all queues on the master hosts
#       3) we will add a following slo`s to the ge adapter configurations of all clusers. Request and resource filters have to have owners set 
#          according to the service 
#          <common:slo xsi:type="ge_adapter:MaxPendingJobsSLOConfig"
#                  averageSlotsPerHost="2"
#                  max="1"
#                  urgency="3"
#                  name="MaxPendingJobsSLO_1">
#              <common:request>owner="A"</common:request>
#              <common:resourceFilter>owner="A"</common:resourceFilter>
#          </common:slo>
#          <common:slo xsi:type="ge_adapter:MaxPendingJobsSLOConfig"
#                  averageSlotsPerHost="2"
#                  max="1"
#                  urgency="2"
#                  name="MaxPendingJobsSLO_2"/>
#       4) submit total slot count of sleeper jobs on 1st cluster, all resource should go to first cluster
#       5) submit total slot count of sleeper jobs on 2nd cluster => all resources that belongs to 2nd ge-adapter should go there
#       6) check that after jobs finish (are deleted), all resources go back to spare pool
#       7) submit 2 x total slot count to each cluster and wait that each ge-adapter gets the resources that belong to it
#       8) check that after jobs finish (are deleted), all resources go back to spare pool
#
#*******************************************************************************
proc si_check {} {
   upvar #0 hedeby_si_ctx this
   while {true} {
       set slot_count 0

       ############################################################################################################
       ts_log_heading "Starting SI use case check function ..."
       ts_log_heading "Step 1: Determining number of overall slots and setting owner properties ..."

       #move all resources from spare pool to first (any) gridengine adapter to get number of slots value
       set spare_pool_res [get_all_spare_pool_resources]
       set cur_adapter [lindex $this(adapters) 0]
       unset -nocomplain exp_res_info
       foreach resource $spare_pool_res {
          sdmadm_command_opt "mvr -r $resource -s $cur_adapter"
          if {$prg_exit_state != 0} {
             ts_log_severe "Step 1: Executing command resource move failed while moving resource '$resource' to '$cur_adapter'"
             return
          }
          set exp_res_info($resource,service) $cur_adapter
          set exp_res_info($resource,flags) "{}"
          set exp_res_info($resource,state) "ASSIGNED"
       }
       set retval [wait_for_resource_info exp_res_info 120 0 mvr_error]
       if {$retval != 0} {
          ts_log_severe "Step 1: Moving resource $resource to '$cur_adapter' service failed with following error message: $mvr_error"
          return
       }

       set slot_count_cmd "-q -h %s -xml | grep \"slots\'\" | sed -e \"s#<queuevalue qname='all.q' name='slots'>##g\" | sed -e \"s#</queuevalue>##g\"  | sed -e \"s# *##g\""

       # add owner property to spare pool resources
       #    the spare pool resources are distributed evenly among the owner groups
       set i 0
       foreach resource $spare_pool_res {
          set plainoutput [start_sge_bin "qhost" [format $slot_count_cmd $resource]]
          if {$prg_exit_state != 0} {
                ts_log_severe "Step 1: Execution of command qhost failed with following error:\n $plainoutput"
                return
          }
          if {[string is integer -strict $plainoutput] != 1} {
                ts_log_severe "Step 1: This value $plainoutput has to be a number"
                return
          }
          set slot_count [expr $slot_count + $plainoutput]
          set adapter [lindex $this(adapters) [expr $i%3]]
          incr i
          set owner_prop(owner) $adapter
          mod_hedeby_resource $resource owner_prop
          lappend res_for_adapter($adapter) $resource
          lappend this(resource_list) $resource
       }

       # move spare pool resources back
       if {[move_resources_to_default_services] != 0} {
          ts_log_severe "Step 1: Moving services to default services failed"
          return
       }

       # add owner property to moveable_execds resources
       ts_log_heading "Step 2: Disabling of queues on master hosts (static) ..."
       foreach adapter $this(adapters) {
          #lets disable all queues of our static ge_adapter service execd
          set_current_cluster_config_nr $this(ts_cluster_nr,$adapter)
          set host $this(master_host,$adapter)
          if {[disable_queue [get_queue_instance all.q $host]] != 0} {
             ts_log_severe "Step 2: Disabling of queues of service $adapter on resource $host failed!"
             return
          }
          foreach resource $this(moveable_execds,$adapter) {
             set plainoutput [start_sge_bin "qhost" [format $slot_count_cmd $resource]]
             if {$prg_exit_state != 0} {
                ts_log_severe "Step 2: Execution of command qhost failed with following error:\n $plainoutput"
                return
          }
          if {[string is integer -strict $plainoutput] != 1} {
                ts_log_severe "Step 2: This value $plainoutput has to be a number"
                return
          }
          set slot_count [expr $slot_count + $plainoutput]
          set owner_prop(owner) "$adapter"
          if {[mod_hedeby_resource $resource owner_prop] != 0} {
                ts_log_severe "Step 2: Adding property to resource $resource failed"
                return
          }
          lappend res_for_adapter($adapter) $resource
          lappend this(resource_list) $resource
          }
       }

       ############################################################################################################
       # output some overall information about the test setup
       set msg    "#################################################\n"
       foreach adapter $this(adapters) {
          append msg "# $adapter has hosts: $res_for_adapter($adapter)\n"
       }
       append msg "#\n"
       append msg "# Overall number of slots: $slot_count\n"
       append msg "#################################################"
       ts_log_fine $msg


       ############################################################################################################
       ts_log_heading "Step 3: Setting up max pending jobs SLOs ..."
       # Step 3: create resource and request filter and set slos for each ge adapter
       foreach adapter $this(adapters) {
          set prop(owner) "{=} {$adapter}"
          set requestFilter [create_request_filter prop]
          set resourceFilter [create_resource_filter prop]
          set max_pending_jobs_slo1 [create_max_pending_jobs_slo 3 "MaxPendingJobsSLO_1" $resourceFilter $requestFilter "" 1 2]
          set max_pending_jobs_slo2 [create_max_pending_jobs_slo 2 "MaxPendingJobsSLO_2" "" "" "" 1 2]
          set slos {}
          lappend slos $max_pending_jobs_slo1
          lappend slos $max_pending_jobs_slo2
          if {[set_service_slos "mod_config" $adapter $slos 0 "seconds" 20] != 0} {
             ts_log_severe "Step 3: Setting slos for service \"$adapter\" failed!"
             return
          }
       }


       ############################################################################################################
       # Step 4: submit all slots sleeper jobs and all resources should go to first service
       set tries $slot_count
       set cur_adapter [lindex $this(adapters) 0]
       set_current_cluster_config_nr $this(ts_cluster_nr,$cur_adapter)
       ts_log_heading "Step 4: Submitting $tries sleeper jobs to adapter '$cur_adapter' ..."
       submit_job "-t 1-$tries $this(sleeper_with_no_output) 150"

       #check if resource was moved to first service
       unset -nocomplain exp_res_info
       foreach resource $this(resource_list) {
          set exp_res_info($resource,service) $cur_adapter
          set exp_res_info($resource,flags) "{}"
          set exp_res_info($resource,state) "ASSIGNED"
       }
       set retval [wait_for_resource_info exp_res_info 120 0 mvr_error]
       if {$retval != 0} {
          ts_log_severe "Step 4: Moving all resources to service '$cur_adapter' failed with following error message: $mvr_error"
          return
       }

       ############################################################################################################
       # Step 5: submit all slots sleeper jobs to the second cluster, all resources with the property owner=<second_cluster> should go to second cluster
       set tries $slot_count
       set cur_adapter [lindex $this(adapters) 1]
       set_current_cluster_config_nr $this(ts_cluster_nr,$cur_adapter)
       ts_log_heading "Step 5: Submitting $tries sleeper jobs to adapter '$cur_adapter' ..."
       submit_job "-t 1-$tries $this(sleeper_with_no_output) 150"
       unset -nocomplain exp_res_info
       foreach res $res_for_adapter($cur_adapter) {
          set exp_res_info($res,service) $cur_adapter
          set exp_res_info($res,flags) "{}"
          set exp_res_info($res,state) "ASSIGNED"           
       }
       # this calculates the additional timeout when number of slots is greater than 40
       set additional [expr ($slot_count > 40) ? $slot_count-40 : 0]
       set retval [wait_for_resource_info exp_res_info [expr 600 + 15 * $additional] 0 mvr_error]
       if {$retval != 0} {
          ts_log_severe "Step 5: Moving all resources to service $cur_adapter failed with following error message: $mvr_error"
          return
       }

       ############################################################################################################
       ts_log_heading "Step 6: Waiting for all resources to go back to spare pool ..."
       # Step 6: delete all remaining jobs in cluster
       # => this is just to speed things up a bit, we don't have to wait here. When
       #    all jobs are done (or deleted), then all resources should go back to the spare pool.
       foreach adapter $this(adapters) {
          set_current_cluster_config_nr $this(ts_cluster_nr,$adapter)
          delete_all_jobs
       }
       # wait for resources
       unset -nocomplain exp_res_info
       foreach res $this(resource_list) {
          set exp_res_info($res,service) "spare_pool"
          set exp_res_info($res,flags) "{}"
          set exp_res_info($res,state) "ASSIGNED"           
       }
       set retval [wait_for_resource_info exp_res_info [expr 600 + 15 * $additional] 0 mvr_error]
       if {$retval != 0} {
          ts_log_severe "Step 6: Moving all resources to service spare_pool failed with following error message: $mvr_error"
          return
       }

       ############################################################################################################
       # Step 7: submit 2 * all slots resource jobs to all of our clusters and we
       #         should check that first get all owner = first, second
       #         owner=second, third = third
       set tries [expr 2 * $slot_count]
       unset -nocomplain exp_res_info
       foreach adapter $this(adapters) {
          set_current_cluster_config_nr $this(ts_cluster_nr,$adapter)
          ts_log_heading "Step 7: Submitting $tries sleeper jobs to adapter '$adapter' ..."
          submit_job "-t 1-$tries $this(sleeper_with_no_output) 200"
          foreach resource $res_for_adapter($adapter) {
             set exp_res_info($resource,service) "$adapter"
             set exp_res_info($resource,flags) "{}"
             set exp_res_info($resource,state) "ASSIGNED"
          }
       }
       set retval [wait_for_resource_info exp_res_info [expr 1600 + 15 * $additional] 0 mvr_error]
       if {$retval != 0} {
          ts_log_severe "Step 7: Moving all resources to different owner services failed with following error message: $mvr_error"
          return
       }

       ############################################################################################################
       ts_log_heading "Step 8: Waiting for all resources to go back to spare pool again ..."
       # Step 8: delete all remaining jobs in cluster
       # => this is just to speed things up a bit, we don't have to wait here. When
       #    all jobs are done (or deleted), then all resources should go back to the spare pool.
       foreach adapter $this(adapters) {
          set_current_cluster_config_nr $this(ts_cluster_nr,$adapter)
          delete_all_jobs
       }
       # wait for resources
       unset -nocomplain exp_res_info
       foreach res $this(resource_list) {
          set exp_res_info($res,service) "spare_pool"
          set exp_res_info($res,flags) "{}"
          set exp_res_info($res,state) "ASSIGNED"           
       }
       set retval [wait_for_resource_info exp_res_info [expr 600 + 15 * $additional] 0 mvr_error]
       if {$retval != 0} {
            ts_log_severe "Step 8: Moving all resources to service spare_pool failed with following error message: $mvr_error"
       }

       if {[timestamp] > $this(end_time)} {
          set this(is_end) true
          break
       } else {
          si_cleanup
       }
   } 
}
