#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
set check_root_access_needs    "no"
set check_name                 "basic_resource_assignment"
set check_category             "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)       "basic resource movement test"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "basic_resource_assignment_init_level"
set check_functions            {}   
set check_highest_level        0

set check_setup_function "basic_resource_assignment_setup"
set check_cleanup_function "basic_resource_assignment_cleanup"

lappend check_functions "basic_resource_assignment_check"

# ---------------------------------------------------------------------------------
# here the tests begin ....
global basic_resource_assignment_current_cluster_config


#****** basic/basic_resource_assignment_init_level() ************************
#  NAME
#     basic_resource_assignment_init_level() -- init level procedure for test
#
#  SYNOPSIS
#     basic_resource_assignment_init_level { } 
#
#  FUNCTION
#     Return the supported runlevel of this test. Currently only level 0
#     is supported.
#
#  INPUTS
#
#  RESULT
#     0 for CHECK_ACT_LEVEL 0
#    -1 for all other levels
#
#*******************************************************************************
proc basic_resource_assignment_init_level {} {
  global CHECK_ACT_LEVEL

  if { $CHECK_ACT_LEVEL == 0 } {
     return 0
  }
  return -1
}

#****** basic/basic_resource_assignment_setup() *****************************
#  NAME
#     basic_resource_assignment_setup() -- prepare test setup
#
#  SYNOPSIS
#     basic_resource_assignment_setup { } 
#
#  FUNCTION
#     This test will work with additional clusters. Therefore the current
#     cluster nr is stored in a global variable. The cleanup procedure 
#     basic_resource_assignment_cleanup() will reset the current active
#     cluster again.
#
#  INPUTS
#     no input values
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     basic/basic_resource_assignment_cleanup()
#*******************************************************************************
proc basic_resource_assignment_setup {} {
   global basic_resource_assignment_current_cluster_config
   set basic_resource_assignment_current_cluster_config [get_current_cluster_config_nr]
}

#****** basic/basic_resource_assignment_cleanup() ***************************
#  NAME
#     basic_resource_assignment_cleanup() -- ??? 
#
#  SYNOPSIS
#     basic_resource_assignment_cleanup { } 
#
#  FUNCTION
#     Restore the current active cluster value stored by 
#     basic_resource_assignment_setup() procedure and perform hedeby reset.
#     The hedeby reset is don by reset_hedeby() which will move all resources
#     back to their original configured service.
#
#  INPUTS
#     no input values
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     basic/basic_resource_assignment_setup()
#*******************************************************************************
proc basic_resource_assignment_cleanup {} {
   global basic_resource_assignment_current_cluster_config

   # perform hedeby reset
   reset_hedeby 1

   # reset saved active cluster configuration nr
   set_current_cluster_config_nr $basic_resource_assignment_current_cluster_config
}

#****** basic/basic_resource_assignment_check() *****************************
#  NAME
#     basic_resource_assignment_check() -- basic resource movement test
#
#  SYNOPSIS
#     basic_resource_assignment_check { } 
#
#  FUNCTION
#     This test will perform some basic resource movement actions and
#     also check that resources are installed correctly after moving them.
#
#     actions:
#        1) Move all non static resources to spare pool
#        2) Check that:
#           a) Static resources have the "S" flag and are reported from
#              their default service in state "ASSIGNED"
#           b) All other resources are reported from "spare_pool" service
#              with empty flags in state "ASSIGNED"
#        3) Every ge cluster should only report the static execd resources.
#           This is checked by getting the exec host list from the qmaster
#           of each service via qconf -sel (tcl procedure get_exechost_list())
#        4) Check that moved resources are correctly installed at their
#           service after movement.
#           a) Assign all moveable resources to every service
#           b) Check that all flags are empty, state is ASSIGNED and that
#              the correct service is reporting them
#           c) Check correct resource installations by submitting jobs
#              to the new assigned resources at each service.
#           d) Wait that the jobs are reported in the accounting file of
#              each service.
#           e) Check job "exit_status" and job "hostname" in the
#              accounting files of the services.
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     basic/basic_resource_assignment_setup()
#     basic/basic_resource_assignment_cleanup()
#*******************************************************************************
proc basic_resource_assignment_check {} {
   global hedeby_config

   # get some global settings
   set pref_type [get_hedeby_pref_type]
   set sys_name [get_hedeby_system_name]
   set admin_user [get_hedeby_admin_user]
   set ge_hosts [get_hedeby_default_services service_names]

   # init text array for reporting errors
   # (errors are logged at the end of the test)
   set error_text ""

   # obtain information which resources are static and what must be moved
   ts_log_fine "move all not static resources from GE services to spare_pool"
   set mvr_list {}
   set static_list {}
   foreach service $service_names(services) {
      foreach res $service_names(moveable_execds,$service) {
         if {[lsearch -exact $mvr_list $res] < 0} {
            lappend mvr_list $res
         }
      }
      foreach res $service_names(master_host,$service) {
         if {[lsearch -exact $static_list $res] < 0} {
            lappend static_list $res
         }
      }
   }
   ts_log_fine "moving resource(s) \"$mvr_list\" to spare_pool ..."

   # starting parallel resource movement on every resource host ...
   foreach res $mvr_list {
      set task_info($res,expected_output) ""
      set task_info($res,sdmadm_command) "-p $pref_type -s $sys_name mvr -r $res -s spare_pool"
   }
   set par_error [start_parallel_sdmadm_command mvr_list [get_hedeby_admin_user] task_info]
   if {$par_error != ""} {
      append error_text $par_error
   }

   # now wait and check that all moved resources are gone to spare_pool ...
   # step 1: set expected resource information values
   foreach res $mvr_list {
      set exp_resource_info($res,service) "spare_pool"
      set exp_resource_info($res,flags) "{}"
      set exp_resource_info($res,state) "ASSIGNED"
   }
   foreach res $static_list {
      set exp_resource_info($res,service) "$service_names(default_service,$res)" 
      set exp_resource_info($res,flags) "S"
      set exp_resource_info($res,state) "ASSIGNED"
   }
   # step 2: wait for expected resource informations
   set retval [wait_for_resource_info exp_resource_info 60 0 mvr_error]

   # step 3: error handling
   if { $retval != 0} {
      # if there were no error till now, print output of previous actions
      if {$error_text == ""} {
         append error_text "Following action(s) was/were started:\n"
         foreach res $mvr_list {
            append error_text $task_info($res,output)
         }
      }
      # append missing resources info to error output
      append error_text $mvr_error
   }


   # now check that all ge clusters only have master host execd ...
   # get execd lists from each service via qconf call
   set static_ge_execds {}
   set cluster 0
   while { [set_current_cluster_config_nr $cluster] == 0 } {
      # get configuration for the active cluster to find out the
      # master host who is used to start the qconf command
      get_current_cluster_config_array ts_tmp_config
      if { [get_exechost_list execds $ts_tmp_config(master_host) ] != 0 } {
         append error_text "cannot get execd list from cluster #$cluster\n"
      } else {
         foreach host $execds {
            # we have to resolve the hosts since GE may report long host names
            lappend static_ge_execds [resolve_host $host]
         }
      }
      incr cluster 1
   }
   set_current_cluster_config_nr 0

   # now find out if all reported execd hosts are static resources and
   # no other host is remaining in the execd lists of the ge service
   ts_log_fine "reported execds at ge masters: $static_ge_execds"
   foreach res $static_list {
      set pos [lsearch -exact $static_ge_execds $res]
      if { $pos >= 0 } {
         set static_ge_execds [lreplace $static_ge_execds $pos $pos]
      }
   }

   if { [llength $static_ge_execds] > 0 } {
      append error_text "Still reported not static execds on GE masters: $static_ge_execds\n"
   } else {
      ts_log_fine "Only expected static resources are available on GE masters side - ok"
   }

   # now assign each host from spare pool to each service ...
   # here check the correct resource installation by submitting job

   # get all assignable resources and store it in spare_pool_list
   set spare_pool_list {}
   foreach host $mvr_list {
      lappend spare_pool_list $host
   }
   foreach host [host_conf_get_nodes $hedeby_config(hedeby_host_resources)] {
      lappend spare_pool_list $host
   }

   # for all services ...
   foreach service $service_names(services) {

      # ... move all resources to the service and wait for its complete
      #     installation
      ts_log_fine "moving all spare_pool resources to service \"$service\""
      unset task_info
      unset exp_resource_info
      foreach res $spare_pool_list {
         set task_info($res,expected_output) ""
         #TODO: use mvr -r resourceA,resourceB,... if implemented
         set task_info($res,sdmadm_command) "-p $pref_type -s $sys_name mvr -r $res -s $service"
      }
      set par_error [start_parallel_sdmadm_command spare_pool_list [get_hedeby_admin_user] task_info]
      if {$par_error != ""} {
         append error_text $par_error
      }
      foreach res $spare_pool_list {
         set exp_resource_info($res,service) "$service"
         set exp_resource_info($res,flags) "{}"
         set exp_resource_info($res,state) "ASSIGNED"
      }
      set retval [wait_for_resource_info exp_resource_info 60 0 mvr_error]
      if { $retval != 0} {
         # if there were no error till now, print output of previous actions
         if {$error_text == ""} {
            append error_text "Following action(s) was/were started:\n"
            foreach res $spare_pool_list {
               append error_text $task_info($res,output)
            }
         }
         # append missing resources info to error output
         append error_text $mvr_error
      } else {
         # ... if installation was ok, check that a job can be submitted to the resources
         ts_log_fine "All resource moved to service \"$service\", now starting jobs for the new resources ..."

         # switch the actual cluster and get configuration
         set job_list {}
         set_current_cluster_config_nr $service_names(ts_cluster_nr,$service)
         get_current_cluster_config_array ts_tmp_config

         # submit job to every new installed execd and store the job ids
         foreach host $spare_pool_list {
            set job_arguments "-o /dev/null -e /dev/null -l h=$host $ts_tmp_config(product_root)/examples/jobs/sleeper.sh 5"
            set job_id [submit_job $job_arguments 1 60 $service_names(master_host,$service)]
            set job_host($job_id) $host
            lappend job_list $job_id
         }

         # wait for last submitted job to start ...
         wait_for_jobstart $job_id "leeper" 60 1 1
         # wait for last submitted job to finish ...
         wait_for_jobend $job_id "leeper" 60 0 1

         # now check job accounting information ...
         foreach job $job_list {
            # get accouting for job and store reported exit_status and hostname
            get_qacct $job qacct_info $service_names(master_host,$service)
            set job_exit_state $qacct_info(exit_status)
            set job_hostname $qacct_info(hostname)
            ts_log_fine "job \"$job\" at service \"$service\" on host \"$service_names(master_host,$service)\" reported:"
            ts_log_fine "Exit state: $job_exit_state"
            ts_log_fine "Hostname:   $job_hostname"

            # check exit status (should be 0)
            if {$job_exit_state != 0} {
               append error_text "Job \"$job\" at service \"$service\" on host \"$service_names(master_host,$service)\" has\n"
               append error_text "exit state \"$job_exit_state\"\n"
            }
            # check hostname where the job was executed (should be the name of the resource)
            if {[resolve_host $job_hostname] != $job_host($job)} {
               append error_text "Job \"$job\" at service \"$service\" on host \"$service_names(master_host,$service)\" was\n"
               append error_text "not running on host \"$job_host($job)\", reported host was \"$job_hostname\"\n"
            }
         }
      }
   }

   # got to active cluster 0
   set_current_cluster_config_nr 0

   # finally report one big error mail
   if {$error_text != ""} {
      ts_log_severe $error_text
   }
}

