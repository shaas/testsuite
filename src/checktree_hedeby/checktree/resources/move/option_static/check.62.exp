#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2009 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
set check_root_access_needs      "yes"
set check_name                   "hedeby_resource_move_option_static"
set check_category               "COMPATIBILITY SYSTEM VERIFIED"
set check_description(0)         "Check that resource move with -static option to GE service works"
set check_needs                  "hedeby_install"                  
set check_init_level_procedure   "hedeby_resource_move_option_static_init_level"
set check_highest_level          0
set check_functions              "hedeby_resource_move_option_static_check"
set check_setup_level_function   "hedeby_resource_move_option_static_setup_level"
set check_cleanup_level_function "hedeby_resource_move_option_static_cleanup_level"


#****** hedeby_resource_move_option_static_init_level() ************************
#  NAME
#     hedeby_resource_move_option_static_init_level() -- init level procedure for test
#
#  SYNOPSIS
#     hedeby_resource_move_option_static_init_level { } 
#
#  FUNCTION
#     Return the supported runlevel of this test. Currently only level 0
#     is supported.
#
#  INPUTS
#
#  RESULT
#     0 for CHECK_ACT_LEVEL 0
#    -1 for all other levels
#
#*******************************************************************************
proc hedeby_resource_move_option_static_init_level {} {
  global CHECK_ACT_LEVEL

  if {$CHECK_ACT_LEVEL == 0} {
     return 0
  }
  return -1
}

#****** hedeby_resource_move_option_static_setup_level() *********************************
#  NAME
#     hedeby_resource_move_option_static_setup_level() -- setup level function
#
#  SYNOPSIS
#     hedeby_resource_move_option_static_setup_level{ } 
#
#  FUNCTION
#     set up hedeby_resource_move_option_static_ctx variable
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#*******************************************************************************
proc hedeby_resource_move_option_static_setup_level {} {
   upvar #0 hedeby_resource_move_option_static_ctx this

   get_hedeby_default_services service_names

   set this(resource) [pick_random [get_all_spare_pool_resources]]
   set this(ge_service) [pick_random $service_names(services)]

   return
}

#****** hedeby_resource_move_option_static_cleanup_level() *******************************
#  NAME
#     hedeby_resource_move_option_static_cleanup_level() -- clean up level function
#
#  SYNOPSIS
#     hedeby_resource_move_option_static_cleanup_level { } 
#
#  FUNCTION
#     clean up the system
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#*******************************************************************************
proc hedeby_resource_move_option_static_cleanup_level {} {
   upvar #0 hedeby_resource_move_option_static_ctx this

   set doReset 0

   # reset static flag
   #   we can do this in any case, as doing this double does not hurt
   set props(static) "false"
   if { $doReset == 0 && [mod_hedeby_resource $this(resource) props] != 0 } {
      set doReset 1
   }

   # move resource back
   #   or simply check that the resource moved back
   if { $doReset == 0 && [move_resources_to_default_services] != 0 } {
      set doReset 1
   }

   if {$doReset != 0} {
      reset_hedeby 1
   }

   unset this
   return
}


# ------------------------------------------------------------------------------
# here the tests begin ....

#****** hedeby_resource_move_option_static_check *****************************
#  NAME
#     hedeby_resource_move_option_static_check() -- Check "move_resource -static"
#
#  SYNOPSIS
#     hedeby_resource_move_option_static_check { } 
#
#  FUNCTION
#     Steps 1+2:
#        Moves a randomly picked (spare_pool) resource to a GE service with
#        -static option.  Then it is checked that the resource actually does
#        have the static flag set.
#
#     Step 3:
#        Reset the static flag on the resource.
#
#     Steps 4+5:
#        Move resource back to spare pool with -static.  Then check that the
#        resource arrives in spare pool and has static flag set.
#
#     We don't have to test that a static resource cannot be moved. This is
#     done in the resource/move/static test.
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#
#*******************************************************************************
proc hedeby_resource_move_option_static_check {} {   
   upvar #0 hedeby_resource_move_option_static_ctx this

   # ---------------------------------------------------------------------------
   ts_log_heading "Step 1: Moving resource '$this(resource)' to GE service '$this(ge_service)' with -static option"
   # ---------------------------------------------------------------------------
   sdmadm_command_opt "move_resource -r $this(resource) -s $this(ge_service) -static"

   # ---------------------------------------------------------------------------
   ts_log_heading "Step 2: Checking arrival of resource and state of static flag"
   # ---------------------------------------------------------------------------
   unset -nocomplain exp_res_info
   set exp_res_info($this(resource),service) $this(ge_service)
   set exp_res_info($this(resource),flags) "S"
   set exp_res_info($this(resource),state) "ASSIGNED"
   set opt(raise_error) 0 ; # so we don't get 2 mails
   set opt(error_var)   mvr_error
   if { [wait_for_resource_info_opt exp_res_info opt] != 0} {
      set    msg "Step 2: Resource '$this(resource)' at GE service '$this(ge_service)'\n"
      append msg "is not in expected state (ASSIGNED with static flag set):\n$mvr_error"
      ts_log_severe $msg
      return
   }

   # ---------------------------------------------------------------------------
   ts_log_heading "Step 3: Resetting static flag on resource '$this(resource)'"
   # ---------------------------------------------------------------------------
   set props(static) "false"
   if { [mod_hedeby_resource $this(resource) props] != 0 } {
      ts_log_severe "Step 3: Could not reset static flag on resource '$this(resource)'"
      return
   }

   # ---------------------------------------------------------------------------
   ts_log_heading "Step 4: Moving resource '$this(resource)' to spare pool with -static option"
   # ---------------------------------------------------------------------------
   sdmadm_command_opt "move_resource -r $this(resource) -s spare_pool -static"

   # ---------------------------------------------------------------------------
   ts_log_heading "Step 5: Checking arrival of resource and state of static flag"
   # ---------------------------------------------------------------------------
   unset -nocomplain exp_res_info
   set exp_res_info($this(resource),service) spare_pool
   set exp_res_info($this(resource),flags) "S"
   set exp_res_info($this(resource),state) "ASSIGNED"
   set opt(raise_error) 0 ; # so we don't get 2 mails
   set opt(error_var)   mvr_error
   if { [wait_for_resource_info_opt exp_res_info opt] != 0} {
      set    msg "Step 5: Resource '$this(resource)' at spare pool'\n"
      append msg "is not in expected state (ASSIGNED with static flag set):\n$mvr_error"
      ts_log_severe $msg
   }

   return
}
