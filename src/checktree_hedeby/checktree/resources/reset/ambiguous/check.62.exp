#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependend parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
set check_root_access_needs    "no"
set check_name                 "ambiguous_resource_reset"
set check_category             "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)       "resource reset test of AMBIGUOUS resource"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "ambiguous_resource_reset_init_level"
set check_functions            {}   
set check_highest_level        0

set check_setup_function "ambiguous_resource_reset_setup"
set check_cleanup_function "ambiguous_resource_reset_cleanup"

lappend check_functions "ambiguous_resource_reset_check"

# ---------------------------------------------------------------------------------
# here the tests begin ....
global ambiguous_resource_reset_current_cluster_config
global ambiguous_resource_reset_is_set

#****** assigned/ambiguous_resource_reset_init_level() ************************
#  NAME
#     ambiguous_resource_reset_init_level() -- init level procedure for test
#
#  SYNOPSIS
#     ambiguous_resource_reset_init_level { } 
#
#  FUNCTION
#     Return the supported runlevel of this test. Currently only level 0 is supported.
#
#  INPUTS
#
#  RESULT
#     0 for CHECK_ACT_LEVEL 0
#    -1 for all other levels
#
#*******************************************************************************
proc ambiguous_resource_reset_init_level {} {
  global CHECK_ACT_LEVEL

  if { $CHECK_ACT_LEVEL == 0 } {
     return 0
  }
  
  return -1
}

#****** assigned/ambiguous_resource_reset_setup() *****************************
#  NAME
#     ambiguous_resource_reset_setup() -- prepare test setup
#
#  SYNOPSIS
#     ambiguous_resource_reset_setup { } 
#
#  FUNCTION
#     This test may work with additional clusters. Therefore the current
#     cluster nr is stored in a global variable. The cleanup procedure 
#     ambiguous_resource_reset_cleanup() will reset the current active
#     cluster again.
#
#  INPUTS
#     no input values
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     assigned/ambiguous_resource_reset_cleanup()
#*******************************************************************************
proc ambiguous_resource_reset_setup {} {
   global ambiguous_resource_reset_current_cluster_config   
   global ambiguous_resource_reset_is_set
   
   set ambiguous_resource_reset_current_cluster_config [get_current_cluster_config_nr]   
   set ambiguous_resource_reset_is_set 0
}

#****** assigned/ambiguous_resource_reset_cleanup() ***************************
#  NAME
#     ambiguous_resource_reset_cleanup() -- reset the cluster nr and do hedeby reset 
#
#  SYNOPSIS
#     ambiguous_resource_reset_cleanup { } 
#
#  FUNCTION
#     Restore the current active cluster value stored by 
#     ambiguous_resource_reset_setup() procedure, perform reset of ambiguous 
#     resource and perform hedeby reset.
#     The hedeby reset is done by reset_hedeby() which will move all resources
#     back to their original configured service.
#
#  INPUTS
#     no input values
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     assigned/ambiguous_resource_reset_setup()
#*******************************************************************************
proc ambiguous_resource_reset_cleanup {} {
   global ambiguous_resource_reset_current_cluster_config
   global ambiguous_resource_reset_is_set
   global hedeby_config
   
   # reset saved active cluster configuration nr
   set_current_cluster_config_nr $ambiguous_resource_reset_current_cluster_config
   
   # reset ambiguous resource
   if { $ambiguous_resource_reset_is_set != 0 } {
        reset_produced_ambiguous_resource
   }
   # perform hedeby reset
   reset_hedeby 1

}

#****** assigned/ambiguous_resource_reset_check() *****************************
#  NAME
#     ambiguous_resource_reset_check() -- resource reset test of an ambiguous resource.
#
#  SYNOPSIS
#     ambiguous_resource_reset_check { } 
#
#  FUNCTION
#     This test will create an ambiguous resource and will trigger a reset on it.
#
#     actions:
#        1) Produce an ambiguous resource
#        2) Perform "sdmadm reset" on the resource
#        3) Check that 
#           a) all resource attributes are as before reset was triggered
#           b) exist status of the command is 2
#           c) output message of the command is as expected    
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     assigned/ambiguous_resource_reset_setup()
#     assigned/ambiguous_resource_reset_cleanup()
#*******************************************************************************
proc ambiguous_resource_reset_check {} {
   global hedeby_config
   global CHECK_ACT_LEVEL
   global ambiguous_resource_reset_is_set
   
   # get some global settings
   set pref_type [get_hedeby_pref_type]
   set sys_name [get_hedeby_system_name]
   set admin_user [get_hedeby_admin_user]
   set ge_hosts [get_hedeby_default_services service_names]
   set exec_host $hedeby_config(hedeby_master_host)

   # init text array for reporting errors
   # (errors are logged at the end of the test)
   set error_text ""

   # initialize the subject of reset command
   set rst ""  

   # produce ambiguous resource
   set retval [produce_ambiguous_resource rst srv]
   if { $retval == 0 } {       
       
        ts_log_fine "got ambiguous resource $rst, test can continue"
        set ambiguous_resource_reset_is_set 1
        # check the resource attributes (to be sure it is ambiguous and for 
        # for later comparison)
        set retval_gri [get_resource_info $exec_host $admin_user resource_info1 rp1 rl1 amb1]
        if { $retval_gri == 0 } {
            set rflags $resource_info1($rst,flags)
            if {[string match "$rflags" "A A"]} {
                ts_log_fine "resource $rst has correct flags" 

                # prepare sdmadm command and start it ...
                set sdmadm_command_line "-p $pref_type -s $sys_name rsr -r $rst"
                set output [sdmadm_command $exec_host $admin_user $sdmadm_command_line prg_exit_state "" 0 table]
                # build expected output message from bundle properties file ... 
                set xyz(0) $rst
                set expected_output [create_bundle_string "rm.error.non_unique_res" xyz]
                ts_log_fine "expected output: $expected_output"
                # get sdmadm output message string ...
                set output_message [lindex $table([lindex $table(table_columns) 1],0) 0]
                ts_log_fine "output message is: $output_message"

                # compare the output with the expected output ...
                if {[string match "$expected_output" $output_message]} {
                    ts_log_fine "output is matching!"
                } else {
                    append error_text "The output message doesn't match expected output\n"
                    append error_text "Expected output: \"$expected_output\"\n"
                    append error_text "Received output: \"$output_message\"\n"
                }

                if { $prg_exit_state != 2 } {
                    append error_text "The exit state \"$prg_exit_state\" doesn't match the expected exit state \"2\"\n"
                } else {
                    ts_log_fine "The exit state \"$prg_exit_state\" does match the expected exit state \"2\"\n"                    

                    # get resource informations (updated), wait some time (we could use wait_for_resource_info, but it'd be more complicated)
                    ts_log_fine "getting updated resource information"
                    after 5000
                    unset retval_gri 
                    set retval_gri [get_resource_info $exec_host $admin_user resource_info2 rp2 rl2 amb2]
                    if { $retval_gri == 0 } {
                        set ri_comparison [compare_resource_infos [array get resource_info1] [array get rp1] $rl1 $amb1 [array get resource_info2] [array get rp2] $rl2 $amb2 etext ]
                        if { $ri_comparison == 0} {
                            ts_log_fine "before/after reset resources information are the same"
                        } else {
                            ts_log_fine "i am here!"
                            append error_text $etext
                        }
                    } else {
                        append error_text "getting an updated resource info failed, test can not continue\n"
                    }                    
                }
            } else {
                append error_text "resource $rst does not have correct flags: $rflags, test can not continue\n"
            }
        } else {
            append error_text "getting a resource info failed, test can not continue\n"
        }
       
   } else {
      append error_text "producing a ambiguous resource failed, test can not continue\n"
   }
                  
   # finally report one big error mail
   if {$error_text != ""} {
      ts_log_severe $error_text
   }
}

