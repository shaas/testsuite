#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependend parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
set check_root_access_needs    "yes"
set check_name                 "ambiguous_resource_reset"
set check_category             "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)       "resource reset test of AMBIGUOUS resource"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "ambiguous_resource_reset_init_level"
set check_functions            {}   
set check_highest_level        0

set check_setup_level_function "ambiguous_resource_reset_setup"
set check_cleanup_level_function "ambiguous_resource_reset_cleanup"

lappend check_functions "ambiguous_resource_reset_check"

# ---------------------------------------------------------------------------------
# here the tests begin ....
global ambiguous_resource_reset_current_cluster_config
global ambiguous_resource_reset_is_set

#****** assigned/ambiguous_resource_reset_init_level() ************************
#  NAME
#     ambiguous_resource_reset_init_level() -- init level procedure for test
#
#  SYNOPSIS
#     ambiguous_resource_reset_init_level { } 
#
#  FUNCTION
#     Return the supported runlevel of this test. Currently only level 0 is supported.
#
#  INPUTS
#
#  RESULT
#     0 for CHECK_ACT_LEVEL 0
#    -1 for all other levels
#
#*******************************************************************************
proc ambiguous_resource_reset_init_level {} {
  global CHECK_ACT_LEVEL

  if { $CHECK_ACT_LEVEL == 0 } {
     return 0
  }
  
  return -1
}

#****** assigned/ambiguous_resource_reset_setup() *****************************
#  NAME
#     ambiguous_resource_reset_setup() -- prepare test setup
#
#  SYNOPSIS
#     ambiguous_resource_reset_setup { } 
#
#  FUNCTION
#     This test may work with additional clusters. Therefore the current
#     cluster nr is stored in a global variable. The cleanup procedure 
#     ambiguous_resource_reset_cleanup() will reset the current active
#     cluster again.
#
#  INPUTS
#     no input values
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     assigned/ambiguous_resource_reset_cleanup()
#*******************************************************************************
proc ambiguous_resource_reset_setup {} {
   upvar #0 ambiguous_resource_reset_ctx this
  
   set this(reset_is_set) 0
}

#****** assigned/ambiguous_resource_reset_cleanup() ***************************
#  NAME
#     ambiguous_resource_reset_cleanup() -- reset the cluster nr and do hedeby reset 
#
#  SYNOPSIS
#     ambiguous_resource_reset_cleanup { } 
#
#  FUNCTION
#     Restore the current active cluster value stored by 
#     ambiguous_resource_reset_setup() procedure, perform reset of ambiguous 
#     resource and perform hedeby reset.
#     The hedeby reset is done by reset_hedeby() which will move all resources
#     back to their original configured service.
#
#  INPUTS
#     no input values
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     assigned/ambiguous_resource_reset_setup()
#*******************************************************************************
proc ambiguous_resource_reset_cleanup {} {
   upvar #0 ambiguous_resource_reset_ctx this
   
   # reset ambiguous resource
   if { $this(reset_is_set) != 0 } {
        reset_produced_ambiguous_resource  ;# this procedore already calls reset if failed
   }

   unset this
}

#****** assigned/ambiguous_resource_reset_check() *****************************
#  NAME
#     ambiguous_resource_reset_check() -- resource reset test of an ambiguous resource.
#
#  SYNOPSIS
#     ambiguous_resource_reset_check { } 
#
#  FUNCTION
#     This test will create an ambiguous resource and will trigger a reset on it.
#
#     actions:
#        Step 1: Produce an ambiguous resource
#        2) Perform "sdmadm reset" on the resource
#        3) Check that 
#           a) all resource attributes are as before reset was triggered
#           b) exist status of the command is 2
#           c) output message of the command is as expected    
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     assigned/ambiguous_resource_reset_setup()
#     assigned/ambiguous_resource_reset_cleanup()
#*******************************************************************************
proc ambiguous_resource_reset_check {} {
   upvar #0 ambiguous_resource_reset_ctx this

   # --------------------------------------------------------------------------------------
   ts_log_heading "Step 1: Produces ambiguous resource"
   # --------------------------------------------------------------------------------------
   # produce ambiguous resource
   if { [produce_ambiguous_resource rst srv] != 0 } {
      ts_log_severe "Could not produce an ambiguous resource"
      return
   }
   set this(reset_is_set) 1
   ts_log_fine "got ambiguous resource $rst, test can continue"

   set opts(timeout)  60
   set opts(res_info) ri1 
   set opts(res_prop) rp1
   set opts(res_list) rl1
   set opts(res_list_not_uniq) amb1

   if { [string compare $srv "spare_pool"] < 0 } {
      set exp_ri($rst,service) "$srv spare_pool"
      set exp_ri($rst,usage)   "50 1"
   } else {
      set exp_ri($rst,service) "spare_pool $srv"
      set exp_ri($rst,usage)   "1 50"
   }
   set exp_ri($rst,flags)   "A A"
   set exp_ri($rst,state)   "ASSIGNED ASSIGNED"
   if { [wait_for_resource_info_opt exp_ri opts] != 0 } {
      return
   }
   unset opts
   unset exp_ri
 
   # --------------------------------------------------------------------------------------
   ts_log_heading "Step 2: Reseting ambiguous resource '$rst'"
   # --------------------------------------------------------------------------------------
   set opts(raise_error) 0 
   set opts(table_output) table
   sdmadm_command_opt "rsr -r $rst" opts
   if { $prg_exit_state != 2 } {
        ts_log_severe "'sdmadm rsr' on an ambigious resource must end up with exit state 2, got $prg_exit_state"
        return
   } 
   unset opts

   # build expected output message from bundle properties file ... 
   set xyz(0) "$rst*"
   set expected_output [create_bundle_string "rm.resr.non_unique_res" xyz]
   ts_log_fine "expected output: $expected_output"
   # get sdmadm output message string ...
   set output_message [lindex $table([lindex $table(table_columns) 1],0) 0]
   ts_log_fine "output message is: $output_message"

   # compare the output with the expected output ...
   if {[string match "$expected_output" $output_message]} {
       ts_log_fine "output is matching!"
   } else {
       set    msg "The output message of 'sdmadm rsr' on an ambiguous resource doesn't match expected output\n"
       append msg "Expected output: \"$expected_output\"\n"
       append msg "Received output: \"$output_message\"\n"
       ts_log_sever $msg
       return
   }

   # --------------------------------------------------------------------------------------
   ts_log_heading "Step 3: Check that resource '$rst' goes into ASSIGNED state"
   # --------------------------------------------------------------------------------------
   set opts(timeout)  60
   set opts(res_info) ri2 
   set opts(res_prop) rp2
   set opts(res_list) rl2
   set opts(res_list_not_uniq) amb2

   if { [string compare $srv "spare_pool"] < 0 } {
      set exp_ri($rst,service) "$srv spare_pool"
      set exp_ri($rst,usage)   "50 1"
   } else {
      set exp_ri($rst,service) "spare_pool $srv"
      set exp_ri($rst,usage)   "1 50"
   }
   set exp_ri($rst,flags)   "A A"
   set exp_ri($rst,state)   "ASSIGNED ASSIGNED"
   if { [wait_for_resource_info_opt exp_ri opts] != 0 } {
      return
   }
   unset opts
   unset exp_ri

   # --------------------------------------------------------------------------------------
   ts_log_heading "Step 4: Check that reset did not changed the resource properties"
   # --------------------------------------------------------------------------------------
  
   set ri_comparison [compare_resource_infos [array get ri1] [array get rp1] $rl1 $amb1 [array get ri2] [array get rp2] $rl2 $amb2 etext ]
   if { $ri_comparison == 0} {
      ts_log_fine "before/after reset resources information are the same"
   } else {
      set msg    "Reset on ambiguous resource '$rst' changed the resource properties:\n"
      append msg "$etext"
      ts_log_severe $msg
      return
   }
}
