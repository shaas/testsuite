#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependend parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
set check_root_access_needs    "no"
set check_name                 "assigned_resource_reset"
set check_category             "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)       "resource reset test of ASSIGNED resource"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "assigned_resource_reset_init_level"
set check_functions            {}   
set check_highest_level        0

set check_setup_function "assigned_resource_reset_setup"
set check_cleanup_function "assigned_resource_reset_cleanup"

lappend check_functions "assigned_resource_reset_check"

# ---------------------------------------------------------------------------------
# here the tests begin ....
global assigned_resource_reset_current_cluster_config
global assigned_resource_reset_executor_shutdown
global assigned_resource_reset_executor_shutdown_host


#****** assigned/assigned_resource_reset_init_level() ************************
#  NAME
#     assigned_resource_reset_init_level() -- init level procedure for test
#
#  SYNOPSIS
#     assigned_resource_reset_init_level { } 
#
#  FUNCTION
#     Return the supported runlevel of this test. Currently only level 0 is supported.
#
#  INPUTS
#
#  RESULT
#     0 for CHECK_ACT_LEVEL 0
#    -1 for all other levels
#
#*******************************************************************************
proc assigned_resource_reset_init_level {} {
  global CHECK_ACT_LEVEL

  if { $CHECK_ACT_LEVEL == 0 } {
     return 0
  }
  
  return -1
}

#****** assigned/assigned_resource_reset_setup() *****************************
#  NAME
#     assigned_resource_reset_setup() -- prepare test setup
#
#  SYNOPSIS
#     assigned_resource_reset_setup { } 
#
#  FUNCTION
#     This test may work with additional clusters. Therefore the current
#     cluster nr is stored in a global variable. The cleanup procedure 
#     assigned_resource_reset_cleanup() will reset the current active
#     cluster again.
#
#  INPUTS
#     no input values
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     assigned/assigned_resource_reset_cleanup()
#*******************************************************************************
proc assigned_resource_reset_setup {} {
   global assigned_resource_reset_current_cluster_config   
   global assigned_resource_reset_executor_shutdown
   
   set assigned_resource_reset_current_cluster_config [get_current_cluster_config_nr]
   set assigned_resource_reset_executor_shutdown 0
}

#****** assigned/assigned_resource_reset_cleanup() ***************************
#  NAME
#     assigned_resource_reset_cleanup() -- reset the cluster nr and do hedeby reset 
#
#  SYNOPSIS
#     assigned_resource_reset_cleanup { } 
#
#  FUNCTION
#     Restore the current active cluster value stored by 
#     assigned_resource_reset_setup() procedure and perform hedeby reset.
#     The hedeby reset is done by reset_hedeby() which will move all resources
#     back to their original configured service.
#
#  INPUTS
#     no input values
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     assigned/assigned_resource_reset_setup()
#*******************************************************************************
proc assigned_resource_reset_cleanup {} {
   global assigned_resource_reset_current_cluster_config
   global assigned_resource_reset_executor_shutdown
   global assigned_resource_reset_executor_shutdown_host
   global hedeby_config
   
   # get some global settings
   set pref_type [get_hedeby_pref_type]
   set sys_name [get_hedeby_system_name]
   set admin_user [get_hedeby_admin_user]
   set ge_hosts [get_hedeby_default_services service_names]
   set exec_host $hedeby_config(hedeby_master_host)
   
   # reset saved active cluster configuration nr
   set_current_cluster_config_nr $assigned_resource_reset_current_cluster_config

   if { $assigned_resource_reset_executor_shutdown == 1 } {
    # prepare sdmadm command and start it ...
    set sdmadm_command_line "-p $pref_type -s $sys_name suc -c executor -h $assigned_resource_reset_executor_shutdown_host"
    set output [sdmadm_command $exec_host $admin_user $sdmadm_command_line prg_exit_state "" 0 table]
    # check that exit state == 0 (executor was correctly started
    ts_log_fine "executor start exit state: $prg_exit_state"
    if { $prg_exit_state != 0 } {
        ts_log_fine "The exit state \"$prg_exit_state\" doesn't match the expected exit state \"0\", executor was not started, cleanup failed\n"
    } else {
        ts_log_fine "Executor startup was triggered\n"
    }
   } 

   # perform hedeby reset
   reset_hedeby 1

}

#****** assigned/assigned_resource_reset_check() *****************************
#  NAME
#     assigned_resource_reset_check() -- resource reset test of a resource in 
#     ASSINGED state.
#
#  SYNOPSIS
#     assigned_resource_reset_check { } 
#
#  FUNCTION
#     This test will find a resource that is assigned to GE service and is in ASSIGNED
#     state, will shutdown an Executor on the resource and will trigger a reset on it.
#
#     actions:
#        1) Find a host resource assigned to GE service
#        2) Check that resource state is ASSIGNED
#        3) Shutdown Executor on the resource
#        4) Perform "sdmadm reset" on the GE resource
#        5) Check that 
#           a) EXECD is still running on the host resource
#           b) resource state is still ASSIGNED
#           c) exist status of the command is 0
#           d) output message of the command is as expected    
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     assigned/assigned_resource_reset_setup()
#     assigned/assigned_resource_reset_cleanup()
#*******************************************************************************
proc assigned_resource_reset_check {} {
   global hedeby_config
   global CHECK_ACT_LEVEL
   global assigned_resource_reset_executor_shutdown
   global assigned_resource_reset_executor_shutdown_host

   # get some global settings
   set pref_type [get_hedeby_pref_type]
   set sys_name [get_hedeby_system_name]
   set admin_user [get_hedeby_admin_user]
   set ge_hosts [get_hedeby_default_services service_names]
   set exec_host $hedeby_config(hedeby_master_host)

   # init text array for reporting errors
   # (errors are logged at the end of the test)
   set error_text ""

   # initialize the subject of reset command
   set rst ""

   # initialize flag that carries info about executor state
   set is_executor_running 1
   

   # find a resource that is assigned to GE service and is in ASSIGNED state and 
   # is not STATIC and not AMBIGUOUS
   # 1. get resource informations
   set retval [get_resource_info $exec_host $admin_user resource_info]
   if { $retval == 0 } {
      foreach service $service_names(services) {
          ts_log_fine "searching \"$service\" for a resource in ASSIGNED state ..."        
          foreach resource $service_names(execd_hosts,$service) {                      
                set rstate $resource_info($resource,state)
                set rflags $resource_info($resource,flags)
                ts_log_fine "res: $resource, state: $rstate, flags: $rflags"
                if {[string match "$rstate" "ASSIGNED"]} {
                    if {[string match "$rflags" "{}"]} {
                        ts_log_fine "got a resource in ASSIGNED state: $resource"        
                        set rst $resource
                        break
                    }
                }                
          }
          if {[string match "$rst" ""]} {
            # still no resource in ASSINGED state, continue searching in another service
            ts_log_fine "still got no resource in ASSIGNED state and with no flags, moving to another service"
            continue
          } else {
            # got a resource in ASSIGNED state, search is over
            ts_log_fine "got proper resource, search is over"
            break
          }
      } 

       if {[string match "$rst" ""]} {
            append error_text "No resource in ASSIGNED state has been found\n"
       } else {
            # check the executor on the resource
            set compos [get_component_info $exec_host $admin_user ci]
            set exist_executor [lsearch -exact $ci(executor,host) $rst ]
            if { $exist_executor < 0} {
                ts_log_fine "there is no executor on $rst, no need to shut it down"
                set is_executor_running 0
            } else {
                # check the executor state
                set state $ci(executor,$rst,state)
                # compare the output with the expected output ...
                if {[string match "STARTED" $state]} {
                    ts_log_fine "state is STARTED, need to shutdown component!"
                    # prepare sdmadm command and start it ...
                    set sdmadm_command_line "-p $pref_type -s $sys_name sdc -c executor -h $rst"
                    set output [sdmadm_command $exec_host $admin_user $sdmadm_command_line prg_exit_state "" 0 table]
                    # check that exit state == 0 (executor was correctly shutdown
                    ts_log_fine "executor shutdown exit state: $prg_exit_state"
                    if { $prg_exit_state != 0 } {
                        append error_text "Executor on $rst was not correctly shutdown, test can not continue\n"
                    } else {
                        ts_log_fine "Executor on $rst was shutdown, test can continue"
                        set is_executor_running 0
                        set assigned_resource_reset_executor_shutdown 1
                        set assigned_resource_reset_executor_shutdown_host $rst
                    }
                } else {
                    ts_log_fine "state is not STARTED, no need to shutdown!"
                    set is_executor_running 0
                }
            }

            if { $is_executor_running == 0 } {
                # 1. switch to correct cluster
                set_current_cluster_config_nr $service_names(ts_cluster_nr,$rst)
                # 2. check that execd is still running
                if { [is_execd_alive $rst] == 1 } {
                    # execd is still running, so perform reset of the resource
                    # prepare sdmadm command and start it ...
                    set sdmadm_command_line "-p $pref_type -s $sys_name rsr -r $rst"
                    set output [sdmadm_command $exec_host $admin_user $sdmadm_command_line prg_exit_state "" 0 table]
                    # build expected output message from bundle properties file ... 
                    set expected_output [create_bundle_string "ResetResourceCommand.resource.reset" xyz]
                    ts_log_fine "expected output: $expected_output"
                    # get sdmadm output message string ...
                    set output_message [lindex $table([lindex $table(table_columns) 1],0) 0]
                    ts_log_fine "output message is: $output_message"

                    # compare the output with the expected output ...
                    if {[string match "$expected_output" $output_message]} {
                        ts_log_fine "output is matching!"
                    } else {
                        append error_text "The output message doesn't match expected output\n"
                        append error_text "Expected output: \"$expected_output\"\n"
                        append error_text "Received output: \"$output_message\"\n"
                    }

                    if { $prg_exit_state != 0 } {
                        append error_text "The exit state \"$prg_exit_state\" doesn't match the expected exit state \"0\"\n"
                    } else {
                        ts_log_fine "The exit state \"$prg_exit_state\" does match the expected exit state \"0\"\n"                    
                        # step 1: set expected resource information values   
                        set exp_resource_info($rst,state) "ASSIGNED"
                        # TODO this comparison does not work properly, do not know why (expect problem???)
                        # instead, call get_resource_info to find out the flags
                        # set exp_resource_info($rst,flags) "{}"
                        # step 2: wait for expected resource informations
                        set retval [wait_for_resource_info exp_resource_info 60 0 rst_error]

                        if { $retval == 0 } {
                            ts_log_fine "resource $rst is in expected state" 
                            # get resource informations (updated), wait some time (we know, that there is/was bug with flags that appear after some time)
                            ts_log_fine "waiting whether resource $rst gets A flag"
                            after 10000
                            unset resource_info
                            set retval_gri [get_resource_info $exec_host $admin_user resource_info]
                            if { $retval_gri == 0 } {
                                set rflags $resource_info($rst,flags)
                                if {[string match "$rflags" "{}"]} {
                                    ts_log_fine "resource $rst has correct flags"        
                                    # 1. switch to correct cluster
                                    set_current_cluster_config_nr $service_names(ts_cluster_nr,$rst)
                                    # 2. check that execd is still running
                                    if { [is_execd_alive $rst] == 1 } {
                                        ts_log_fine "execd IS running on reset resource $rst"
                                    } else {
                                        append error_text "execd IS NOT running on reset resource $rst\n"
                                    }
                                } else {
                                    append error_text "resource $rst does not have correct flags: $rflags\n"
                                }
                            } else {
                                append error_text "getting an updated resource info failed, test can not continue\n"
                            }
                        } else {
                            append error_text "resource $rst is not in expected state:\n"
                            append error_text $rst_error
                        }
                    }

                } else {
                    append error_text "Execd is not running on $rst\n"
                }
            } else {
                append error_text "Executor on $rst is still running, test can not continue\n"
            }
       }
   } else {
      append error_text "getting a resource info failed, test can not continue\n"
   }
                  
   # finally report one big error mail
   if {$error_text != ""} {
      ts_log_severe $error_text
   }
}

