#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependend parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
set check_root_access_needs    "yes"
set check_name                 "assigned_resource_reset"
set check_category             "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)       "resource reset test of ASSIGNED resource"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "assigned_resource_reset_init_level"
set check_functions            {}   
set check_highest_level        0

set check_setup_level_function "assigned_resource_reset_setup"
set check_cleanup_level_function "assigned_resource_reset_cleanup"

lappend check_functions "assigned_resource_reset_check"

# ---------------------------------------------------------------------------------
# here the tests begin ....


#****** assigned/assigned_resource_reset_init_level() ************************
#  NAME
#     assigned_resource_reset_init_level() -- init level procedure for test
#
#  SYNOPSIS
#     assigned_resource_reset_init_level { } 
#
#  FUNCTION
#     Return the supported runlevel of this test. Currently only level 0 is supported.
#
#  INPUTS
#
#  RESULT
#     0 for CHECK_ACT_LEVEL 0
#    -1 for all other levels
#
#*******************************************************************************
proc assigned_resource_reset_init_level {} {
  global CHECK_ACT_LEVEL

  if { $CHECK_ACT_LEVEL == 0 } {
     return 0
  }
  
  return -1
}

#****** assigned/assigned_resource_reset_setup() *****************************
#  NAME
#     assigned_resource_reset_setup() -- prepare test setup
#
#  SYNOPSIS
#     assigned_resource_reset_setup { } 
#
#  FUNCTION
#
#     This method sets up the test for the runlevel. It performs the following
#     actions:
#
#     o Store the original cluster number in the context (the test works with additional
#       cluster config, cleanup must reset the cluster number).
#     o Determine a GE service and an assigned resource which will be used for the test.
#
#  INPUTS
#     no input values
#
#  RESULT
#     no return values
#
#*******************************************************************************
proc assigned_resource_reset_setup {} {
   global assigned_resource_reset_ctx this

   set this(cleanup_actions) {}
   set this(cc_cnr) [get_current_cluster_config_nr]

   # get some global settings
   get_hedeby_default_services service_names

   set this(service) [pick_random $service_names(services)]
   set this(res)     [pick_random $service_names(moveable_execds,$this(service))]

   # To choose always the same service and resource, uncomment the following
   # two lines (handy for testing)   
   # set this(service) [lindex $service_names(services) 0]
   # set this(res)     [lindex $service_names(moveable_execds,$this(service)) 0]

   set this(res_cluster_nr) $service_names(ts_cluster_nr,$this(res))
}

#****** assigned/assigned_resource_reset_cleanup() ***************************
#  NAME
#     assigned_resource_reset_cleanup() -- reset the cluster nr and do hedeby reset 
#
#  SYNOPSIS
#     assigned_resource_reset_cleanup { } 
#
#  FUNCTION
#
#      This method performs according to the cleanup actions defined in
#      assigned_resource_reset_ctx(cleanup_actions) the cleanup of this test.
#      The following cleanup actions are known:
#
#      remove_resource --  issue 412 occurred and the reseted resource became ambiguous
#                          The action removes the resource from the service where
#                          it has been accidentally added.
#      start_executor  --  Startup the executor running on the tested resource
#
#  INPUTS
#     no input values
#
#  RESULT
#     no return values
#
#*******************************************************************************
proc assigned_resource_reset_cleanup {} {
   global assigned_resource_reset_ctx this

   if {[lsearch $this(cleanup_actions) "remove_resource"] >= 0} {
       sdmadm_command_opt "rr -r $this(res) -s $this(accidental_resource_owner)"
   }

   if {[lsearch $this(cleanup_actions) "start_executor"] >= 0} {
      sdmadm_command_opt "suc -c executor -h $this(res)"

      set ci(executor,$this(res),state) "STARTED"
      wait_for_component_info_opt ci

   }

   if {[llength $this(cleanup_actions)] > 0} {
      # Just to be sure that the flags are correct
      set exp_resource_info($this(res),state)   "ASSIGNED"
      set exp_resource_info($this(res),service) $this(service)
      set exp_resource_info($this(res),flags)   "{}"
      wait_for_resource_info_opt exp_resource_info
   }

   # reset saved active cluster configuration nr
   set_current_cluster_config_nr $this(cc_cnr)
}

#****** assigned/assigned_resource_reset_check() *****************************
#  NAME
#     assigned_resource_reset_check() -- resource reset test of a resource in 
#     ASSINGED state.
#
#  SYNOPSIS
#     assigned_resource_reset_check { } 
#
#  FUNCTION
#     This test will find a resource that is assigned to GE service and is in ASSIGNED
#     state, will shutdown an Executor on the resource and will trigger a reset on it.
#
#     actions:
#
#         Step 1: Shutting down executor on host '$this(res)'
#         Step 2: Reseting resource '$this(res)'
#         Step 3: Check that resource '$this(res)' goes into ASSIGNED state
#         Step 4: Check stat execd is still running
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     assigned/assigned_resource_reset_setup()
#     assigned/assigned_resource_reset_cleanup()
#*******************************************************************************
proc assigned_resource_reset_check {} {
   global assigned_resource_reset_ctx this

   # ---------------------------------------------------------------------------------------------
   ts_log_heading "Step 1: Shutting down executor on host '$this(res)'"
   # ---------------------------------------------------------------------------------------------
   sdmadm_command_opt "sdc -c executor -h $this(res)"
   if { $prg_exit_state != 0 } {
      ts_log_severe "Could not shutdown executor on host '$this(res)', test can not continue"
      return
   }
   lappend this(cleanup_actions) "start_executor"

   # ---------------------------------------------------------------------------------------------
   ts_log_heading "Step 2: Reseting resource '$this(res)'"
   # ---------------------------------------------------------------------------------------------
   set opt(table_output) table
   sdmadm_command_opt "rsr -r $this(res)" opt
   unset opt

   #sdm <=1.0u3 used this bundle string
   set bundle_str "ResetResourceCommand.resource.reset"
   if { [exists_bundle_string rm.rs.triggered] } {
      #Since 1.0u5
      set bundle_str "rm.rs.triggered"
   }
   
   set expected_output [create_bundle_string $bundle_str]
   set output_message [lindex $table([lindex $table(table_columns) 1],0) 0]

   # compare the output with the expected output ...
   if {$expected_output != $output_message} {
      set    msg "Reset of resource '$this(res)' did not work, because 'sdmadm rsr' produced unexpected output:\n"
      append msg "Expected output: \"$expected_output\"\n"
      append msg "Received output: \"$output_message\"\n"
      ts_log_severe $msg
      return
   }

   # ---------------------------------------------------------------------------------------------
   ts_log_heading "Step 3: Check that resource '$this(res)' goes into ASSIGNED state"
   # ---------------------------------------------------------------------------------------------
   # With in the next step we check that the resource goes into ASSIGNED state and
   # that the resource reset did not produce an ambiguous resource
   set exp_resource_info($this(res),state) "ASSIGNED"
   set opt(res_info) res_info
   set opt(expect_no_ambiguous_resources) 1

   set retval [wait_for_resource_info_opt exp_resource_info opt] 
   unset exp_resource_info
   unset opt

   if { $retval != 0 } {
      # it can be that we ran again into issue 471
      # perform additional check 

      if { [lsearch $res_info($this(res),flags) "A"] >= 0 } {
         set    msg "It seems that we ran again into issue 412!!\n"
         append msg "===========================================\n\n"
         append msg "Service '$this(service)' rejected assigned resource '$this(res)' with a reset\n"
         append msg "because the executor on this service is not active\n"
         append msg "This is not the correct behaviour, the resource should simply stay at the service\n" 
         ts_log_severe $msg

         # Look for the new owner of the service, wait_for_resource info reports all owners in the service
         # array element
         set accidental_resource_owner ""
         foreach service $res_info($this(res),service) {
             if { $service != $this(service) } {
                set accidental_resource_owner $service
                break
             }
         }
         if {$accidental_resource_owner != "" } {
            ts_log_fine "Resource '$this(res) moved due to issue 412 accidentally to service '$service'"
            lappend this(cleanup_actions) "remove_resource"
            set this(accidental_resource_owner) $accidental_resource_owner
         } else {
            set    msg "Strange, resource '$this(res)' is marked as ambiguous, however\n"
            append msg "I can not find the second onwer of the resource"
            ts_log_severe $msg
         }
         return 
      }
   }

   # ---------------------------------------------------------------------------------------------
   ts_log_heading "Step 4: Check that execd is still running"
   # ---------------------------------------------------------------------------------------------
   # 1. switch to correct cluster
   set_current_cluster_config_nr $this(res_cluster_nr)

   # 2. check that execd is still running
   if { [is_execd_alive $this(res)] != 1 } {
       ts_log_severe "execd IS NOT running on reset resource '$this(res)'"
   } else {
       ts_log_fine "execd of resource '$this(res)' is active"
   }
}

