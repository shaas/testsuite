#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
set check_root_access_needs    "no"
set check_name                 "ge_adapter_restart_test"
set check_category             "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)       "ge_adapter restart test"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "ge_adapter_restart_test_init_level"
set check_functions            {}   
set check_highest_level        0

set check_setup_function "ge_adapter_restart_test_setup"
set check_cleanup_function "ge_adapter_restart_test_cleanup"

lappend check_functions "ge_adapter_restart_test_check"

# ---------------------------------------------------------------------------------
# here the tests begin ....
global ge_adapter_restart_test_current_cluster_config

proc ge_adapter_restart_test_init_level {} {
  global CHECK_ACT_LEVEL

  if { $CHECK_ACT_LEVEL == 0 } {
     return 0
  }
  return -1
}

proc ge_adapter_restart_test_setup {} {
   global ge_adapter_restart_test_current_cluster_config
   set ge_adapter_restart_test_current_cluster_config [get_current_cluster_config_nr]
}

proc ge_adapter_restart_test_cleanup {} {
   global ge_adapter_restart_test_current_cluster_config

   # reset saved active cluster configuration nr
   set_current_cluster_config_nr $ge_adapter_restart_test_current_cluster_config
}

#****** ge_adapter/ge_adapter_restart_test_check() *****************************
#  NAME
#     ge_adapter_restart_test_check() -- ge_adapter startup/stop test
#
#  SYNOPSIS
#     ge_adapter_restart_test_check { } 
#
#  FUNCTION
#     This test is doing following in a loop:
#     (Number of repeats is equal to variable tries).
#     1. Check resources of ge_adapter    
#     2. Stop the ge_adapter components and check if components is in stopped state
#     3. Start up ge_adapter components and check if components is in started state
#     4. Check whether all resources are still available
#     
#     After the loop check that the event counts match the number of triggered 
#     actions in the history from Reporter.
#   
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return value
#
#  SEE ALSO
#     util/sdmadm_command()
#*******************************************************************************
proc ge_adapter_restart_test_check {} {
   global hedeby_config
   set error_text ""
   set tries 4

   set ge_qmaster_hosts [get_hedeby_default_services service_names]

   # setup expectations and get data ...
   set master_host $hedeby_config(hedeby_master_host)
   set admin_user [get_hedeby_admin_user]
   foreach host $ge_qmaster_hosts {      
      set ge_adapters_started_expect($service_names(service,$host),$host,state) "STARTED"
      set ge_adapters_stopped_expect($service_names(service,$host),$host,state) "STOPPED"
   }

   set resources [sdmadm_command $master_host $admin_user "-p [get_hedeby_pref_type] -s [get_hedeby_system_name] sr" prg_exit_state ""  ]
 
   # get start time of test on testsuite host and remove 1 minute to be sure
   # not to loose an event because of time differences between testsuite host
   # and the hedeby admin host
   
   set unix_time_stamp [clock seconds]
   incr unix_time_stamp -60
   set time [clock format $unix_time_stamp -format {%H:%M}]

   # Here we check if there are already some old events reported which must be
   # taken into account
   foreach host $ge_qmaster_hosts {
      sdmadm_command $master_host $admin_user "-p [get_hedeby_pref_type] -s [get_hedeby_system_name] shist -s $service_names(service,$host) -sd $time -t SERVICE_SHUTDOWN" prg_exit_state "" 1 table
      set start_shutdown_nr($service_names(service,$host)) $table(table_lines)
      if {$table(table_lines)} {
         ts_log_fine "found SERVICE_SHUTDOWN event for service $service_names(service,$host): $table(table_lines) times at test start"
      }
      sdmadm_command $master_host $admin_user "-p [get_hedeby_pref_type] -s [get_hedeby_system_name] shist -s $service_names(service,$host) -sd $time -t SERVICE_RUNNING" prg_exit_state "" 1 table
      set start_running_nr($service_names(service,$host)) $table(table_lines)
      if {$table(table_lines)} {
         ts_log_fine "found SERVICE_RUNNING event for service $service_names(service,$host): $table(table_lines) times at test start"
      }
   }

   #shutdown and startup of the ge_adapters 
   for {set i 0} {$i < $tries} {incr i} {
      foreach host $ge_qmaster_hosts {
         sdmadm_command $master_host $admin_user "-p [get_hedeby_pref_type] -s [get_hedeby_system_name] sdc -c $service_names(service,$host) -h $host" prg_exit_state "" 
      }
      
      # check if ge_adapter components are shutdown
      set ret [wait_for_component_info ge_adapters_stopped_expect]
      if {$ret != 0} {
        append error_text "The shutdown ge_adapter components state is different than expected.\n"
      }
      
      foreach host $ge_qmaster_hosts {
          sdmadm_command $master_host $admin_user "-p [get_hedeby_pref_type] -s [get_hedeby_system_name] suc -c $service_names(service,$host) -h $host" prg_exit_state "" 
          set ret $prg_exit_state
          if {$ret != 0} {
            append error_text "The ge_adapter components start up was not successful.\n"
          }
      }

      # check if ge_adapter components are running
      set ret [wait_for_component_info ge_adapter_started_expect]
      if {$ret != 0} {
        append error_text "The running ge_adapter components state is different than expected.\n"
      }

      #check if we have the the same resources on board
      set new_resources [sdmadm_command $master_host $admin_user "-p [get_hedeby_pref_type] -s [get_hedeby_system_name] sr" prg_exit_state ""  ]
      if {$resources != $new_resources} {
        append error_text "The resource list for ge_adapters is different than expected.\n"
      }

      if {$error_text != ""} {
         break
      }
   }

   # Now check the nr of events
   foreach host $ge_qmaster_hosts {
      sdmadm_command $master_host $admin_user "-p [get_hedeby_pref_type] -s [get_hedeby_system_name] shist -s $service_names(service,$host) -sd $time -t SERVICE_SHUTDOWN" prg_exit_state "" 1 table
      set end_shutdown_nr($service_names(service,$host)) $table(table_lines)
      sdmadm_command $master_host $admin_user "-p [get_hedeby_pref_type] -s [get_hedeby_system_name] shist -s $service_names(service,$host) -sd $time -t SERVICE_RUNNING" prg_exit_state "" 1 table
      set end_running_nr($service_names(service,$host)) $table(table_lines)

      set new_event_logs [expr ( $end_shutdown_nr($service_names(service,$host)) - $start_shutdown_nr($service_names(service,$host)) )]
      if {$new_event_logs != $tries} {
         append error_text "Expected $tries SERVICE_SHUTDOWN events for service $service_names(service,$host), but got $new_event_logs"
      }
      set new_event_logs [expr ( $end_running_nr($service_names(service,$host)) - $start_running_nr($service_names(service,$host)) )]
      if {$new_event_logs != $tries} {
         append error_text "Expected $tries SERVICE_RUNNING events for service $service_names(service,$host), but got $new_event_logs"
      }
   }

   # finally report one big error mail
   if {$error_text != ""} {
      ts_log_severe $error_text
   }
}

