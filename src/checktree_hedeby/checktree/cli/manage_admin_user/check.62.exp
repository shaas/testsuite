#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
# ---START OF TEST INFO SECTION-------------------------------------------------------------------------------
# "no" - we don't need root acess / "yes" - we need root access:
set check_root_access_needs    "yes"              

# name of the test (best practice: use the name of the test directory)
set check_name                 "manage_admin_user"

# specifiy the test categories
# (VERIFIED if the test is QA inspected)
# other possible categories: COMPATIBILITY CSP INSTALL L10N MODULE PERFORMANCE SYSTEM VERIFIED
set check_category             "SYSTEM VERIFIED" 

# define the highest check level
set check_highest_level        0

# a sort check description for each runlevel:
# (runlevel 0 is mandatory)
set check_description(0)       "check all sdmadm show_status options" ;# runlevel 0
# set check_description(1)       "SOME OTHER DESCRIPTION"  ;# runlevel 1

# specify check dependencies
# (name all tests which have to run sucessfull before this test can run)
set check_needs                "hedeby_install"                  

# The name of the init level procedure for this test. The procedure is defined
# in the test file. 
set check_init_level_procedure "manage_admin_user_init_level"

# define tests setup and cleanup function. The functions are called for each
# runlevel. Before testsuite is starting with calling all check_functions
# the setup function is called. After finishing all check_functions the 
# cleanup function is called.
#
# The aim of the setup/cleanup functions is that the test should restore
# all modifications, even when the test failes completely.
set check_setup_function "manage_admin_user_setup"
set check_cleanup_function "manage_admin_user_cleanup"


# The check_functions array tells the testsuite which check functions should
# be called (and in which order)
# All check_functions should be defined at least in a file (*.tcl) in the
# check directory.
set check_functions            ""
lappend check_functions "manage_admin_user_check"


# ---END OF TEST INFO SECTION-------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------
# here the tests begin ....
global manage_admin_user_ctx

# (the init level procedure defines which runlevels are supported)
# short  (   0 min - 15 min / run level   0 -  99 )"
# medium (  16 min -  1 h   / run level 100 - 199 )"
# long   (   1 h   -  4 h   / run level 200 - 299 )"
# day    ( > 4 h   - 24 h   / run level 300 - 399 )"
# week   ( >24 h            / run level 400 - 499 )"
#****** check.62/manage_admin_user_init_level() ********************************
#  NAME
#     manage_admin_user_init_level() -- init level method
#
#  SYNOPSIS
#     manage_admin_user_init_level { } 
#
#*******************************************************************************
proc manage_admin_user_init_level {} {
  global CHECK_ACT_LEVEL

  # this test currently supports only runlevel "0"
  if { $CHECK_ACT_LEVEL == 0 } {
     return 0
  }
  return -1
}

#****** check.62/manage_admin_user_setup() *************************************
#  NAME
#     manage_admin_user_setup() -- setup method for this test 
#
#  SYNOPSIS
#     manage_admin_user_setup { } 
#
#  FUNCTION
#
#   Intialzes the context of the test
#
#*******************************************************************************
proc manage_admin_user_setup {} {
   global hedeby_config
   upvar #0 manage_admin_user_ctx this

   set this(master_host) $hedeby_config(hedeby_master_host)
   set this(admin_user) [get_hedeby_admin_user]
   set this(cleanup_actions) {}
}

#****** check.62/manage_admin_user_cleanup() ***********************************
#  NAME
#     manage_admin_user_cleanup() --
#
#  SYNOPSIS
#     manage_admin_user_cleanup { } 
#
#  FUNCTION
#
#     Removes the user root from the admin user list if this(cleanup_actions) contains
#     the string "add_root"
#
#*******************************************************************************
proc manage_admin_user_cleanup {} {
   upvar #0 manage_admin_user_ctx this

   if {[lsearch -exact $this(cleanup_actions) "add_root"] >= 0} {
      if { [add_user_to_admin_list $this(master_host) $this(admin_user) "root"] == 0} {
         restart_master_host_to_ensure_that_role_cache_is_cleared
      } else {
         reset_hedeby 1
      }
   }
}


#****** check.62/manage_admin_user_check() *************************************
#  NAME
#     manage_admin_user_check() --
#
#  SYNOPSIS
#     manage_admin_user_check { } 
#
#  FUNCTION
#
#     This test performs the following steps:
#
#     1. Check that user root is on the admin user list
#        (if not the test can not be executed)
#     2. Remove user root from the admin user list
#     3. Check that a sdmadm sr as root fails with exit state 2
#        and with error message "permission denied"
#     4. Add user root to the admin user list
#     5. Check that a sdmam sr as root works
#
#*******************************************************************************
proc manage_admin_user_check {} {
   upvar #0 manage_admin_user_ctx this

   # ----------------------------------------------------------------------------
   ts_log_heading "Check that user root is on the admin user list" 
   # ----------------------------------------------------------------------------
   set user_list {}
   if {[get_admin_user_list $this(master_host) $this(admin_user) user_list] != 0} {
      ts_log_severe "Could not get the admin user list"
      return
   }

   if { [lsearch $user_list "root"] < 0} {
      set    msg "Can not run the manage_admin_user test because user root is not "
      append msg "on the admin user list => Skip this test"
      ts_log_severe $msg
      return
   }

   
   # ----------------------------------------------------------------------------
   ts_log_heading "Removing user root from the admin user list" 
   # ----------------------------------------------------------------------------
   if { [remove_user_from_admin_list $this(master_host) $this(admin_user) "root"] != 0} {
      ts_log_severe "Could not remove user root from the admin user list"
      return
   }

   set user_list {}
   if {[get_admin_user_list $this(master_host) $this(admin_user) user_list] != 0} {
      ts_log_severe "Could not get the admin user list"
      lappend this(cleanup_actions) "add_root"
      return
   }

   if { [lsearch $user_list "root"] >= 0} {
      ts_log_server "User root has not been removed from the admin user list"
      return
   }
   lappend this(cleanup_actions) "add_root"
   
   # ----------------------------------------------------------------------------
   ts_log_heading "Restarting Hedeby master to ensure that role cached timed out" 
   # ----------------------------------------------------------------------------
   restart_master_host_to_ensure_that_role_cache_is_cleared

   # ----------------------------------------------------------------------------
   ts_log_heading "Invoke an sdmadm sr command as user root => must fail with permission denied" 
   # ----------------------------------------------------------------------------
   set opts(user)        "root"
   set opts(raise_error) "0" 
   set output [sdmadm_command_opt "sr" opts]
   unset opts
   set error_msg [create_bundle_string "JAASJMXAuthenticator.permissionDenied"]

   if { [string first $error_msg $output] < 0 } {
      set msg    "Executed an 'sdmadm sr' as user root, but user was not on the admin user list.\n"
      append msg "Expected error message '$error_msg' was not printed.\n"
      append msg "Got the following output:\n"
      append msg "$output\n"
      ts_log_severe $msg
      return
   }

   if { $prg_exit_state == 0 } {
      set msg    "Severe security problem!!!!!\n"
      append msg "============================\n"
      append msg "\n"
      append msg "User root is not on the admin user list, however an sdmadm sr as user root\n"
      append msg "did not produce an error\n"
      ts_log_severe $msg
      return
   }


   # ----------------------------------------------------------------------------
   ts_log_heading "Adding user root from to the admin user list" 
   # ----------------------------------------------------------------------------
   if { [add_user_to_admin_list $this(master_host) $this(admin_user) "root"] != 0} {
      ts_log_severe "Could not add user root to the admin_user list"
      return
   }

   set user_list {}
   if {[get_admin_user_list $this(master_host) $this(admin_user) user_list] != 0} {
      ts_log_severe "Could not get tehe admin user list"
      return
   }

   if { [lsearch $user_list "root"] < 0} {
      ts_log_severe "User root has not been been added to the admin user list"
      return
   }
   set idx [lsearch -exact $this(cleanup_actions) "add_root"]
   set this(cleanup_actions) [lreplace $this(cleanup_actions) $idx $idx]

   # ----------------------------------------------------------------------------
   ts_log_heading "Restarting Hedeby master to ensure that role cached timed out" 
   # ----------------------------------------------------------------------------
   restart_master_host_to_ensure_that_role_cache_is_cleared
  
   # ----------------------------------------------------------------------------
   ts_log_heading "Ensure that user root can communicate with CS after adding to admin user list" 
   # ----------------------------------------------------------------------------
   set opts(user)        "root"
   set output [sdmadm_command_opt "sr" opts]
   unset opts
}

#****** check.62/restart_master_host_to_ensure_that_role_cache_is_cleared() ******
#  NAME
#     restart_master_host_to_ensure_that_role_cache_is_cleared() -- 
#
#  SYNOPSIS
#     restart_master_host_to_ensure_that_role_cache_is_cleared { } 
#
#  FUNCTION
#
#     This method restarts the hedeby master host to ensure that the role cache
#     of the jvms is cleared
#
#*******************************************************************************
proc restart_master_host_to_ensure_that_role_cache_is_cleared {} {
   upvar #0 manage_admin_user_ctx this

   set user [get_hedeby_startup_user]
 
   # Store the current resource info, we wait after the restart
   # until all resources have reached again the original state 
   set opt(res_list) res_list
   get_resource_info_opt ri
   # Shutdown
   ts_log_fine "shutdown hedeby master host ..."
   shutdown_hedeby_hosts "master" $this(master_host) $user

   ts_log_fine "startup hedeby master host ..."
   startup_hedeby_hosts "master" $this(master_host) $user
  
   foreach res $res_list {
       set exp_ri($res,state) $ri($res,state)
       set exp_ri($res,flags) $ri($res,flags)
   }

   wait_for_resource_info exp_ri
}



