#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
# ---START OF TEST INFO SECTION-------------------------------------------------------------------------------
# "no" - we don't need root acess / "yes" - we need root access:
set check_root_access_needs    "yes"              

# name of the test (best practice: use the name of the test directory)
set check_name                 "manage_admin_user"

# specifiy the test categories
# (VERIFIED if the test is QA inspected)
# other possible categories: COMPATIBILITY CSP INSTALL L10N MODULE PERFORMANCE SYSTEM VERIFIED
set check_category             "SYSTEM VERIFIED" 

# define the highest check level
set check_highest_level        0

# a sort check description for each runlevel:
# (runlevel 0 is mandatory)
set check_description(0)       "check all sdmadm show_status options" ;# runlevel 0
# set check_description(1)       "SOME OTHER DESCRIPTION"  ;# runlevel 1

# specify check dependencies
# (name all tests which have to run sucessfull before this test can run)
set check_needs                "hedeby_install"                  

# The name of the init level procedure for this test. The procedure is defined
# in the test file. 
set check_init_level_procedure "manage_admin_user_init_level"

# define tests setup and cleanup function. The functions are called for each
# runlevel. Before testsuite is starting with calling all check_functions
# the setup function is called. After finishing all check_functions the 
# cleanup function is called.
#
# The aim of the setup/cleanup functions is that the test should restore
# all modifications, even when the test failes completely.
set check_setup_function "manage_admin_user_setup"
set check_cleanup_function "manage_admin_user_cleanup"


# The check_functions array tells the testsuite which check functions should
# be called (and in which order)
# All check_functions should be defined at least in a file (*.tcl) in the
# check directory.
set check_functions            ""
lappend check_functions "manage_admin_user_check"


# ---END OF TEST INFO SECTION-------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------
# here the tests begin ....
global manage_admin_user_ctx

# (the init level procedure defines which runlevels are supported)
# short  (   0 min - 15 min / run level   0 -  99 )"
# medium (  16 min -  1 h   / run level 100 - 199 )"
# long   (   1 h   -  4 h   / run level 200 - 299 )"
# day    ( > 4 h   - 24 h   / run level 300 - 399 )"
# week   ( >24 h            / run level 400 - 499 )"
proc manage_admin_user_init_level {} {
  global CHECK_ACT_LEVEL

  # this test currently supports only runlevel "0"
  if { $CHECK_ACT_LEVEL == 0 } {
     return 0
  }
  return -1
}

# the setup function for this test is storing the current
# cluster config nr in a global variable.
proc manage_admin_user_setup {} {
   global hedeby_config
   upvar #0 manage_admin_user_ctx this

   set this(cc_cnr) [get_current_cluster_config_nr]
   set this(master_host) $hedeby_config(hedeby_master_host)
   set this(admin_user) [get_hedeby_admin_user]
}

# the cleanup function for this test will restore the
# current cluster config nr from the global variable set 
# be the setup function.
proc manage_admin_user_cleanup {} {
   upvar #0 manage_admin_user_ctx this

   ts_log_heading "Check that user root has been removed from admin user list ..."
   get_admin_user_list $this(master_host) $this(admin_user) user_list
   if { [lsearch $user_list "root"] >= 0 } {
      ts_log_fine "user root is still in admin user list! Removing ..."
      remove_user_from_admin_list $this(master_host) $this(admin_user) "root"
   } else {
      ts_log_fine "user root is not in admin user list! - OK"
   }
   set_current_cluster_config_nr $this(cc_cnr)
}


# The test will call the sdmadm show_status command for every 
# hedeby managed host and on the master host.
# If the output does not show all components in the "started"
# status the test will fail.
proc manage_admin_user_check {} {
   upvar #0 manage_admin_user_ctx this

   # TODO: Add support for "user" preference mode!
   #       root user must add bootstrap configuration in his home directory before running this test.
   #       => Cleanup and Setupfunction should add/remove the bootstrap configuration
   #       => If root password is not available (noroot GE testsuite mode) this test cannot run
   if { [get_hedeby_pref_type] == "user" } {
      ts_log_config "Test 'manage_admin_user' is not supported if Hedeby is installed in user mode!" 
      return
   }

   # setup master host expectations ...
   
   # Add root as admin user

   if { [add_user_to_admin_list $this(master_host) $this(admin_user) "root"] != 0 } {
      return
   }
   
   set user_list {}
   if {[get_admin_user_list $this(master_host) $this(admin_user) user_list] != 0} {
      return
   }
   
   if { [lsearch $user_list "root"] < 0} {
      ts_log_severe "User root has not been added to admin user list"
      return
   }

   # if we have the root password we can now try to execute a sdmadm command as root
   # we really need the root password. If ssh access is configured we can also not
   # test it
   if { [have_ssh_access] == 0 && [have_root_passwd] == 0} {
        restart_master_host_to_ensure_that_role_cache_is_cleared

        # now start scs interactive ...
        set tasks(username) "root"
        set tasks(password) "ROOTPW"
        set opt(interactive_tasks) tasks
        sdmadm_command_opt "-ppw sc -h $this(master_host)" opt
        if { $prg_exit_state != 0 } {
           ts_log_severe "sdmadm as user root with prompt password option failed!"
           return
        }
   } else {
      ts_log_info "Skip execution sdm_adm command as user root, have no root password"
   }
   
   remove_user_from_admin_list  $this(master_host) $this(admin_user) "root"
   restart_master_host_to_ensure_that_role_cache_is_cleared
}

proc restart_master_host_to_ensure_that_role_cache_is_cleared {} {
   upvar #0 manage_admin_user_ctx this

   set user [get_hedeby_startup_user]
 
   # Store the current resource info, we wait after the restart
   # until all resources have reached again the original state 
   set opt(res_list) res_list
   get_resource_info_opt ri
   # Shutdown
   ts_log_fine "shutdown hedeby master host ..."
   shutdown_hedeby_hosts "master" $this(master_host) $user

   ts_log_fine "startup hedeby master host ..."
   startup_hedeby_hosts "master" $this(master_host) $user
  
   foreach res $res_list {
       set exp_ri($res,state) $ri($res,state)
       set exp_ri($res,flags) $ri($res,flags)
   }

   wait_for_resource_info exp_ri
}



