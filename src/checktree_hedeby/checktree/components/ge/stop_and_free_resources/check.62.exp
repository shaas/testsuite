#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
set check_root_access_needs    "yes"
set check_name                 "ge_stop_and_free_resources"
set check_category             "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)       "tests free_resources flag of the stop service method"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "ge_stop_and_free_resources_init_level"
set check_functions            {}   
set check_highest_level        0

set check_setup_level_function "ge_stop_and_free_resources_setup"
set check_cleanup_level_function "ge_stop_and_free_resources_cleanup"

lappend check_functions "ge_stop_and_free_resources_ge_service_check"

# ---------------------------------------------------------------------------------
# here the tests begin ....

#****** stop_and_free_resources/ge_stop_and_free_resources_init_level() ************************
#  NAME
#     ge_stop_and_free_resources_init_level() -- init level procedure for test
#
#  SYNOPSIS
#     ge_stop_and_free_resources_resources_init_level { } 
#
#  FUNCTION
#     Return the supported runlevel of this test. Currently only level 0
#     is supported.
#
#  INPUTS
#
#  RESULT
#     0 for CHECK_ACT_LEVEL 0
#    -1 for all other levels
#
#*******************************************************************************
proc ge_stop_and_free_resources_init_level {} {
  global CHECK_ACT_LEVEL

  if { $CHECK_ACT_LEVEL == 0 } {
     return 0
  }
  return -1
}

#****** stop_and_free_resources/ge_stop_and_free_resources_setup() *****************************
#  NAME
#     ge_stop_and_free_resources_setup() -- prepare test setup
#
#  SYNOPSIS
#     ge_stop_and_free_resources_setup { } 
#
#  FUNCTION
#
#  INPUTS
#     no input values
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     stop_and_free_resources/ge_stop_and_free_resources_cleanup()
#*******************************************************************************
global ge_stop_and_free_resources_init_level_do_reset
proc ge_stop_and_free_resources_setup {} {
   global ge_stop_and_free_resources_init_level_do_reset 
   set ge_stop_and_free_resources_init_level_do_reset 1
}

#****** stop_and_free_resources/ge_stop_and_free_resources_cleanup() ***************************
#  NAME
#     ge_stop_and_free_resources_cleanup() -- ??? 
#
#  SYNOPSIS
#     ge_stop_and_free_resources_cleanup { } 
#
#  FUNCTION
#     The hedeby reset is don by reset_hedeby() which will move all resources
#     back to their original configured service.
#
#  INPUTS
#     no input values
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     stop_and_free_resources/ge_stop_and_free_resources_setup()
#*******************************************************************************
proc ge_stop_and_free_resources_cleanup {} {
   global ge_stop_and_free_resources_init_level_do_reset 
   if {$ge_stop_and_free_resources_init_level_do_reset} {
      # perform hedeby reset
      reset_hedeby 1
   }
}

#****** stop_and_free_resources/ge_stop_and_free_resources_ge_service_check() *****************************
#  NAME
#     ge_stop_and_free_resources_ge_service_check() -- test the stop service with free resources flag
#                                         for GE services
#
#  SYNOPSIS
#     ge_stop_and_free_resources_ge_service_check { } 
#
#  FUNCTION
#     This test checks whether the stop action with -fr option of the ge-adapter 
#     is working
#
#     actions:
#        Step 1: Stop all ge services with the freeResource flag
#        Step 2: Wait for all ge services that state is UNKNOWN
#        Step 3: Check that all nonstatic resource are moved to spare_pool
#        Step 4: Start all ge services
#        Step 5: Check that the static resources are assigned to the ge services
#        Step 6: Move all nonstatic resource back to the ge services
#        Step 7: Check that the nonstatic resource are back at the ge services
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#
#  SEE ALSO
#     stop_and_free_resources/ge_stop_and_free_resources_setup()
#     stop_and_free_resources/ge_stop_and_free_resources_cleanup()
#*******************************************************************************
proc ge_stop_and_free_resources_ge_service_check {} {
   global hedeby_config
   global ge_stop_and_free_resources_init_level_do_reset 

   # get some global settings
   set pref_type [get_hedeby_pref_type]
   set sys_name [get_hedeby_system_name]
   set admin_user [get_hedeby_admin_user]
   get_hedeby_default_services service_names
   
   # init text array for reporting errors
   # (errors are logged at the end of the test)
   set error_text ""

   set mvr_list {}
   set service_host_list {}
   
   # ---------------------------------------------------------------------------
   # Step 1: Stop all ge services with the freeResource flag
   # ---------------------------------------------------------------------------
   foreach service $service_names(services) {
      set host $service_names(master_host,$service)
      set task_info($host,expected_output) ""
      set task_info($host,sdmadm_command) "-p $pref_type -s $sys_name sds -s $service -fr"
      lappend service_host_list $host
      
      # Store all moveable resources in mvr_list
      # We will check later that all moveable resource are assigned to
      # spare_pool
      foreach res $service_names(moveable_execds,$service) {
         if {[lsearch -exact $mvr_list $res] < 0} {
            lappend mvr_list $res
         }
      }
   }
   set par_error [start_parallel_sdmadm_command service_host_list [get_hedeby_admin_user] task_info]
   if {$par_error != ""} {
      append error_text $par_error
   }
   unset task_info


   # ---------------------------------------------------------------------------
   # Step 2: Wait that all services have service state UNKNOWN
   # ---------------------------------------------------------------------------
   foreach service $service_names(services) {
      ts_log_fine "Expecting service $service cstate=STARTED, sstate=UNKNOWN"
      set exp_service_info($service,cstate) "STARTED"
      set exp_service_info($service,sstate) "UNKNOWN"
   }
   set retval [wait_for_service_info exp_service_info 120 0 service_state_error]
   if { $retval != 0} {
      # append wrong service state info to error output
      append error_text $service_state_error
   }
   unset exp_service_info

   # ---------------------------------------------------------------------------
   # Step 3: Check that all nonstatic resource are moved to spare_pool
   # ---------------------------------------------------------------------------
   foreach res $mvr_list {
      set exp_resource_info($res,service) "spare_pool"
      set exp_resource_info($res,flags) "{}"
      set exp_resource_info($res,state) "ASSIGNED"
   }
   set retval [wait_for_resource_info exp_resource_info 120 0 mvr_error]
   if { $retval != 0} {
      # append missing resources info to error output
      append error_text $mvr_error
   }
   unset exp_resource_info
   

   # ---------------------------------------------------------------------------
   # Step 4: Start all ge services
   # ---------------------------------------------------------------------------
   foreach service $service_names(services) {
      set host $service_names(master_host,$service)
      set task_info($host,expected_output) ""
      set task_info($host,sdmadm_command) "-p $pref_type -s $sys_name sus -s $service"
   }
   set par_error [start_parallel_sdmadm_command service_host_list [get_hedeby_admin_user] task_info]
   if {$par_error != ""} {
      append error_text $par_error
   }
   unset task_info
   
   # ---------------------------------------------------------------------------
   # Step 5: Check that the static resources are assigned to the ge services
   # ---------------------------------------------------------------------------
   foreach service $service_names(services) {
      set exp_resource_info($service_names(master_host,$service),service) "$service" 
      set exp_resource_info($service_names(master_host,$service),flags) "S"
      set exp_resource_info($service_names(master_host,$service),state) "ASSIGNED"
   }
   
   set retval [wait_for_resource_info exp_resource_info 120 0 mvr_error]
   if { $retval != 0} {
      append error_text $mvr_error
   }
   unset exp_resource_info
   
   # ---------------------------------------------------------------------------
   # Step 6: Move all nonstatic resource back to the ge services
   # ---------------------------------------------------------------------------
   foreach service $service_names(services) {
      set res_ids ""
      foreach res $service_names(moveable_execds,$service) {
         if { $res_ids == "" } {
            set res_ids $res
         } else {
            append res_ids ",$res"
         }
         set exp_resource_info($res,service) $service
         set exp_resource_info($res,flags) "{}"
         set exp_resource_info($res,state) "ASSIGNED"
      }
      set task_info($service_names(master_host,$service),expected_output) ""
      set task_info($service_names(master_host,$service),sdmadm_command) "-p $pref_type -s $sys_name mvr -r $res_ids -s $service"
   }
   set par_error [start_parallel_sdmadm_command service_host_list [get_hedeby_admin_user] task_info]
   if {$par_error != ""} {
      append error_text $par_error
   }
   unset task_info
   
   # ---------------------------------------------------------------------------
   # Step 7: Check that the nonstatic resource are back at the ge services
   # ---------------------------------------------------------------------------
   set retval [wait_for_resource_info exp_resource_info 120 0 mvr_error]
   if { $retval != 0} {
      append error_text $mvr_error
   }
   unset exp_resource_info
   
   # finally report one big error mail
   if {$error_text != ""} {
      ts_log_severe $error_text
   } else {
      set ge_stop_and_free_resources_init_level_do_reset 0
   }
}

