#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
# ---START OF TEST INFO SECTION-------------------------------------------------------------------------------
# "no" - we don't need root acess / "yes" - we need root access:
set check_root_access_needs    "yes"

# name of the test (best practice: use the name of the test directory)
set check_name                 "ca_reload"

# specifiy the test categories
# (VERIFIED if the test is QA inspected)
# other possible categories: COMPATIBILITY CSP INSTALL L10N MODULE PERFORMANCE SYSTEM VERIFIED
set check_category             "SYSTEM VERIFIED"

# define the highest check level
set check_highest_level        0

# a sort check description for each runlevel:
# (runlevel 0 is mandatory)
set check_description(0)       "Tests the reloading of the ca component" ;# runlevel 0
# set check_description(1)       "SOME OTHER DESCRIPTION"  ;# runlevel 1

# specify check dependencies
# (name all tests which have to run sucessfull before this test can run)
set check_needs                "hedeby_install"

# The name of the init level procedure for this test. The procedure is defined
# in the test file.
set check_init_level_procedure "hedeby_ca_reload_init_level"

# define tests setup and cleanup function. The functions are called for each
# runlevel. Before testsuite is starting with calling all check_functions
# the setup function is called. After finishing all check_functions the
# cleanup function is called.
#
# The aim of the setup/cleanup functions is that the test should restore
# all modifications, even when the test failes completely.
set check_setup_function ""
set check_cleanup_function "hedeby_ca_reload_cleanup"


# The check_functions array tells the testsuite which check functions should
# be called (and in which order)
# All check_functions should be defined at least in a file (*.tcl) in the
# check directory.
set check_functions            ""
lappend check_functions "hedeby_ca_reload_check"

# ---END OF TEST INFO SECTION-------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------
#****** check.62/hedeby_ca_reload_init_level() *********************************
#  NAME
#     hedeby_ca_reload_init_level() -- init level method 
#
#  SYNOPSIS
#     hedeby_ca_reload_init_level { } 
#
#*******************************************************************************
proc hedeby_ca_reload_init_level {} {
  global CHECK_ACT_LEVEL

  # this test currently supports only runlevel "0"
  if { $CHECK_ACT_LEVEL == 0 } {
     return 0
  }
  return -1
}

#****** check/hedeby_ca_reload_cleanup() ****************************************
#  NAME
#    hedeby_ca_reload_cleanup() -- cleanup the ca_reload test
#
#  SYNOPSIS
#    hedeby_ca_reload_cleanup { } 
#
#  FUNCTION
#    Resets the 
#
#*******************************************************************************
proc hedeby_ca_reload_cleanup {} {
   upvar #0 hedeby_ca_reload_ctx this
   
   if {[info exists this(do_reset)]} {
      reset_hedeby 1
   }
   if {[info exists this]} {
      unset this
   }
}


 
#****** check/hedeby_ca_reload_check() ******************************************
#  NAME
#    hedeby_ca_reload_check() -- perform the ca_reload check
#
#  SYNOPSIS
#    hedeby_ca_reload_check { } 
#
#  FUNCTION
#
#  This test checks reconfiguring the ca component. It detail
#  it performs the following steps:
#
#   - change the configuration of the ca_script to /bin/false. The reload
#     must fail, because the juti.jar can not be found (path to juti.jar is
#     derived from the path of the ca_script).
#   - change the path of the ca_script to a valid value and reload the component
#     => the component must go into STARTED state
#
#*******************************************************************************
proc hedeby_ca_reload_check {} {
   global ts_config
   upvar #0 hedeby_ca_reload_ctx this
   
   set sge_root $ts_config(product_root)
   
   #-------------------------------------------------------------------------
   ts_log_heading "Performing ca reload with ca_script set to '/bin/false'"
   # set the path to the sge_ca script to /bin/false
   # => Component will *stay* in STARTED state but the update_component command
   # will return a failure. It is detected already in the synchronous part of
   # the reload that juti.jar can not be found
   set expected_update_rc 2
   if {[hedeby_ca_reload_set_ca_script "/bin/false" "STARTED" $expected_update_rc] != 0} {
      ts_log_severe "Unexpected behaviour when setting ca_script to /bin/false"
      set this(do_reset) "true"
   }      

   #-------------------------------------------------------------------------
   ts_log_heading "Performing ca reload with ca_script set to '${sge_root}/util/sgeCA/sge_ca'"
   # set the correct path to the sge_ca script
   # => Component will go into STARTED state
   set expected_update_rc 0
   if { [hedeby_ca_reload_set_ca_script "${sge_root}/util/sgeCA/sge_ca" "STARTED" $expected_update_rc] != 0 } {
      ts_log_severe "Unexpected behaviour when setting ca_script to default value"
      set this(do_reset) "true"
   }
}


#****** check/hedeby_ca_reload_set_ca_script() ****************************************************
#  NAME
#    hedeby_ca_reload_set_ca_script() -- set path to the ca_script in the ca configuration
#
#  SYNOPSIS
#    hedeby_ca_reload_set_ca_script { } 
#
#  FUNCTION
#
#  INPUTS
#    ca_script                -- path to the ca script
#    expected_component_state -- expected state of the component
#    expected_update_rc       -- expected return code of the sdmadm update_component command
#
#  RESULT
#    0 -- Success
#    else error, error message has been reported with ts_log function
#
#***************************************************************************************************
proc hedeby_ca_reload_set_ca_script { ca_script expected_component_state expected_update_rc } {
   global hedeby_config
   set host $hedeby_config(hedeby_master_host)

   set sequence {}
   lappend sequence "[format "%c" 27]" ;# ESC
   lappend sequence ":%s#<security:sgeCaScript>.*</security:sgeCaScript>#<security:sgeCaScript>$ca_script</security:sgeCaScript>#\n"
   
   set opt(do_update) 0
   if { [hedeby_change_component "ca" $sequence opt] != 0 } {
      return -1
   }
   unset opt

   set opt(raise_error) 1
   if { $expected_update_rc != 0 } {
      # we expect an error
      set opt(raise_error) 0
   }
   sdmadm_command_opt "uc -c ca -h $host" opt
   if { $prg_exit_state != $expected_update_rc } {
      return $prg_exit_state
   }
   set exp_comp_info(ca,$host,state) $expected_component_state
   return [wait_for_component_info exp_comp_info 30]
}
