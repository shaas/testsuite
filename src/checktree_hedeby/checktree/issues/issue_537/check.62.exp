#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2008 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
set check_root_access_needs    "yes"
set check_name                 "hedeby_issue_537"
set check_category             "COMPATIBILITY SYSTEM VERIFIED"
set check_description(0)       "check that hostname is resolvable before adding service configuration"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "hedeby_issue537_init_level"
set check_functions            {}   
set check_highest_level        0

set check_setup_level_function "hedeby_issue537_setup_level"
set check_cleanup_level_function "hedeby_issue537_cleanup_level"

lappend check_functions "hedeby_issue537_check"


#****** issue_537/hedeby_issue537_init_level() ************************
#  NAME
#     hedeby_issue537_init_level() -- init level procedure for test
#
#  SYNOPSIS
#     hedeby_issue537_init_level { } 
#
#  FUNCTION
#     Return the supported runlevel of this test. Currently only level 0
#     is supported.
#
#  INPUTS
#
#  RESULT
#     0 for CHECK_ACT_LEVEL 0
#    -1 for all other levels
#
#*******************************************************************************
proc hedeby_issue537_init_level {} {
  global CHECK_ACT_LEVEL

  if {$CHECK_ACT_LEVEL == 0} {
     return 0
  }
  return -1
}

#****** issue537/hedeby_issue537_setup_level() *********************************
#  NAME
#     hedeby_issue537_setup_level() -- setup level function
#
#  SYNOPSIS
#     hedeby_issue537_setup_level { } 
#
#  FUNCTION
#     set up hedeby_issue537_ctx variable
#       - name of fake spare_pool service
#       - name of fake geadapter service
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#*******************************************************************************
proc hedeby_issue537_setup_level {} {
   upvar #0 hedeby_issue537_ctx ctx

   set ctx(spare_pool) "fakesp[timestamp]"
   set ctx(geadapter)  "fakege[timestamp]"

   return
}

#****** issue537/hedeby_issue537_cleanup_level() *******************************
#  NAME
#     hedeby_issue537_cleanup_level() -- clean up level function
#
#  SYNOPSIS
#     hedeby_issue537_cleanup_level { } 
#
#  FUNCTION
#     remove created services and clean up hedeby_issue537_ctx variable
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#*******************************************************************************
proc hedeby_issue537_cleanup_level {} {
   upvar #0 hedeby_issue537_ctx ctx

   set opt(raise_error) 0
   sdmadm_command_opt "rs -s $ctx(spare_pool)" opt
   sdmadm_command_opt "rs -s $ctx(geadapter)"  opt

   unset ctx

   return
}


# ------------------------------------------------------------------------------
# here the tests begin ....

#****** issue_537/hedeby_issue537_check *****************************
#  NAME
#     hedeby_issue537_check() -- check if the proper hostname resolving is done before
#                                adding the service to global cnfiguration
#
#  SYNOPSIS
#     hedeby_issue537_check { } 
#
#  FUNCTION
#     this steps test hedeby issue 537:
#     1. We will add a spare pool service with not resolvable host
#        and we will check that spare pool wasnt added to global configuration 
#        and proper error message was shown
#     2. We will add a ge adapter service with not resolvable host
#        and we will check that ge adapter wasnt added to global configuration 
#        and proper error message was shown
#     3. We will add a spare pool service on localhost host
#        and we will check that spare pool was added to global configuration with resolved localhost 
#        and proper error message was shown
#     4. We will add a ge adapter service on localhost host
#        and we will check that ge adapter was added to global configuration with resolved localhost 
#        and proper error message was shown
#   
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#
#*******************************************************************************
proc hedeby_issue537_check {} {   
   upvar #0 hedeby_issue537_ctx ctx

   # get some global settings
   get_current_cluster_config_array ts_config
   set sge_root $ts_config(product_root)
   set fakehost "fakeh[timestamp]"

   # we need $opt(host) later for comparison, so get default values here
   get_hedeby_proc_default_opt_args opt
   # error checking is done manually here
   set opt(raise_error) 0

   #Step1
   set arguments "asps -j rp_vm -s $ctx(spare_pool) -h $fakehost"
   set output [sdmadm_command_opt $arguments opt]
   if {$prg_exit_state != 2} {
      ts_log_severe "Executing command add spare pool service didn't fail while adding service $ctx(spare_pool) on host $fakehost\nprg_exit_state=$prg_exit_state"
      return
   }
   set expected ""
   set params(0) $ctx(spare_pool)
   set params(1) $fakehost
   set params2(0) $fakehost

   set exp_msg(0) "WARNING: [create_bundle_string Hostname.ex.nr params2]"
   set exp_msg(1) "Error: [create_bundle_string AddSparePoolCliCommand.failed.host params]"

   #
   #  Two output messages are expected 
   #  1. the warning from the Hostname class that the host is not resolvable
   #  2. the error message fro mthe AddSparePoolCliCommand
   #
   if { ![string match "*$exp_msg(0)*" $output] ||
        ![string match "*$exp_msg(1)*" $output] } {
        set msg "There was not expected error message after adding service $ctx(spare_pool) to fake host\noutput=$output"
        append msg "\nExpected was\n"
        append msg "$exp_msg(0)\n"
        append msg "or\n$exp_msg(1)\n"
        ts_log_severe $msg
        return
   }
   
   set arguments "mgc"
   set ispid [hedeby_mod_setup_opt $arguments error_text2]
   set sequence {}

   lappend sequence "/name=\"$ctx(spare_pool)\"\n"
     
   hedeby_mod_sequence $ispid $sequence error_text2
   set output [hedeby_mod_cleanup $ispid error_text2 prg_exit_state 0]

   if { [string first "Pattern not found: name=\"$ctx(spare_pool)\"" $output] == -1 } {
        ts_log_severe "Service $ctx(spare_pool) was added to the system with unknown hostname\noutput=$output"
        return
   }
   
   #step2
   set arguments "ags -j rp_vm -s $ctx(geadapter) -h $fakehost"
   set ispid [hedeby_mod_setup_opt $arguments error_text3]
   set sequence {}

   lappend sequence "/root=\"\"\n"
   lappend sequence "dd"
   lappend sequence "i"
   lappend sequence "root=\"${sge_root}\"\n"
     
   hedeby_mod_sequence $ispid $sequence error_text3
   set output [hedeby_mod_cleanup $ispid error_text3 prg_exit_state 0]

   if {$prg_exit_state != 2} {
       ts_log_severe "Executing command add ge adapter service didnt fail while adding service $ctx(geadapter) on host $fakehost\nprg_exit_state=$prg_exit_state"
       return
   }
   set params20(0) $ctx(geadapter)
   set params20(1) $fakehost
   set params21(0) $fakehost
   if { ![string match "*WARNING: [create_bundle_string Hostname.ex.nr params21]*" $output] ||
        ![string match "*Error: [create_bundle_string AddGEServiceCliCommand.failed.host params20]*" $output] } {
        ts_log_severe "There was not expected error message after adding service $ctx(geadapter) to fake host\noutput=$output"
        return
   }
   
   set arguments "mgc"
   set ispid [hedeby_mod_setup_opt $arguments error_text2]
   set sequence {}

   lappend sequence "/name=\"$ctx(geadapter)\"\n"
     
   hedeby_mod_sequence $ispid $sequence error_text2
   set output [hedeby_mod_cleanup $ispid error_text2 prg_exit_state 0]

   if { [string first "Pattern not found: name=\"$ctx(geadapter)\"" $output] == -1 } {
        ts_log_severe "Service $ctx(geadapter) was added to the system with unknown hostname\noutput=$output"
        return
   }

   #step 3
   set arguments "asps -j rp_vm -s $ctx(spare_pool) -h localhost"
   set opt(table_output) table1
   set output [sdmadm_command_opt $arguments opt]
   unset opt(table_output)
   if {$prg_exit_state != 0} {
      ts_log_severe "Executing command add spare pool service failed while adding service $ctx(spare_pool) on the localhost\nprg_exit_state=$prg_exit_state"
      return
   }
   if {$table1(jvm_name,0) != "rp_vm"} {
      ts_log_severe "Jvm name '$table1(jvm_name,0)' is different than expected 'rp_vm'" 
      return
   }
   if {$table1(service_name,0) != $ctx(spare_pool)} {
      ts_log_severe "Service name '$table1(service_name,0)' is different than expected '$ctx(spare_pool)'"
      return
   }
   if {$table1(hostname,0) != $opt(host)} {
      ts_log_severe "Host name '$table1(hostname,0)' is different than expected '$opt(host)'"
      return
   }
   if {$table1(message,0) != "ADDED"} {
      ts_log_severe "Message '$table1(message,0)' is different than expected 'ADDED'"
      return
   }
   
   set arguments "mgc"
   set ispid [hedeby_mod_setup_opt $arguments error_text2]
   set sequence {}

   lappend sequence "/name=\"localhost\"\n"
     
   hedeby_mod_sequence $ispid $sequence error_text2
   set output [hedeby_mod_cleanup $ispid error_text2 prg_exit_state 0]

   if { [string first "Pattern not found: name=\"localhost\"" $output] == -1 } {
        ts_log_severe "Service $ctx(spare_pool) was added to the system with not resolved localhost name\noutput=$output"
        return
   }
   
   set arguments "rs  -s $ctx(spare_pool)"
   sdmadm_command_opt $arguments
   if {$prg_exit_state != 0} {
       ts_log_severe "Executing command remove spare pool service failed\nprg_exit_state=$prg_exit_state"
       return
   }
   
   #step 4
   set arguments "ags -j rp_vm -s $ctx(geadapter) -h localhost"
   set ispid [hedeby_mod_setup_opt $arguments error_text3]
   set sequence {}

   lappend sequence "/root=\"\"\n"
   lappend sequence "dd"
   lappend sequence "i"
   lappend sequence "root=\"${sge_root}\"\n"
     
   hedeby_mod_sequence $ispid $sequence error_text3
   set output [hedeby_mod_cleanup $ispid error_text3 prg_exit_state 0]

   if {$prg_exit_state != 0} {
       ts_log_severe "Executing command add ge adapter service failed while adding service $ctx(geadapter) to localhost\nprg_exit_state=$prg_exit_state"
       return
   }
   
   set par4(0) $ctx(geadapter) 
   if { ![string match "*[create_bundle_string AddGEServiceCliCommand.success par4]*" $output] } {
        ts_log_severe "There was not expected error message after adding service $ctx(geadapter) to localhost\noutput=$output"
        return
   }
   
   set arguments "mgc"
   set ispid [hedeby_mod_setup_opt $arguments error_text2]
   set sequence {}

   lappend sequence "/name=\"localhost\"\n"
     
   hedeby_mod_sequence $ispid $sequence error_text2
   set output [hedeby_mod_cleanup $ispid error_text2 prg_exit_state 0]

   if { [string first "Pattern not found: name=\"localhost\"" $output] == -1 } {
        ts_log_severe "Service $ctx(geadapter) was added to the system with not resolved localhost name\noutput=$output"
        return
   }

   set arguments "rs  -s $ctx(geadapter)"
   sdmadm_command_opt $arguments
   if {$prg_exit_state != 0} {
       ts_log_severe "Executing command remove spare pool service failed\nprg_exit_state=$prg_exit_state"
       return
   }
}
