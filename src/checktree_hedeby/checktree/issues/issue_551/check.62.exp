#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2008 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
set check_root_access_needs    "yes"
set check_name                 "hedeby_issue_551"
set check_category             "COMPATIBILITY SYSTEM VERIFIED"
set check_description(0)       "Max pending jobs SLO test issue 551"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "hedeby_issue551_init_level"
set check_functions            {}   
set check_highest_level        0

set check_setup_level_function "hedeby_issue551_setup_level"
set check_cleanup_level_function "hedeby_issue551_cleanup_level"

lappend check_functions "hedeby_issue551_check"


#****** issue_551/hedeby_issue551_init_level() ************************
#  NAME
#     hedeby_issue551_init_level() -- init level procedure for test
#
#  SYNOPSIS
#     hedeby_issue551_init_level { } 
#
#  FUNCTION
#     Return the supported runlevel of this test. Currently only level 0
#     is supported.
#
#  INPUTS
#
#  RESULT
#     0 for CHECK_ACT_LEVEL 0
#    -1 for all other levels
#
#*******************************************************************************
proc hedeby_issue551_init_level {} {
  global CHECK_ACT_LEVEL

  if {$CHECK_ACT_LEVEL == 0} {
     return 0
  }
  return -1
}

#****** issue551/hedeby_issue551_setup_level() *********************************
#  NAME
#    hedeby_issue551_setup_level() -- setup level function
#
#  SYNOPSIS
#    hedeby_issue551_setup_level { } 
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#*******************************************************************************
proc hedeby_issue551_setup_level {} {
   upvar #0 hedeby_issue551_ctx ctx

   get_hedeby_default_services service_names

   # randomly pick a ge_adapter
   set ctx(ge_adapter) [pick_random $service_names(services)]
   set ctx(master_host) $service_names(master_host,$ctx(ge_adapter))

   # save old and set current cluster nr to nr of ge_adapter
   set ctx(curr_cluster_nr) [get_current_cluster_config_nr]
   set_current_cluster_config_nr $service_names(ts_cluster_nr,$ctx(ge_adapter))
}

#****** issue551/hedeby_issue551_cleanup_level() *******************************
#  NAME
#    hedeby_issue551_cleanup_level() -- setup level function
#
#  SYNOPSIS
#    hedeby_issue551_cleanup_level { } 
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#*******************************************************************************
proc hedeby_issue551_cleanup_level {} {
   upvar #0 hedeby_issue551_ctx ctx

   reset_default_slos "mod_config" $ctx(ge_adapter)
   if {[move_resources_to_default_services] != 0} {
      reset_hedeby 1
   }

   #enable queues of ge adapater service and delete all jobs in queues 
   enable_queue {\\*}
   delete_all_jobs
   wait_for_end_of_all_jobs

   #reset saved active cluster configuration nr
   set_current_cluster_config_nr $ctx(curr_cluster_nr)

   unset ctx
}


# ------------------------------------------------------------------------------
# here the tests begin ....

#****** issue_5551/hedeby_issue551_check *****************************
#  NAME
#     hedeby_issue551_check() -- check if MaxPendingJobsSLO is working
#
#  SYNOPSIS
#     hedeby_issue551_check { } 
#
#  FUNCTION
#     this steps test hedeby issue 551: 
#       MaxPendingJobsSLO is not working
#
#      Executed steps:
#
#         o Modify the SLO setup of GE service (MaxPendingJobsSLO(urg=65), fixed_usage(usage=50)
#         o Disable all queues in the cluster behind the GE service
#         o Submit one sleeper job
#         o Wait until the MPJ SLOs produces a need
#   
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#
#*******************************************************************************
proc hedeby_issue551_check {} {
   global check_name
   upvar #0 hedeby_issue551_ctx ctx

   get_current_cluster_config_array ts_config
   set sge_root $ts_config(product_root)


   #--------------------------------------------------------------------------------
   ts_log_heading "Setting up SLOs for ge service '$ctx(ge_adapter)'"
   #--------------------------------------------------------------------------------
   set slo_name "mpj"
   set urg      65
   set slo_update_interval 10

   # define a request filter that never matches a movable resource 
   set requestFilter "<common:request>static = true</common:request>"
   set resourceFilter ""

   set slos [create_max_pending_jobs_slo $urg $slo_name $resourceFilter $requestFilter "" 1]

   # Add a fixed_usage SLO, the assigned resources should not move
   append slos [create_fixed_usage_slo 50]

   if {[set_service_slos "mod_config" $ctx(ge_adapter) $slos 1 "seconds" $slo_update_interval] != 0} {
      return
   }

   #--------------------------------------------------------------------------------
   ts_log_heading "Disable all queues of cluster '$ctx(ge_adapter)'"
   #--------------------------------------------------------------------------------
   #disable all queues of our ge_adapter service 
   ts_log_fine "disabling queues on qmaster $ctx(master_host)"
   if {[disable_queue {\\*}] != 0} {
      ts_log_severe "Disabling of queues of service $ctx(ge_adapter) on resource $ctx(master_host) failed!"
      return
   }

   #--------------------------------------------------------------------------------
   ts_log_heading "Submit a sleeper job"
   #--------------------------------------------------------------------------------
   if {[submit_job "-o /dev/null -e /dev/null $sge_root/examples/jobs/sleeper.sh 1"] < 0} {
      return
   }

   #--------------------------------------------------------------------------------
   ts_log_heading "Waiting until SLO '$slo_name' produces a need"
   #--------------------------------------------------------------------------------
   set si($ctx(ge_adapter),$slo_name,quantity)  1
   set si($ctx(ge_adapter),$slo_name,urgency)   $urg
   set timeout 25 
   if {[wait_for_service_slo_info si $timeout] != 0} {
      ts_log_severe "MaxPendingJobsSLO in GE service '$ctx(ge_adapter)' did  produce a need"
   }
   
}
