#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
set check_root_access_needs    "no"
set check_name                 "hedeby_issue_88"
set check_category             "SYSTEM VERIFIED"
set check_description(0)       "wrong exit code if already running system is started"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "hedeby_issue_88_init_level"
set check_functions            ""   
set check_highest_level        0

set check_setup_function "hedeby_issue_88_setup"
set check_cleanup_function "hedeby_issue_88_cleanup"

lappend check_functions "hedeby_issue_88_check"

# ---------------------------------------------------------------------------------
# here the tests begin ....
global hedeby_issue_88_current_cluster_config


proc hedeby_issue_88_init_level {} {
  global CHECK_ACT_LEVEL

  if { $CHECK_ACT_LEVEL == 0 } {
     return 0
  }
  return -1
}

proc hedeby_issue_88_setup {} {
   global CHECK_OUTPUT
}

proc hedeby_issue_88_cleanup {} {
   global CHECK_OUTPUT
}

proc hedeby_issue_88_check {} {
   global CHECK_OUTPUT
   global hedeby_config

   set host $hedeby_config(hedeby_master_host)
   set user [get_hedeby_startup_user]
   set admin_user [get_hedeby_admin_user]
   
   # Shutdown the CS vm
   set ret [sdmadm_shutdown $host $user output [get_hedeby_pref_type] [get_hedeby_system_name] "cs_vm" $host]
   if { $ret != 0 } {
      add_proc_error "hedeby_issue_88_check" -2 "Cannot shutdown cs_vm"
      return
   }
   set error_count 0
   # modify the contact string in the pid file of the executor_vm
   # The vm can not contacted longer over JMX.
   if { [read_hedeby_jvm_pid_info pid_info $host $user "executor_vm"] != 0 } {
      add_proc_error "hedeby_issue_88_check" -2 "Cannot read of info of executor_vm"
      incr error_count
   }
   
   if { $error_count == 0 } {
      set pid_file [get_pid_file_for_jvm $host "executor_vm"]
      puts $CHECK_OUTPUT "pidfile: $pid_file"
      set save_pid_info(0) 2
      set save_pid_info(1) $pid_info(pid)
      set save_pid_info(2) 0
      write_remote_file $host $user $pid_file save_pid_info
      # Shutdown executor jvm, CS is not available and the pid file contains
      # an invalid JMX connect URL.
      # The shutdown command will kill the JVM
      set ret [sdmadm_shutdown $host $user output [get_hedeby_pref_type] [get_hedeby_system_name] "executor_vm" $host]
      if { $ret != 0 } {
         add_proc_error "hedeby_issue_88_check" -2 "Cannot shutdown executor_vm"
         incr error_count
      } else {
         # Check if the output of "sdmadm shutdown" contains the kill message
         set msg_params(0) "executor_vm"
         set msg [create_bundle_string "ui.stopjvmcommand.kill" msg_params]
         
         if { [string match "*${msg}*" $output] == 0} {
            add_proc_error "hedeby_issue_88_check" -2 "sdmadm shutdown did not print kill message"
         }
         
         # wait until the pid file has been removed
         if {[wait_for_remote_file $host $user $pid_file 120 1 1] != 0 } {
            add_proc_error "hedeby_issue_88_check" -2 "Timeout while waiting for shutdown of jvm executor_vm@${host}"
         }
      }
   }
   
   # startup cs
   set ret [sdmadm_start $host $user output [get_hedeby_pref_type] [get_hedeby_system_name] "cs_vm"]
   if { $ret != 0 } {
      add_proc_error "hedeby_issue_88_check" -2 "Cannot startup cs_vm"
   }

   # startup executor
   set ret [sdmadm_start $host $user output [get_hedeby_pref_type] [get_hedeby_system_name] "executor_vm"]
   if { $ret != 0 } {
      add_proc_error "hedeby_issue_88_check" -2 "Cannot startup executor_vm"
   }
}



