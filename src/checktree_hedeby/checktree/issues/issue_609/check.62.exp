#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2008 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
set check_root_access_needs    "yes"
set check_name                 "hedeby_issue_609"
set check_category             "COMPATIBILITY SYSTEM VERIFIED"
set check_description(0)       "Tests that reporter can handle empty lines in its history file"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "hedeby_issue609_init_level"
set check_functions            {}   
set check_highest_level        0

set check_setup_level_function "hedeby_issue609_setup_level"
set check_cleanup_level_function "hedeby_issue609_cleanup_level"

lappend check_functions "hedeby_issue609_check"


#****** issue_609/hedeby_issue609_init_level() ************************
#  NAME
#     hedeby_issue609_init_level() -- init level procedure for test
#
#  SYNOPSIS
#     hedeby_issue609_init_level { } 
#
#  FUNCTION
#     Return the supported runlevel of this test. Currently only level 0
#     is supported.
#
#  INPUTS
#
#  RESULT
#     0 for CHECK_ACT_LEVEL 0
#    -1 for all other levels
#
#*******************************************************************************
proc hedeby_issue609_init_level {} {
  global CHECK_ACT_LEVEL

  if {$CHECK_ACT_LEVEL == 0} {
     return 0
  }
  return -1
}

#****** issue_609/hedeby_issue609_setup_level() *********************************
#  NAME
#    hedeby_issue609_setup_level() -- setup level function
#
#  SYNOPSIS
#    hedeby_issue609_setup_level { } 
#
#  FUNCTION
#    This function do setup of test in step
#
#       o Step 1: Shutdown rp_vm with reporter component
#       o Step 2: Copy the reporter files to some temp directory
#       o Step 3: Create new reporter file with empty lines
#       o Step 4: Start up rp_vm with reporter component
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#*******************************************************************************
proc hedeby_issue609_setup_level {} {
   upvar #0 hedeby_issue609_ctx this
   global hedeby_config
   set this(master) $hedeby_config(hedeby_master_host)
   set this(rpdown) false
   set this(admin) [get_hedeby_admin_user]
   set this(filemoved) false
   set this(dir) "rep[timestamp]"
   set this(dircreated) false
   set this(jvm) [get_reporter_jvm]
   # Check the owner of reporter spool dir
   set this(owner) [get_jvm_owner $this(jvm)]
   
   # ------------------------------------------------------------------ 
   ts_log_heading "Setup 1 : Shutdown $this(jvm) jvm with reporter component on host $this(master)"
   # ------------------------------------------------------------------ 
   hedeby_issue609_shutdown_jvm $this(jvm) $this(master)
   set this(rpdown) true
   
   # ------------------------------------------------------------------ 
   ts_log_heading "Setup 2 : Copy the original reporter files into /tmp/$this(dir) temp directory"
   # ------------------------------------------------------------------ 
   #we are getting the path to reporter files
   set this(reppath) [sdmadm_command_opt "sbc -all | grep spool | sed -e \"s# *##g\" | sed -e \"s#spool=##g\""]
   set this(reppath) "[string trim $this(reppath)]/spool/reporter"
   if {$prg_exit_state != 0} {
      set    msg "There was a problem with getting the path to reporter files\n"
      append msg "Output was\n"
      append msg $this(reppath)
      ts_log_severe $msg
      return
   }
   #create tmp directory for reporter original files
   set output [start_remote_prog $this(master) $this(owner) "mkdir" "/tmp/$this(dir)"] 
   if {$prg_exit_state != 0} {
      set    msg "There was a problem with creating the temp directory for reporter files\n"
      append msg "Output was\n"
      append msg $output
      ts_log_severe $msg
      return
   }
   set this(dircreated) true
   #move the original files to the tmp directory 
   set output [start_remote_prog $this(master) $this(owner) "mv" "${this(reppath)}/* /tmp/$this(dir)"] 
   if {$prg_exit_state != 0} {
      set    msg "There was a problem with moving the reporter files to temp directory\n"
      append msg "Output was\n"
      append msg $output
      ts_log_severe $msg
      return
   }
   set this(filemoved) true
   # ------------------------------------------------------------------ 
   ts_log_heading "Setup 3 : Create new reporter file and store it in reporter spool dir"
   # ------------------------------------------------------------------ 
   #preparation of the new special file with empty lines
   set data(0) 11
   set data(1)  "1250078442869:SERVICE_ADDED:1:spare_pool:Service \[spare_pool\] has been added.:::"
   set data(2)  "1250078442304:CS_OBJECT_ADDED:11:cs:name=active_component.spare_pool:::"
   set data(3)  "1250078442873:REQUEST_PROCESS:1:spare_pool:n=10,urg=1,req='type = \"host\"':::"
   set data(4)  "1250078442878:REQUEST_PENDING:2:spare_pool:n=10,urg=1,req='type = \"host\"':::"
   set data(5)  "1250078442878:REQUEST_QUEUED:3:spare_pool:n=10,urg=1,req='type = \"host\"':::"
   set data(6)  ""
   set data(7)  "        "
   set data(8)  "1250078498238:CS_OBJECT_CHANGED:12:cs:name=active_jvm.executor_vm:::"
   set data(9)  "1250078498274:CS_OBJECT_ADDED:13:cs:name=active_component.executor_vm:::"
   set data(10) "1250078498308:CS_OBJECT_CHANGED:14:cs:name=active_jvm.executor_vm:::"
   set data(11) "1250078498316:CS_OBJECT_ADDED:15:cs:name=active_component.executor:::"


   set output [write_remote_file $this(master) $this(owner) $this(reppath)/report-0.log data] 
   if {$prg_exit_state != 0} {
      set    msg "There was a problem with writing the new reporter files\n"
      append msg "Output was\n"
      append msg $output
      ts_log_severe $msg
      return
   }

   # ------------------------------------------------------------------ 
   ts_log_heading "Setup 4 : Startup $this(jvm) jvm with reporter component on host $this(master)"
   # ------------------------------------------------------------------ 
   
   set opt(user) [get_hedeby_startup_user]
   set output [sdmadm_command_opt "suj -j $this(jvm)" opt]
   if {$prg_exit_state != 0} {
      set    msg "There was a problem starting $this(jvm) on host $this(master).\n"
      append msg "Output was\n"
      append msg $output
      ts_log_severe $msg
      return
   }
   set exp_ji($this(jvm),$this(master),state) "STARTED" 
   set err_ji($this(jvm),$this(master),state) "STOPPED"
   set err_ji($this(jvm),$this(master),state) "STOPPING"
   set ji_opts(jvm_name) "$this(jvm)"
   set ji_opts(jvm_host) $this(master)
   set ji_opts(error_jvm_info) err_ji

   if {[wait_for_jvm_info exp_ji ji_opts] != 0} {
      set msg "Jvm $this(jvm) didnt start"
      ts_log_severe $msg
      return 
   }
   set this(rpdown) false
   # ------------------------------------------------------------------ 
   ts_log_heading "Setup : Setup for issue609 finished"
   # ------------------------------------------------------------------
}

#****** issue_609/hedeby_issue609_cleanup_level() *******************************
#  NAME
#    hedeby_issue609_cleanup_level() -- setup level function
#
#  SYNOPSIS
#    hedeby_issue609_cleanup_level { } 
#
#  INPUTS
#     no input parameters
#
#  FUNCTION
#   This function do following step: 
#
#    o Step 1: Shutdown rp_vm jvm with reporter component if started
#    o Step 2: Move original files back to the reporter spool dir
#    o Step 3: Startup rp_vm jvm with reporter componet if shutdown
#    o Step 4: Delete temporary directory
#    o Step 5: Removes the global context variable of this test (hedeby_issue609_ctx)
#
#  RESULT
#     no return values
#*******************************************************************************
proc hedeby_issue609_cleanup_level {} {
   upvar #0 hedeby_issue609_ctx this
   if { $this(filemoved) == "true" } {
       if { $this(rpdown) == "false" } {
           # ------------------------------------------------------------------ 
           ts_log_heading "Cleanup 1 : Shutdown $this(jvm) jvm with reporter component on host $this(master)"
           # ------------------------------------------------------------------ 
           
	   hedeby_issue609_shutdown_jvm $this(jvm) $this(master)
           set this(rpdown) true
       }
       # ------------------------------------------------------------------ 
       ts_log_heading "Cleanup 2 : Copy the original reporter files back to reporter spool directory"
       # ------------------------------------------------------------------ 
       set output [start_remote_prog $this(master) $this(owner) "mv" "/tmp/$this(dir)/* $this(reppath)"] 
       if {$prg_exit_state != 0} {
          set    msg "There was a problem with moving the reporter files back to origianl directory\n"
          append msg "Output was\n"
          append msg $output
          ts_log_severe $msg
          return
       }
   }
   if { $this(rpdown) == "true" } {
        # ------------------------------------------------------------------ 
        ts_log_heading "Cleanup 3 : Startup $this(jvm) jvm with reporter component on host $this(master)"
        # ------------------------------------------------------------------
	set opt(user) [get_hedeby_startup_user]
        set output [sdmadm_command_opt "suj -j $this(jvm)" opt] 
        if {$prg_exit_state != 0} {
          set    msg "There was a problem starting rp_vm on host $this(master).\n"
          append msg "Output was\n"
          append msg $output
          ts_log_severe $msg
          return
        }
        set exp_ji($this(jvm),$this(master),state) "STARTED" 
        set err_ji($this(jvm),$this(master),state) "STOPPED"
        set err_ji($this(jvm),$this(master),state) "STOPPING"
        set ji_opts(jvm_name) "$this(jvm)"
        set ji_opts(jvm_host) $this(master)
        set ji_opts(error_jvm_info) err_ji

        if {[wait_for_jvm_info exp_ji ji_opts] != 0} {
           set msg "Jvm $this(jvm) didnt start"
           ts_log_severe $msg
           return 
        }
   }
   if { $this(dircreated) == "true" } {
       # ------------------------------------------------------------------ 
       ts_log_heading "Cleanup 4 : Delete temp /tmp/$this(dir) directory"
       # ------------------------------------------------------------------
       set output [start_remote_prog $this(master) $this(owner) "rm" "-r /tmp/$this(dir)"] 
       if {$prg_exit_state != 0} {
          set    msg "There was a problem with deleting the reporter temp directory\n"
          append msg "Output was\n"
          append msg $output
          ts_log_severe $msg
          return
       }
   }
   unset this
   # ------------------------------------------------------------------ 
   ts_log_heading "Cleanup : Cleanup for issue609 finished"
   # ------------------------------------------------------------------
}

#****** issue_609/hedeby_issue609_check *****************************
#  NAME
#     hedeby_issue609_check() -- check that issue 609 is fixed
#
#  SYNOPSIS
#     hedeby_issue609_check { } 
#
#  FUNCTION
#
#    This test will check that reporter can handle empty lines in reporter file
# 
#    Test performs the following step:
#
#    o Step: Check that show history command prints out the data without problems
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#
#**********************************************************************
proc hedeby_issue609_check {} {
   upvar #0 hedeby_issue609_ctx this

   # ------------------------------------------------------------------ 
   ts_log_heading "TEST : Check that show history command prints out the data without problems even if file contain empty lines"
   # ------------------------------------------------------------------ 
   set output [sdmadm_command_opt "shist"] 
   if {$prg_exit_state != 0} {
      set    msg "There was a problem executing shist command.\n"
      append msg "Output was\n"
      append msg $output
      ts_log_severe $msg
      return
   }
}

proc hedeby_issue609_shutdown_jvm { jvm host } {
   read_hedeby_jvm_pid_info pid_info $host "root" $jvm
   set pid $pid_info(pid)
   
   ts_log_heading "Shutting down $jvm on host \"$host\" (pid=$pid)..."
   sdmadm_command_opt "sdj -j $jvm -h $host"
   if {$prg_exit_state != 0} {
      set    msg "There was a problem shutting down $jvm on host $host.\n"
      append msg "Output was\n"
      append msg $output
      ts_log_severe $msg
      return
   }

   set my_timeout [timestamp]
   incr my_timeout 60
   while { 1 } {
      ts_log_fine "Waiting for shutdown of process \"$pid\" ..."
      if { [is_hedeby_process_running $host $pid] == 0 } {
         ts_log_fine "Process not found - fine!"
         break
      }
      if { [timestamp] > $my_timeout} {
         ts_log_severe "Timeout while waiting for shutdown of $jvm on host $host!"
         break
      }
      after 1000
   }

}
