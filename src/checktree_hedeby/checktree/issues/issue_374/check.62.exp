#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
set check_root_access_needs    "yes"
set check_name                 "issue_374"
set check_category             "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)       "JVM start and stop stress test"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "hedeby_issue_374_init_level"
set check_functions            {}   
set check_highest_level        0

set check_setup_level_function "hedeby_issue_374_setup"
set check_cleanup_level_function "hedeby_issue_374_cleanup"

lappend check_functions "hedeby_issue_374_check"

# ---------------------------------------------------------------------------------
# here the tests begin ....
proc hedeby_issue_374_init_level {} {
  global CHECK_ACT_LEVEL

  if { $CHECK_ACT_LEVEL == 0 } {
     return 0
  }
  return -1
}

proc hedeby_issue_374_setup {} {
   upvar #0 hedeby_issue_374_ctx this

   set this(cc_cnr) [get_current_cluster_config_nr]

   get_hedeby_proc_default_opt_args default_args
   # the rp_vm of the master host is stopped and started
   set this(host)   $default_args(host)
   set this(user)   $default_args(user)
   # this resource is added and removed in the tests
   ## expr { srand(5) } ; # seed random number generator to get a fixed resource
   set this(res)    [pick_random [get_all_spare_pool_resources]]
}

#****** issue_374/hedeby_issue_374_cleanup() *************************
#  NAME
#     hedeby_issue_374_cleanup() -- clean the test up
#
#  SYNOPSIS
#     hedeby_issue_374_cleanup { } 
#
#  FUNCTION
#     Remove used resource again and add it with correct properties
#     by using add_host_resources() procedure. The call to remove and
#     add_host_resources() MUST be done, otherwise the resource properties
#     might not be set correctly.
#*******************************************************************************
proc hedeby_issue_374_cleanup {} {
   upvar #0 hedeby_issue_374_ctx this

   # remove resource
   ts_log_fine "Removing resource \"$this(res)\" ..."
   sdmadm_command_opt "rr -r $this(res) -force"

   # wait for removal of $this(res)
   if {[wait_for_resource_removal $this(res)] == 0} {
      # resource is removed, so re-add with correct properties
      ts_log_fine "Re-add resource \"$this(res)\" ..."
      if {[add_host_resources $this(res)] != 0} {
         # Re-add failed: as last resort do a reset_hedeby
         reset_hedeby 1
      }
   } else {
      reset_hedeby 1
   }

   # reset saved active cluster configuration nr
   set_current_cluster_config_nr $this(cc_cnr)
   unset this
}

#****** issue_374/hedeby_issue_374_check() *****************************
#  NAME
#     hedeby_issue_374_check() -- jvms startup/stop stress test
#
#  SYNOPSIS
#     hedeby_issue_374_check { } 
#
#  FUNCTION
#     This test checks if right after startup of the resource provider JVM a
#     resource can be added to a service in the system.
#     
#     For this, the test does the following in a loop for all services. A
#     random spare_pool resource is picked and used throughout this test:
#     1. remove resource and wait for resource removal
#     2. Stop rp_vm on resource_provider host
#     3. wait for shutdown of JVM
#     4. Startup rp_vm, wait for RP to be started and add resource to current
#        service
#
#  INPUTS
#     no input parameters
#
#  NOTES
#     With (a small modification of) this test it would be possible to also
#     test the persistence behavior of the RP. In order to do this, the only
#     thing that needs to be removed (best in a different run level) is the
#     waiting for the resource removal before the shutdown. So the sequence
#     would then be:
#     1. remove resource
#     2. immediately (NO WAIT) stop rp_vm on RP host
#     3. wait for shutdown of JVM
#     4. startup rp_vm, wait for RP to be started and then wait for resource
#        removal
#
#     Currently, however, the RP does NOT have a persistent order store.
#     Therefore this additional test would fail.
#
#  RESULT
#     no return values
#*******************************************************************************
proc hedeby_issue_374_check {} {
   upvar #0 hedeby_issue_374_ctx this

   # for all ge-adapter-services and the spare_pool
   get_hedeby_default_services service_names
   set services $service_names(services)
   lappend services "spare_pool"

   foreach service $services {
      # step 1
      ts_log_heading "Testing service '$service' ..."
      ts_log_fine "Removing resource \"$this(res)\" ..."
      sdmadm_command_opt "rr -r $this(res)"
      wait_for_resource_removal $this(res)

      # step 2
      ts_log_fine "Shutting down rp_vm on host \"$this(host)\" ..."
      sdmadm_command_opt "sdj -j rp_vm -h $this(host)"

      # step 3
      read_hedeby_jvm_pid_info pid_info $this(host) $this(user) "rp_vm"
      set pid $pid_info(pid)
      set my_timeout [timestamp]
      incr my_timeout 60
      while { 1 } {
         ts_log_fine "Waiting for shutdown of process \"$pid\" ..."
         if { [is_hedeby_process_running $this(host) $pid] == 0 } {
            ts_log_fine "Process not found - fine!"
            break
         }
         if { [timestamp] > $my_timeout} {
            ts_log_severe "Timeout while waiting for shutdown of rp_vm on host $host!"
            break
         }
         after 1000
      }
      
      # step 4
      ts_log_fine "Startup rp_vm on host \"$this(host)\" ..."
      sdmadm_command_opt "suj -j rp_vm"

      # ... wait until RP is STARTED
      set exp_comp_info(resource_provider,$this(host),state) "STARTED"
      wait_for_component_info exp_comp_info

      ts_log_fine "Adding resource \"$this(res)\" to service '$service' ..."
      sdmadm_command_opt "ar -r $this(res) -s $service"

      # Wait for resource to be added
      set exp_res_info($this(res),service) $service 
      set exp_res_info($this(res),flags) "{}"
      set exp_res_info($this(res),state) "ASSIGNED"
      wait_for_resource_info exp_res_info
   }
}

