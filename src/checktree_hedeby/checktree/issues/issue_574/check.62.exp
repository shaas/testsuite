#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2009 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
set check_root_access_needs    "yes"
set check_name                 "hedeby_issue_574"
set check_category             "COMPATIBILITY SYSTEM VERIFIED"
set check_description(0)       "check if source tar and zip can be generated"
set check_init_level_procedure "hedeby_issue574_init_level"
set check_functions            {}   
set check_highest_level        0

set check_setup_level_function "hedeby_issue574_setup_level"
set check_cleanup_level_function "hedeby_issue574_cleanup_level"

lappend check_functions "hedeby_issue574_check"


#****** issue_574/hedeby_issue574_init_level() ************************
#  NAME
#     hedeby_issue574_init_level() -- init level procedure for test
#
#  SYNOPSIS
#     hedeby_issue574_init_level { }
#
#  FUNCTION
#     Return the supported runlevel of this test. Currently only level 0
#     is supported.
#
#  INPUTS
#
#  RESULT
#     0 for CHECK_ACT_LEVEL 0
#    -1 for all other levels
#
#*******************************************************************************
proc hedeby_issue574_init_level {} {
  global CHECK_ACT_LEVEL

  if {$CHECK_ACT_LEVEL == 0} {
     return 0
  }
  return -1
}

#****** issue574/hedeby_issue574_setup_level() *********************************
#  NAME
#     hedeby_issue574_setup_level() -- setup level function
#
#  SYNOPSIS
#     hedeby_issue574_setup_level { }
#
#  FUNCTION
#     set up hedeby_issue574_ctx variable
#
#     hedeby_issue574_ctx(java_build_host)      - name of host used to java compilation
#     hedeby_issue574_ctx(tmp_dir_tar)          - temp directory for tar sources
#     hedeby_issue574_ctx(tmp_dir_zip)          - temp directory for zip sources
#     hedeby_issue574_ctx(tar_file)             - path to tar.gz file generated by ant tar.src
#     hedeby_issue574_ctx(zip_file)             - path to zip file generated by ant zip.src
#     hedeby_issue574_ctx(gz_name)              - path to tar.gz file in temp directory
#     hedeby_issue574_ctx(tar_name)             - path to tar file in temp directory
#     hedeby_issue574_ctx(tar_dist)             - new temp hedeby sources directory 
#     hedeby_issue574_ctx(zip_dist)             - new temp hedeby sources directory
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#*******************************************************************************
proc hedeby_issue574_setup_level {} {
   upvar #0 hedeby_issue574_ctx ctx
   global hedeby_config CHECK_USER
   #get java host on which ant will be called
   set ctx(java_build_host) [host_conf_get_java_compile_host]
   #tmp dir for testing tar src
   set ctx(tmp_dir_tar) [get_tmp_directory_name $ctx(java_build_host)]
   #create tmp dir
   start_remote_prog $ctx(java_build_host) $CHECK_USER "mkdir" "$ctx(tmp_dir_tar)" res
   if { $res != 0 } {
      ts_log_severe "Failed to create tmp directory: $ctx(tmp_dir_tar) on host: $ctx(java_build_host) as user $CHECK_USER"
      return -1
   }
   unset res
   #tmp dir for testing zip src
   set ctx(tmp_dir_zip) [get_tmp_directory_name $ctx(java_build_host)]
   #create tmp dir
   start_remote_prog $ctx(java_build_host) $CHECK_USER "mkdir" "$ctx(tmp_dir_zip)" res
   if { $res != 0 } {
      ts_log_severe "Failed to create tmp directory: $ctx(tmp_dir_zip) on host: $ctx(java_build_host) as user $CHECK_USER"
      return -1
   }
   # tag name for sources
   set tag_name $hedeby_config(hedeby_source_cvs_release)
   # get location of hedeby sources
   set src $hedeby_config(hedeby_source_dir)
   #location of generated by ant tar and zip
   set ctx(tar_file) "$src/dist/hedeby-source_${tag_name}.tar.gz"
   set ctx(zip_file) "$src/dist/hedeby-source_${tag_name}.zip"
   set ctx(gz_name) "$ctx(tmp_dir_tar)/hedeby-source_${tag_name}.tar.gz"
   set ctx(tar_name) "$ctx(tmp_dir_tar)/hedeby-source_${tag_name}.tar"
   set ctx(tar_dist) "$ctx(tmp_dir_tar)/hedeby_${tag_name}"
   set ctx(zip_dist) "$ctx(tmp_dir_zip)/hedeby_${tag_name}"
   return
}

#****** issue574/hedeby_issue574_cleanup_level() *******************************
#  NAME
#     hedeby_issue574_cleanup_level() -- clean up level function
#
#  SYNOPSIS
#     hedeby_issue574_cleanup_level { }
#
#  FUNCTION
#     remove created services and clean up hedeby_issue574_ctx variable
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#*******************************************************************************
proc hedeby_issue574_cleanup_level {} {
   upvar #0 hedeby_issue574_ctx ctx

   #remove the temp directories
   set res [remote_delete_directory "$ctx(java_build_host)" "$ctx(tmp_dir_tar)"]
   if { $res != 0 } {
      ts_log_warning "Failed to cleanup tmp directory: $ctx(tmp_dir_tar) on host: $ctx(java_build_host)"
   }
   unset res
   #tmp dir for testing zip src
   set res [remote_delete_directory "$ctx(java_build_host)" "$ctx(tmp_dir_zip)"]
   if { $res != 0 } {
      ts_log_warning "Failed to cleanup tmp directory: $ctx(tmp_dir_zip) on host: $ctx(java_build_host)"
   }
   unset ctx
   return
}


# ------------------------------------------------------------------------------
# here the tests begin ....

#****** issue_574/hedeby_issue574_check *****************************
#  NAME
#     hedeby_issue574_check() -- check if the zip and tar targets can be build
#                                out of the sources
#
#  SYNOPSIS
#     hedeby_issue574_check { }
#
#  FUNCTION
#     this steps test hedeby issue 574:
#     Step 1: We will call ant tar.src target to create sources as tar.gz
#     Step 2: We will call ant zip.src target to create sources as zip
#     Step 3: We will copy generated tar.gz file to temporary location
#     Step 4: We will decompress tar.gz file using gunzip
#     Step 5: We will decompress tar file using gtar
#     Step 6: We will decompress zip file using unzip into temporary location.
#     Step 7: We will call ant dist target on sources that were untarred.
#     Step 8: We will call ant dist target on sources that were unzipped.
#   
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#
#*******************************************************************************
proc hedeby_issue574_check {} {
 
   upvar #0 hedeby_issue574_ctx ctx
   global hedeby_config CHECK_OUTPUT CHECK_USER

   # call ant targets zip.src and tar.src
    report_create "hedeby_tar_src" report1 1 0
    report_add_message report1 "java build host is \"$ctx(java_build_host)\""

   # The timeout occurs if targets does not output anything for 5 minutes
   set timeout 900
   set ant_options ""
   # --------------------------------------------------------------------------
   ts_log_heading "Step 1: We will call ant tar.src target to create sources as tar.gz"  
   # --------------------------------------------------------------------------
   set res [hedeby_build $ctx(java_build_host) "tar.src" report1 $ant_options $timeout]
   if { $res != 0 } {
      report_add_message report1 "Hedeby tar.src failed"
      report_finish report1 -1
      ts_log_severe "Step 1: Hedeby ant tar.src failed"
      return
   } else {
      report_add_message report1 "Hedeby tar.src successfully executed"
      report_finish report1 0
   }
   #tar generated successfully now generate zip
    report_create "hedeby_zip_src" report2 1 0
    report_add_message report2 "java build host is \"$ctx(java_build_host)\""
    # --------------------------------------------------------------------------
   ts_log_heading "Step 2: We will call ant zip.src target to create sources as zip"  
   # --------------------------------------------------------------------------
    set res1 [hedeby_build $ctx(java_build_host) "zip.src" report2 $ant_options $timeout]
   if { $res1 != 0 } {
      report_add_message report2 "Hedeby zip.src failed"
      report_finish report2 -1
      ts_log_severe "Step 2: Hedeby ant zip.src failed"
      return
   } else {
      report_add_message report2 "Hedeby zip.src successfully executed"
      report_finish report2 0
   }
   #zip generated successfully
   
   #now copy files to corresponding temp locations on $java_build_host
   # --------------------------------------------------------------------------
   ts_log_heading "Step 3: We will copy generated tar.gz file: \"$ctx(tar_file)\" to temporary location"
   # --------------------------------------------------------------------------
   start_remote_prog $ctx(java_build_host) $CHECK_USER "cp" "$ctx(tar_file) $ctx(tmp_dir_tar)" res
   if { $res != 0 } {
      ts_log_severe "Step 3: Failed to copy tar source: $ctx(tar_file) into tmp directory: $ctx(tmp_dir_tar) on host: $ctx(java_build_host) as user $CHECK_USER"
      return -1
   }
   unset res
   # --------------------------------------------------------------------------
   ts_log_heading "Step 4: We will decompress tar.gz file: \"$ctx(gz_name)\" using gunzip"
   # --------------------------------------------------------------------------
   set res [hedeby_gunzip "$ctx(gz_name)" "$ctx(java_build_host)" "$CHECK_USER"]
   if { $res != 0 } {
      ts_log_severe "Step 4: Failed to gunzip tar source: $ctx(gz_name) on host: $ctx(java_build_host) as user $CHECK_USER"
      return -1
   }
   unset res
   # --------------------------------------------------------------------------
   ts_log_heading "Step 5: We will decompress tar file: \"$ctx(tar_name)\" using gtar"
   # --------------------------------------------------------------------------
   set res [hedeby_guntar "$ctx(tar_name)" "$ctx(tmp_dir_tar)" "$ctx(java_build_host)" "$CHECK_USER"]
   if { $res != 0 } {
      ts_log_severe "Step 5: Failed to untar tar source: $ctx(tar_name) on host: $ctx(java_build_host) as user $CHECK_USER"
      return -1
   }
   unset res
   # --------------------------------------------------------------------------
   ts_log_heading "Step 6: We will decompress zip file: \"$ctx(zip_file)\" using unzip into temporary location."
   # --------------------------------------------------------------------------
   #unpack the source zip
   set res [hedeby_unzip "$ctx(zip_file)" $ctx(tmp_dir_zip) $ctx(java_build_host)]
   if { $res != 0 } {
      ts_log_severe "Step 6: Failed to unzip zip source: $ctx(zip_file) into tmp directory: $ctx(tmp_dir_zip) on host: $ctx(java_build_host) as user $CHECK_USER"
      return -1
   }
   unset res
   
   #call ant dist on both locations 
   report_create "hedeby_dist_tar" report3 1 0
   report_add_message report3 "java build host is \"$ctx(java_build_host)\""
   # --------------------------------------------------------------------------
   ts_log_heading "Step 7: We will call ant dist target on sources from location: \"$ctx(tar_dist)\" "
   # -------------------------------------------------------------------------- 
   set res [hedeby_build $ctx(java_build_host) "dist" report1 $ant_options $timeout $ctx(tar_dist)]
   if { $res != 0 } {
      report_add_message report3 "Hedeby ant dist on \"tarred\" sources failed"
      report_finish report3 -1
      ts_log_severe "Step 7: Hedeby ant dist on \"tarred\" sources failed"
      return
   } else {
      report_add_message report3 "Hedeby ant dist on \"tarred\" sources successfully executed"
      report_finish report3 0
   }
   unset res
   #tar sources are built successfully now build zip
   report_create "hedeby_dist_zip" report4 1 0
   report_add_message report4 "java build host is \"$ctx(java_build_host)\""
   # --------------------------------------------------------------------------
   ts_log_heading "Step 8: We will call ant dist target on sources from location: \"$ctx(zip_dist)\" "
   # -------------------------------------------------------------------------- 
   set res [hedeby_build $ctx(java_build_host) "dist" report4 $ant_options $timeout $ctx(zip_dist)]
   if { $res != 0 } {
      report_add_message report4 "Hedeby ant dist on \"zipped\" sources failed"
      report_finish report4 -1
      ts_log_severe "Step 8: Hedeby ant dist on \"zipped\" sources failed"
      return
   } else {
      report_add_message report4 "Hedeby ant dist on \"zipped\" sources successfully executed"
      report_finish report4 0
   }
   #the end of test is reached - success :)
  return 0
  
}


