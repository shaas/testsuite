#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2009 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
# ---START OF TEST INFO SECTION-------------------------------------------------------------------------------
# "no" - we don't need root acess / "yes" - we need root access:
set check_root_access_needs    "yes"              

# name of the test (best practice: use the name of the test directory)
set check_name                 "issue_640"

# specifiy the test categories
# (VERIFIED if the test is QA inspected)
# other possible categories: COMPATIBILITY CSP INSTALL L10N MODULE PERFORMANCE SYSTEM VERIFIED
set check_category             "SYSTEM VERIFIED" 

# define the highest check level
set check_highest_level        1

# a sort check description for each runlevel:
# (runlevel 0 is mandatory)
set check_description(0)       "Checks that the managed host installation works if the CA admin user is unknown" ;# runlevel 0
set check_description(1)       "Checks that the managed host installation works if a owner of a jvm is unknown" ;# runlevel 1

# specify check dependencies
# (name all tests which have to run sucessfull before this test can run)
set check_needs                "hedeby_install"                  

# The name of the init level procedure for this test. The procedure is defined
# in the test file. 
set check_init_level_procedure "hedeby_issue_640_init_level"

# define tests setup and cleanup function. The functions are called for each
# runlevel. Before testsuite is starting with calling all check_functions
# the setup function is called. After finishing all check_functions the 
# cleanup function is called.
#
# The aim of the setup/cleanup functions is that the test should restore
# all modifications, even when the test failes completely.
set check_setup_level_function "hedeby_issue_640_setup_level"
set check_cleanup_level_function "hedeby_issue_640_cleanup_level"


# The check_functions array tells the testsuite which check functions should
# be called (and in which order)
# All check_functions should be defined at least in a file (*.tcl) in the
# check directory.
set check_functions            ""
lappend check_functions "hedeby_issue_640_check"


# ---END OF TEST INFO SECTION-------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------
# here the tests begin ....
global hedeby_issue_640_ctx

# (the init level procedure defines which runlevels are supported)
# short  (   0 min - 15 min / run level   0 -  99 )"
# medium (  16 min -  1 h   / run level 100 - 199 )"
# long   (   1 h   -  4 h   / run level 200 - 299 )"
# day    ( > 4 h   - 24 h   / run level 300 - 399 )"
# week   ( >24 h            / run level 400 - 499 )"

#****** /issue_640_init_level() ***************************
#  NAME
#     hedeby_issue_640_init_level() -- 
#
#  SYNOPSIS
#     hedeby_issue_640_init_level { } 
#
#*******************************************************************************
proc hedeby_issue_640_init_level {} {
  global CHECK_ACT_LEVEL

  switch -- $CHECK_ACT_LEVEL {
      "0" { return 0 }
      "1" { return 0 }
      default { return -1 } 
  }
}

#****** hedeby_issue_640_setup_level() ********************************
#  NAME
#     hedeby_issue_640_setup_level() -- 
#
#  SYNOPSIS
#     hedeby_issue_640_setup_level { } 
#
#  FUNCTION
#
#*******************************************************************************
proc hedeby_issue_640_setup_level {} {

   global CHECK_ACT_LEVEL
   upvar #0 hedeby_issue_640_ctx this

   set this(cleanup_actions) {}
   set this(unknown_user) "humple_pump" 
   set this(managed_host) [pick_random [get_all_spare_pool_resources]]

   set this(org_owner) [get_hedeby_admin_user]
   set this(jvm)          "cs_vm"

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         # -------------------------------------------------------------------------
         ts_log_heading "Set the name of the CA admin user to '$this(unknown_user)'"
         # -------------------------------------------------------------------------
         if { [hedeby_set_ca_admin_user $this(unknown_user)] != 0 } {
            return
         }
         lappend this(cleanup_actions) "reset_ca_config"
      }

      "1" {
         # -------------------------------------------------------------------------
         ts_log_heading "Change the owner of jvm $this(jvm)' to '$this(unknown_user)'"
         # -------------------------------------------------------------------------
         if { [hedeby_change_jvm_owner $this(jvm) $this(unknown_user)] != 0 } {
            return 
         }
         lappend this(cleanup_actions) "reset_jvm_owner"
      }
      default {
         ts_log_severe "Unsuported run level '$CHECK_ACT_LEVEL'"
      }
   }
}

#****** hedeby_issue_640_cleanup_level() ******************************
#  NAME
#     hedeby_issue_640_cleanup_level() -- cleanup test function 
#
#  SYNOPSIS
#     hedeby_issue_640_cleanup_level { } 
#
#  FUNCTION
#
#     Executes the cleanup actions of this test
#
#**********************************************************************
proc hedeby_issue_640_cleanup_level {} {
   upvar #0 hedeby_issue_640_ctx this

   set doReset 0 
   if { [lsearch $this(cleanup_actions) "reset_ca_config"] >= 0 } {
      if {[hedeby_set_ca_admin_user $this(org_owner) ] != 0 } {
         ts_log_fine "Could not reset the ca configuration"
         set doReset 1
      }
   } 

   if { $doReset == 0 && [lsearch $this(cleanup_actions) "reset_jvm_owner"] >= 0 } {
      if {[hedeby_change_jvm_owner $this(jvm) $this(org_owner) ] != 0 } {
         ts_log_fine "Could not reset the owner of jvm '$this(jvm)'"
         set doReset 1
      }
   } 

   if { $doReset == 0 && [lsearch $this(cleanup_actions) "install_managed_host"] >= 0 } {
      if {[hedeby_install_managed_hosts $this(managed_host)] != 0} {
         ts_log_fine "Could not install managed host $this(managed_host)"
         set doReset 1
      }
   } elseif { $doReset == 0 } {
      # the managed host IS already installed
      # => reinstall with correct parameters, ie. ca/owner is already reset.
      #    For reinstall we need to shutdown and uninstall first
      shutdown_hedeby_hosts "managed" $this(managed_host) [get_hedeby_admin_user]
      hedeby_uninstall_managed_host $this(managed_host)
      if {[hedeby_install_managed_hosts $this(managed_host)] != 0} {
         ts_log_fine "Could not reinstall managed host $this(managed_host)"
         set doReset 1
      }
   }

   if { $doReset == 0 && [lsearch $this(cleanup_actions) "startup_managed_host"] >= 0 } {
      set opts(user) [get_hedeby_startup_user]
      set opts(host) $this(managed_host)
      sdmadm_command_opt "suj" opts
      unset opts
      if { $prg_exit_state != 0 } {
         ts_log_fine "Could not startup the managed host '$this(managed_host)'"
         set doReset 1
      }
   }
   if { $doReset == 1 } {
      reset_hedeby 1
   } 
   unset this
}


#****** hedeby_issue_640_check() ********************************
#  NAME
#     hedeby_issue_640_check() -- 
#
#  SYNOPSIS
#     hedeby_issue_640_check { } 
#
#  FUNCTION
#     1.  Set in the CA component config the adminuser attribute to an unknown user
#     1.1 Do *not* update the CA component
#     2.  Change in the global config the user of cs_vm and rp_vm to an unknown user
#     2.1 Do *not* restart the jvms
#     3. Perform the managed_host installation it must work
#     4. Check that only the daemon key stores for executor_vm has been copied to the
#        managed host
#     5. reset the configurations
#
#*******************************************************************************
proc hedeby_issue_640_check {} {
   upvar #0 hedeby_issue_640_ctx this
   
   # ---------------------------------------------------------------------------
   ts_log_heading "Shutdown jvms on managed host '$this(managed_host)'"
   # ---------------------------------------------------------------------------
   if { [shutdown_hedeby_hosts "managed" $this(managed_host) [get_hedeby_admin_user]] != 0 } {
      return
   }
   # we always need to startup the managed host during cleanup
   lappend this(cleanup_actions) "startup_managed_host"

   # ---------------------------------------------------------------------------
   ts_log_heading "Uninstall managed host '$this(managed_host)'"
   # ---------------------------------------------------------------------------
   if {[hedeby_uninstall_managed_host $this(managed_host)] != 0} {
      ts_log_severe "Could not uninstall managed host '$this(managed_host)'"
      return
   }

   # ---------------------------------------------------------------------------
   ts_log_heading "Perform a managed host installation on '$this(managed_host)'"
   # ---------------------------------------------------------------------------
   # The managed host installation must work even if the users from the ca
   # config and the global config do not exist
   if { [hedeby_install_managed_hosts $this(managed_host)] != 0 } {
      global CHECK_ACT_LEVEL
      set    msg "It seems that we ran into issue 640 again!!!!\n"
      append msg "=============================================\n"
      append msg "\n"
      append msg "managed host installation"

      switch -- $CHECK_ACT_LEVEL {
         "0" { append msg " with an unknown CA admin user" }
         "1" { append msg " with an unknown jvm owner" }
      }
      append msg " failed\n"
      ts_log_severe $msg
      lappend this(cleanup_actions) "install_managed_host"
   }

}


#****** hedeby_set_ca_admin_user() ******************************
#  NAME
#     hedeby_set_ca_admin_user() -- set the name of the CA admin user 
#
#  SYNOPSIS
#     hedeby_set_ca_admin_user { ca_admin_user } 
#
#  FUNCTION
#     Sets the name of the admin in the CA configuration
#
#  INPUTS
#     ca_admin_user - Name of the CA admin user
#
#  RESULT
#     exit state of the 'sdmadm mc' command
#
#*******************************************************************************
proc hedeby_set_ca_admin_user { ca_admin_user } {

   set error_text ""
   set ispid [hedeby_mod_setup_opt "mc -c ca" error_text]
   
   set sequence {}
   lappend sequence "[format "%c" 27]" ;# ESC
   # .\{-\} is the non greedy version of .*
   lappend sequence ":%s#adminUser=\['\"\].\\\{-\}\['\"\]#adminUser='$ca_admin_user'#\n"
   
   hedeby_mod_sequence $ispid $sequence error_text
   hedeby_mod_cleanup $ispid error_text
  
   if { $prg_exit_state != 0 } {
       set msg    "Could not change the name of the admin user in the CA component configuration\n"
       append msg "The 'sdmadm mc -c ca' command failed with the following error message:\n"
       append msg "$error_text"
       ts_log_severe $msg
   }
   return $prg_exit_state
}

#****** hedeby_change_jvm_owner() ******************************
#  NAME
#     hedeby_change_jvm_owner() --  changes the owner a jvm
#
#  SYNOPSIS
#     hedeby_change_jvm_owner { jvm new_owner } 
#
#  FUNCTION
#     Changes the owner of a jvm
#
#  INPUTS
#     jvm       - Name of the jvm
#     new_owner - Name of the new owner
#
#  RESULT
#     exit state of the 'sdmadm mgc' command
#
#*******************************************************************************
proc hedeby_change_jvm_owner { jvm new_owner } {

   global hedeby_config

   set error_text ""
   set ispid [hedeby_mod_setup_opt "mgc" error_text]

   if { $jvm == "cs_vm" } {
     set port $hedeby_config(hedeby_cs_port)
   } else {
     set port $hedeby_config(hedeby_user_jvm_port)
   }
   
   set sequence {}
   lappend sequence "[format "%c" 27]" ;# ESC

   # replace <common:jvm*name="$jvm"*> with the xml tag containing the new owner 
   #  \\_\[^>\] matches every character expect > including new line
   lappend sequence ":%s/<common:jvm\\_\[^>\]*name=\['\"\]$jvm\['\"\]\\_\[^>\]*>"
   lappend sequence "/<common:jvm port='$port' name='$jvm' user='$new_owner'>/\n"
   
   hedeby_mod_sequence $ispid $sequence error_text
   hedeby_mod_cleanup $ispid error_text
  
   if { $prg_exit_state != 0 } {
       set msg    "Could not change the owner of the jvms\n"
       append msg "The 'sdmadm mgc' command failed with the following error message:\n"
       append msg "$error_text"
       ts_log_severe $msg
   }
   return $prg_exit_state
}

