#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE

global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
set check_root_access_needs      "yes"
set check_name                   "file_permissions"
set check_category               "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)         "check hedeby install file permissions after installation"
set check_needs                  "hedeby_install"
set check_highest_level          0 
set check_init_level_procedure   "file_permissions_init_level"
set check_functions              {}  ;# functions to call (in order)
set check_setup_function "file_permissions_setup"
set check_cleanup_function "file_permissions_cleanup"

lappend check_functions "hedeby_check_master_host_file_permissions"
lappend check_functions "hedeby_check_managed_host_file_permissions"



# ---------------------------------------------------------------------------------
# here the tests begin ....

global install_current_cluster_config

proc file_permissions_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }
   return -1
}

proc file_permissions_setup {} {
   global install_current_cluster_config
   global install_user

   set install_current_cluster_config [get_current_cluster_config_nr]
   set install_user [get_hedeby_startup_user]

   # print out system information:
   ts_log_fine "======================================="
   ts_log_fine "sys_name:          [get_hedeby_system_name]"
   ts_log_fine "installation mode: [get_hedeby_pref_type]"
   ts_log_fine "admin user:        [get_hedeby_admin_user]"
   ts_log_fine "======================================="


}

proc file_permissions_cleanup {} {
   global install_current_cluster_config 

   # set the current cluster config to the one used when starting
   # the test
   set_current_cluster_config_nr $install_current_cluster_config
}



proc hedeby_check_master_host_file_permissions {} {
   global hedeby_config
   set error_text ""
   set ge_master_hosts [get_hedeby_default_services service_names]
   set expected_ge_jvm_hosts {}
   foreach ge_host $ge_master_hosts {
      if { [lsearch -exact $expected_ge_jvm_hosts $ge_host] < 0 } {
         lappend expected_ge_jvm_hosts $ge_host
      }
   }

   ts_log_fine "checking file permissions on master host ..."
   set spool_dir [get_hedeby_local_spool_dir $hedeby_config(hedeby_master_host)]
   set host $hedeby_config(hedeby_master_host)
   set startup_user [get_hedeby_startup_user]
   set admin_user [get_hedeby_admin_user]

   set ignore_path {}
   lappend ignore_path "${spool_dir}/tmp/executor"
   lappend ignore_path "${spool_dir}/tmp/executor/*"
   analyze_directory_structure $host $startup_user $spool_dir spool_directories spool_files permissions $ignore_path

   set expected_dirs {}
   lappend expected_dirs "log"
   lappend expected_dirs "run"
   lappend expected_dirs "security"
   lappend expected_dirs "security/ca"
   lappend expected_dirs "security/ca/ca_top"
   lappend expected_dirs "security/ca/ca_top/certs"
   lappend expected_dirs "security/ca/ca_top/crl"
   lappend expected_dirs "security/ca/ca_top/newcerts"
   lappend expected_dirs "security/ca/ca_top/usercerts"
   lappend expected_dirs "security/ca/ca_top/usercerts/$startup_user"
   if { $startup_user != $admin_user } {
      lappend expected_dirs "security/ca/ca_top/usercerts/$admin_user"
   }
   lappend expected_dirs "security/ca/ca_local_top"
   lappend expected_dirs "security/ca/ca_local_top/userkeys"
   lappend expected_dirs "security/ca/ca_local_top/userkeys/$startup_user"
   if { $startup_user != $admin_user } {
      lappend expected_dirs "security/ca/ca_local_top/userkeys/$admin_user"
   }
   lappend expected_dirs "security/ca/ca_local_top/daemons"
   lappend expected_dirs "security/ca/ca_local_top/daemons/cs_vm"
   lappend expected_dirs "security/ca/ca_local_top/daemons/executor_vm"
   lappend expected_dirs "security/ca/ca_local_top/daemons/rp_vm"
   lappend expected_dirs "security/ca/ca_local_top/private"
   lappend expected_dirs "security/users"
   lappend expected_dirs "security/daemons"
   lappend expected_dirs "spool"
   lappend expected_dirs "spool/cs"
   lappend expected_dirs "spool/cs/component"
   lappend expected_dirs "spool/cs/active_component"
   lappend expected_dirs "spool/cs/active_jvm"
   lappend expected_dirs "spool/cs/module"
   lappend expected_dirs "spool/cs/module/ge-service-adapter"
   lappend expected_dirs "spool/cs/module/ge-service-adapter/complex_mapping"
   lappend expected_dirs "spool/resource_provider"
   lappend expected_dirs "spool/resource_provider/resource_provider"
   lappend expected_dirs "spool/resource_provider/resource_provider/orders"
   lappend expected_dirs "spool/resource_provider/spare_pool"
   foreach service $service_names(services) {
      lappend expected_dirs "spool/resource_provider/$service"
   }
   lappend expected_dirs "spool/spare_pool"
   lappend expected_dirs "spool/reporter"
   lappend expected_dirs "tmp"
   lappend expected_dirs "tmp/ca"

   ts_log_fine "checking directories ..."
   if { [llength $spool_directories] != [llength $expected_dirs] } {
      append error_text "expected dirs length ([llength $expected_dirs]) != found dirs length ([llength $spool_directories])\n"
      append error_text "Missing dirs:\n"
      foreach dir $expected_dirs {
         if { [lsearch -exact $spool_directories "${spool_dir}/$dir"] < 0 } {
            append error_text "   $dir\n"
         }
      }
      append error_text "Not expected dirs:\n"
      set expected_dirs_helper {}
      foreach dir $expected_dirs {
         lappend expected_dirs_helper "${spool_dir}/$dir"
      }
      foreach dir $spool_directories {
         if { [lsearch -exact $expected_dirs_helper $dir] < 0 } {
            append error_text "   $dir\n"
         }
      }
   }

   set expected_files {}
   lappend expected_files "log/cs_vm-0.log.lck"
   lappend expected_files "log/cs_vm-0.log"
   lappend expected_files "log/cs_vm.stdout"
   lappend expected_files "log/cs_vm.stderr"
   lappend expected_files "log/executor_vm-0.log.lck"
   lappend expected_files "log/executor_vm-0.log"
   lappend expected_files "log/executor_vm.stdout"
   lappend expected_files "log/executor_vm.stderr"
   lappend expected_files "log/rp_vm-0.log.lck"
   lappend expected_files "log/rp_vm-0.log"
   lappend expected_files "log/rp_vm.stdout"
   lappend expected_files "log/rp_vm.stderr"
   lappend expected_files "logging.properties"
   lappend expected_files "run/cs_vm@$hedeby_config(hedeby_master_host)*"
   lappend expected_files "run/executor_vm@$hedeby_config(hedeby_master_host)*"
   lappend expected_files "run/rp_vm@$hedeby_config(hedeby_master_host)*"
   lappend expected_files "security/ca/ca_top/certs/cert.pem"
   lappend expected_files "security/ca/ca_top/newcerts/01.pem"
   lappend expected_files "security/ca/ca_top/newcerts/02.pem"
   lappend expected_files "security/ca/ca_top/newcerts/03.pem"
   lappend expected_files "security/ca/ca_top/newcerts/04.pem"
   lappend expected_files "security/ca/ca_top/newcerts/05.pem"
   lappend expected_files "security/ca/ca_top/newcerts/06.pem"
   lappend expected_files "security/ca/ca_top/serial"
   lappend expected_files "security/ca/ca_top/index.txt"
   lappend expected_files "security/ca/ca_top/dn.info"
   lappend expected_files "security/ca/ca_top/cacert.pem"
   lappend expected_files "security/ca/ca_top/index.txt.attr"
   lappend expected_files "security/ca/ca_top/index.txt.attr.old"
   lappend expected_files "security/ca/ca_top/serial.old"
   lappend expected_files "security/ca/ca_top/index.txt.old"
   lappend expected_files "security/ca/ca_top/usercerts/$startup_user/cert.pem"
   if { $startup_user != $admin_user } {
      lappend expected_files "security/ca/ca_top/usercerts/$admin_user/cert.pem"
   }
   lappend expected_files "security/ca/ca_local_top/userkeys/$startup_user/rand.seed"
   lappend expected_files "security/ca/ca_local_top/userkeys/$startup_user/key.pem"
   lappend expected_files "security/ca/ca_local_top/userkeys/$startup_user/req.pem"
   lappend expected_files "security/ca/ca_local_top/userkeys/$startup_user/cert.pem"
   if { $startup_user != $admin_user } {
      lappend expected_files "security/ca/ca_local_top/userkeys/$admin_user/rand.seed"
      lappend expected_files "security/ca/ca_local_top/userkeys/$admin_user/key.pem"
      lappend expected_files "security/ca/ca_local_top/userkeys/$admin_user/req.pem"
      lappend expected_files "security/ca/ca_local_top/userkeys/$admin_user/cert.pem"
   }
   lappend expected_files "security/ca/ca_local_top/daemons/cs_vm/rand.seed"
   lappend expected_files "security/ca/ca_local_top/daemons/cs_vm/key.pem"
   lappend expected_files "security/ca/ca_local_top/daemons/cs_vm/req.pem"
   lappend expected_files "security/ca/ca_local_top/daemons/cs_vm/cert.pem"
   lappend expected_files "security/ca/ca_local_top/daemons/rp_vm/rand.seed"
   lappend expected_files "security/ca/ca_local_top/daemons/rp_vm/key.pem"
   lappend expected_files "security/ca/ca_local_top/daemons/rp_vm/req.pem"
   lappend expected_files "security/ca/ca_local_top/daemons/rp_vm/cert.pem"
   lappend expected_files "security/ca/ca_local_top/daemons/executor_vm/rand.seed"
   lappend expected_files "security/ca/ca_local_top/daemons/executor_vm/key.pem"
   lappend expected_files "security/ca/ca_local_top/daemons/executor_vm/req.pem"
   lappend expected_files "security/ca/ca_local_top/daemons/executor_vm/cert.pem"
   lappend expected_files "security/ca/ca_local_top/private/rand.seed"
   lappend expected_files "security/ca/ca_local_top/private/cakey.pem"
   lappend expected_files "security/ca/ca_local_top/private/key.pem"
   lappend expected_files "security/ca/ca_local_top/private/req.pem"
   lappend expected_files "security/ca/ca_local_top/lock"
   lappend expected_files "security/users/$admin_user.keystore"
   lappend expected_files "security/daemons/cs_vm.keystore"
   lappend expected_files "security/daemons/executor_vm.keystore"
   lappend expected_files "security/daemons/rp_vm.keystore"
   lappend expected_files "security/java.policy"
   lappend expected_files "security/jaas.config"
   foreach service $service_names(services) {
      foreach res $service_names(execd_hosts,$service) {
         lappend expected_files "spool/resource_provider/$service/$res*.srf"
      }
   }
   foreach res [get_all_spare_pool_resources] {
      lappend expected_files "spool/resource_provider/spare_pool/$res*.srf"
   }
   lappend expected_files "spool/cs/component/executor.xml"
   lappend expected_files "spool/cs/component/ca.xml"
   lappend expected_files "spool/cs/component/resource_provider.xml"
   lappend expected_files "spool/cs/component/spare_pool.xml"
   foreach ge_host $expected_ge_jvm_hosts {
      foreach service $service_names(service,$ge_host) {
         ts_log_fine "expecting component configuration for service \"$service\" on host $ge_host"
         lappend expected_files "spool/cs/component/$service.xml"
      }
   }
   lappend expected_files "spool/cs/active_component/cs_vm@$hedeby_config(hedeby_master_host)*.xml"
   lappend expected_files "spool/cs/active_component/executor@$hedeby_config(hedeby_master_host)*.xml"
   lappend expected_files "spool/cs/active_component/ca@$hedeby_config(hedeby_master_host)*.xml"
   lappend expected_files "spool/cs/active_component/executor_vm@$hedeby_config(hedeby_master_host)*.xml"
   lappend expected_files "spool/cs/active_component/rp_vm@$hedeby_config(hedeby_master_host)*.xml"
   lappend expected_files "spool/cs/active_component/spare_pool@$hedeby_config(hedeby_master_host)*.xml"
   lappend expected_files "spool/cs/active_component/resource_provider@$hedeby_config(hedeby_master_host)*.xml"
   lappend expected_files "spool/cs/active_component/reporter@$hedeby_config(hedeby_master_host)*.xml"
   lappend expected_files "spool/cs/module/ge-service-adapter/complex_mapping/default.xml"
   lappend expected_files "spool/cs/component/reporter.xml"
   lappend expected_files "spool/reporter/report-0.log.lck"
   
   set ignore1 {}
   analyze_directory_structure $host $startup_user "${spool_dir}/spool/reporter" spool_directories1 spool_files1 permissions1 $ignore1
   for {set i 0} {$i < 4} {incr i} {
        if { [lsearch -exact $spool_files1 "${spool_dir}/spool/reporter/report-${i}.log"] != -1 } {
            lappend expected_files "spool/reporter/report-${i}.log"
        }
   }

   foreach managed_host [get_all_movable_resources] {
      lappend expected_files "spool/cs/active_component/executor@$managed_host*.xml"
      lappend expected_files "spool/cs/active_component/executor_vm@$managed_host*.xml"
   }
   
   foreach ge_host $expected_ge_jvm_hosts {
      ts_log_fine "expecting active component jvm \"rp_vm\" on host \"$ge_host\""
      lappend expected_files "spool/cs/active_component/rp_vm@$ge_host*.xml"
      foreach service $service_names(service,$ge_host) {
         ts_log_fine "expecting active component for service \"$service\" on host \"$ge_host\""
         lappend expected_files "spool/cs/active_component/$service@$ge_host*.xml"
      }
   }

   



   lappend expected_files "spool/cs/active_jvm/cs_vm@$hedeby_config(hedeby_master_host)*.xml"
   lappend expected_files "spool/cs/active_jvm/rp_vm@$hedeby_config(hedeby_master_host)*.xml"
   lappend expected_files "spool/cs/active_jvm/executor_vm@$hedeby_config(hedeby_master_host)*.xml"
   foreach managed_host [get_all_movable_resources] {
      lappend expected_files "spool/cs/active_jvm/executor_vm@$managed_host*.xml"
   }

   foreach jvm_host $expected_ge_jvm_hosts {
      ts_log_fine "expecting active jvm \"rp_vm\" on host \"$jvm_host\""
      lappend expected_files "spool/cs/active_jvm/rp_vm@$jvm_host*.xml"
   }
   foreach resource_host [get_all_spare_pool_resources] {
      lappend expected_files "spool/spare_pool/$resource_host*"
   }

   lappend expected_files "spool/cs/global.xml"
   lappend expected_files "spool/cs/security.xml"

   ts_log_fine "checking files ..."
   if { [llength $spool_files] != [llength $expected_files] } {
      append error_text "\nExpected files length ([llength $expected_files]) != found files length ([llength $spool_files])\n"
      append error_text "Missing files:\n"
      foreach file $expected_files {
         if { [lsearch $spool_files "${spool_dir}/$file"] < 0 } {
            append error_text "   $file\n"
         }
      }
      append error_text "Not expected files:\n"
      set expected_files_helper {}
      foreach file $spool_files {
         set match 0
         foreach fileb $expected_files {
            if { [string match "${spool_dir}/$fileb" $file] } {
               set match 1
               break
            }
         }
         if { $match == 0 }  {
            append error_text "   $file\n"
         }
      }
   }

   set default_owner [get_hedeby_admin_user]
   set default_perms "-rw-r--r--"


   set user_rw_perms "-rw-------"
   set user_rw_match {}
   lappend user_rw_match "*.pem"
   lappend user_rw_match "serial*"
   lappend user_rw_match "index.*"
   lappend user_rw_match "rand.seed"
   lappend user_rw_match "*.keystore"
   set user_rw_ignore_match {}
   lappend user_rw_ignore_match "security/ca/ca_top/certs/cert.pem"
   lappend user_rw_ignore_match "security/ca/ca_top/cacert.pem"
   lappend user_rw_ignore_match "security/ca/ca_top/usercerts/$startup_user/cert.pem"
   if { $startup_user != $admin_user } {
      lappend user_rw_ignore_match "security/ca/ca_top/usercerts/$admin_user/cert.pem"
   }


   set startup_user_owner [get_hedeby_startup_user]
   set startup_user_match {}
   lappend startup_user_match "log/executor_vm*"
   lappend startup_user_match "run/executor_vm*"
   lappend startup_user_match "security/ca/ca_local_top/userkeys/$startup_user_owner/*"
   lappend startup_user_match "security/ca/ca_local_top/lock"
   lappend startup_user_match "security/daemons/executor_vm.keystore"
   foreach expect_file $expected_files {
      set expected_owner($expect_file) $default_owner
      set expected_perms($expect_file) $default_perms
 
      set tailed_file [file tail $expect_file]

      set ignore 0
      foreach igmatch $user_rw_ignore_match {
         if {[string match $igmatch $expect_file]} {
            ts_log_finer "expect $default_perms permissions for file: $expect_file"
            set ignore 1 
            break
         }
      }
      if { $ignore == 0 } {
         foreach match $user_rw_match {
            if {[string match $match $tailed_file]} {
               set expected_perms($expect_file) $user_rw_perms
               ts_log_fine "expect $user_rw_perms permissions for file: $expect_file"
            }
         }
      }

      foreach match $startup_user_match {
         if {[string match $match $expect_file]} {
            set expected_owner($expect_file) $startup_user_owner
            ts_log_fine "expect owner $startup_user_owner for file: $expect_file"
         } else {
            ts_log_finer "expect owner $default_owner for file: $expect_file"
         }
      }
   }
   set permission_errors ""
   set owner_errors ""
   foreach expect_file $expected_files {
      set file "$spool_dir/$expect_file"

      if {[info exists permissions($file,perm)]} {
         set perm  $permissions($file,perm)
         set owner $permissions($file,owner)
         set group $permissions($file,group)
      } else {
         # here we have to find the file with string matching
         set perm "n.a."
         set owner "n.a."
         set group "n.a."
         set match 0
         set match_file ""
         foreach sp_file $spool_files {
            if {[string match $file $sp_file]} {
               incr match 1
               set match_file $sp_file
            }
         }
         if { $match != 1 }  {
            append error_text "   $file matches \"$match\" times!\n"
         } else {
            set perm  $permissions($match_file,perm)
            set owner $permissions($match_file,owner)
            set group $permissions($match_file,group)
         }
      }

      ts_log_finer "permissions of file $expect_file: $perm, $owner, $group"
      if { $perm != $expected_perms($expect_file) } {
         append permission_errors "$expect_file: wrong permissions: \"$perm\" (expected: \"$expected_perms($expect_file)\")\n"
      }
      if { $owner != $expected_owner($expect_file) } {
         append owner_errors "$expect_file: wrong owner: \"$owner\" (expected: \"$expected_owner($expect_file)\")\n"
      }
   }
   if { $owner_errors != "" } {
      append error_text "\nOwnership errors:\n$owner_errors\n"
   }
   if { $permission_errors != "" } {
      append error_text "\nPermission errors:\n$permission_errors\n"
   }

   if { $error_text != "" } {
      add_proc_error "hedeby_check_master_host_file_permissions" -1 $error_text
   }
}


proc hedeby_check_managed_host_file_permissions {} {
   global hedeby_config

   set ge_master_hosts [get_hedeby_default_services service_names]
   set error_text ""
   foreach managed_host [get_all_movable_resources] {

      ts_log_fine "checking file permissions on managed host \"$managed_host\" ..."
      if { [lsearch -exact $ge_master_hosts $managed_host] >= 0 } {
         ts_log_fine "host \"$managed_host\" is GE service host"
         set is_ge_service_host 1
      } else {
         set is_ge_service_host 0
      }
      set host $managed_host
      set spool_dir [get_hedeby_local_spool_dir $host]
      set startup_user [get_hedeby_startup_user]
      set admin_user [get_hedeby_admin_user]

      set ignore_path {}
      lappend ignore_path "${spool_dir}/tmp/executor"
      lappend ignore_path "${spool_dir}/tmp/executor/*"
      analyze_directory_structure $host $startup_user $spool_dir spool_directories spool_files permissions $ignore_path

      set expected_dirs {}
      lappend expected_dirs "log"
      lappend expected_dirs "run"
      lappend expected_dirs "security"
      lappend expected_dirs "security/ca"
      lappend expected_dirs "security/ca/ca_top"
      lappend expected_dirs "security/ca/ca_local_top"
      lappend expected_dirs "security/users"
      lappend expected_dirs "security/daemons"
      lappend expected_dirs "spool"
      lappend expected_dirs "tmp"
      lappend expected_dirs "tmp/ca"

      if {$is_ge_service_host} {
         foreach service_name $service_names(service,$host) {
            ts_log_fine "expecting spool dir for service \"$service_name\""
            lappend expected_dirs "spool/$service_name"
         }
      }

      ts_log_fine "checking directories ..."
      if { [llength $spool_directories] != [llength $expected_dirs] } {
         append error_text "expected dirs length on host \"$host\" ([llength $expected_dirs]) != found dirs length ([llength $spool_directories])\n"
         append error_text "Missing dirs:\n"
         foreach dir $expected_dirs {
            if { [lsearch -exact $spool_directories "${spool_dir}/$dir"] < 0 } {
               append error_text "   $dir\n"
            }
         }
         append error_text "Not expected dirs:\n"
         set expected_dirs_helper {}
         foreach dir $expected_dirs {
            lappend expected_dirs_helper "${spool_dir}/$dir"
         }
         foreach dir $spool_directories {
            if { [lsearch -exact $expected_dirs_helper $dir] < 0 } {
               append error_text "   $dir\n"
            }
         }
      }

      set expected_files {}
      lappend expected_files "log/executor_vm-0.log.lck"
      lappend expected_files "log/executor_vm-0.log"
      lappend expected_files "log/executor_vm.stdout"
      lappend expected_files "log/executor_vm.stderr"
      lappend expected_files "logging.properties"
      lappend expected_files "run/executor_vm@$host*"
      lappend expected_files "security/ca/ca_top/cacert.pem"
      lappend expected_files "security/users/$admin_user.keystore"
      lappend expected_files "security/daemons/cs_vm.keystore"
      lappend expected_files "security/daemons/executor_vm.keystore"
      lappend expected_files "security/daemons/rp_vm.keystore"
      lappend expected_files "security/java.policy"
      lappend expected_files "security/jaas.config"
      if {$is_ge_service_host} {
         ts_log_fine "expecting files for service vm for service(s) \"$service_names(service,$host)\""
         lappend expected_files "log/rp_vm.stdout"
         lappend expected_files "log/rp_vm.stderr"
         lappend expected_files "log/rp_vm-0.log.lck"
         lappend expected_files "log/rp_vm-0.log"
         lappend expected_files "run/rp_vm@$host*"
         foreach service $service_names(service,$host) {
            foreach execd $service_names(execd_hosts,$service) {
               ts_log_fine "expecting files for service \"$service\" execd \"$execd\""
               lappend expected_files "spool/$service/$execd*"
            }
         }
      }

      ts_log_fine "checking files ..."
      if { [llength $spool_files] != [llength $expected_files] } {
         append error_text "\nExpected files length on host \"$host\" ([llength $expected_files]) != found files length ([llength $spool_files])\n"
         append error_text "Missing files:\n"
         foreach file $expected_files {
            if { [lsearch $spool_files "${spool_dir}/$file"] < 0 } {
               append error_text "   $file\n"
            }
         }
         append error_text "Not expected files:\n"
         set expected_files_helper {}
         foreach file $spool_files {
            set match 0
            foreach fileb $expected_files {
               if { [string match "${spool_dir}/$fileb" $file] } {
                  set match 1
                  break
               }
            }
            if { $match == 0 }  {
               append error_text "   $file\n"
            }
         }

      }

      set default_owner [get_hedeby_admin_user]
      set default_perms "-rw-r--r--"


      set user_rw_perms "-rw-------"
      set user_rw_match {}
      lappend user_rw_match "*.pem"
      lappend user_rw_match "serial*"
      lappend user_rw_match "index.*"
      lappend user_rw_match "rand.seed"
      lappend user_rw_match "*.keystore"
      set user_rw_ignore_match {}
      lappend user_rw_ignore_match "security/ca/ca_top/certs/cert.pem"
      lappend user_rw_ignore_match "security/ca/ca_top/cacert.pem"


      set startup_user_owner [get_hedeby_startup_user]
      set startup_user_match {}
      lappend startup_user_match "log/executor_vm*"
      lappend startup_user_match "run/executor_vm*"
      lappend startup_user_match "security/ca/ca_local_top/userkeys/$startup_user_owner/*"
      lappend startup_user_match "security/ca/ca_local_top/lock"
      lappend startup_user_match "security/daemons/executor_vm.keystore"
      lappend startup_user_match "security/ca/ca_top/cacert.pem"
      
      foreach expect_file $expected_files {
         set expected_owner($expect_file) $default_owner
         set expected_perms($expect_file) $default_perms
    
         set tailed_file [file tail $expect_file]

         set ignore 0
         foreach igmatch $user_rw_ignore_match {
            if {[string match $igmatch $expect_file]} {
               set ignore 1 
               break
            }
         }
         if { $ignore == 0 } {
            foreach match $user_rw_match {
               if {[string match $match $tailed_file]} {
                  set expected_perms($expect_file) $user_rw_perms
                  ts_log_fine "expect $user_rw_perms permissions for file: $expect_file"
               }
            }
         }

         foreach match $startup_user_match {
            if {[string match $match $expect_file]} {
               set expected_owner($expect_file) $startup_user_owner
               ts_log_fine "expect owner $startup_user_owner for file: $expect_file"
            } else {
               ts_log_finer "expect owner $default_owner for file: $expect_file"
            }
         }
      }
      set permission_errors ""
      set owner_errors ""
      foreach expect_file $expected_files {
         set file "$spool_dir/$expect_file"

         if {[info exists permissions($file,perm)]} {
            set perm  $permissions($file,perm)
            set owner $permissions($file,owner)
            set group $permissions($file,group)
         } else {
            # here we have to find the file with string matching
            set perm "n.a."
            set owner "n.a."
            set group "n.a."
            set match 0
            set match_file ""
            foreach sp_file $spool_files {
               if {[string match $file $sp_file]} {
                  incr match 1
                  set match_file $sp_file
               }
            }
            if { $match != 1 }  {
               append error_text "   $file matches \"$match\" times!\n"
            } else {
               set perm  $permissions($match_file,perm)
               set owner $permissions($match_file,owner)
               set group $permissions($match_file,group)
            }
         }
         ts_log_finer "permissions of file $expect_file: $perm, $owner, $group"

         if { $perm != $expected_perms($expect_file) } {
            append permission_errors "$expect_file: wrong permissions: \"$perm\" (expected: \"$expected_perms($expect_file)\")\n"
         }
         if { $owner != $expected_owner($expect_file) } {
            append owner_errors "$expect_file: wrong owner: \"$owner\" (expected: \"$expected_owner($expect_file)\")\n"
         }
      }
      if { $owner_errors != "" } {
         append error_text "\nOwnership errors on host \"$host\":\n$owner_errors\n"
      }
      if { $permission_errors != "" } {
         append error_text "\nPermission errors on host \"$host\":\n$permission_errors\n"
      }
   }
   if { $error_text != "" } {
      add_proc_error "hedeby_check_managed_host_file_permissions" -1 $error_text
   }
}




