#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
set check_root_access_needs    "yes"
set check_name                 "dummy_test"
set check_category             "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)       "dummy testsuite integration test"
set check_needs                ""                  
set check_init_level_procedure "dummy_test_init_level"
set check_functions            ""   
set check_highest_level        0

set check_setup_function "dummy_test_setup"
set check_cleanup_function "dummy_test_cleanup"

lappend check_functions "dummy_test_check"

# ---------------------------------------------------------------------------------
# here the tests begin ....
global dummy_test_current_cluster_config


proc dummy_test_init_level {} {
  global CHECK_ACT_LEVEL

  if { $CHECK_ACT_LEVEL == 0 } {
     return 0
  }
  return -1
}

proc dummy_test_setup {} {
   global CHECK_OUTPUT
   global dummy_test_current_cluster_config
   
   puts $CHECK_OUTPUT "doing setup ..."
   set dummy_test_current_cluster_config [get_current_cluster_config_nr]
}

proc dummy_test_cleanup {} {
   global CHECK_OUTPUT
   global dummy_test_current_cluster_config

   puts $CHECK_OUTPUT "doing cleanup ..."

   set_current_cluster_config_nr $dummy_test_current_cluster_config
}

proc dummy_test_check {} {
   global CHECK_OUTPUT
   
   puts $CHECK_OUTPUT "doing test ..."

   set cluster 0
   while { [set_current_cluster_config_nr $cluster] == 0 } {
      get_current_cluster_config_array ts_config
      puts $CHECK_OUTPUT "cluster #$cluster runs in cell \"$ts_config(cell)\" on master host \"$ts_config(master_host)\" (SGE_ROOT=$ts_config(product_root))!"
      puts $CHECK_OUTPUT "   This cluster should have the following execd hosts:"
      foreach host $ts_config(execd_nodes) {
         puts $CHECK_OUTPUT "   o \"$host\""
         if { [get_qconf_se_info $host] } {
            puts $CHECK_OUTPUT "        processors:  $qconf_se_info(processors)"
            puts $CHECK_OUTPUT "        load_values: $qconf_se_info(load_values)"
         } else {
            puts $CHECK_OUTPUT "cannot get execd host information"
         }
      }

      set job_id($cluster) [ submit_job "-o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh 600" ] 
      incr cluster 1
   }

   set cluster 0
   while { [set_current_cluster_config_nr $cluster] == 0 } {
      wait_for_jobstart $job_id($cluster) "leeper" 60 
      incr cluster 1
   }

   set cluster 0
   while { [set_current_cluster_config_nr $cluster] == 0 } {
      delete_job $job_id($cluster)
      incr cluster 1
   }

   set cluster 0
   while { [set_current_cluster_config_nr $cluster] == 0 } {
      wait_for_jobend $job_id($cluster) "leeper" 60 0
      incr cluster 1
   }


}



