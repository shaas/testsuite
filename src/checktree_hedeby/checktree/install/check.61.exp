#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE

global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
set check_root_access_needs      "yes"
set check_name                   "hedeby_install"
set check_category               "INSTALL COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)         "install hedeby system components and start them up"
set check_needs                  "init_core_system"
set check_highest_level          0 
set check_init_level_procedure   "hedeby_install_init_level"
set check_functions              {}  ;# functions to call (in order)
set check_setup_function "hedeby_install_setup"
set check_cleanup_function "hedeby_install_cleanup"

lappend check_functions "hedeby_cleanup_system"
lappend check_functions "hedeby_install_master_host"
lappend check_functions "hedeby_startup_master_host"
lappend check_functions "hedeby_install_managed_hosts"
lappend check_functions "hedeby_startup_managed_hosts"
lappend check_functions "hedeby_add_and_verify_spare_pool_resources"
#lappend check_functions "hedeby_add_and_verify_ge_service"
#lappend check_functions "hedeby_add_and_verify_ge_service_resources"



# ---------------------------------------------------------------------------------
# here the tests begin ....

global install_current_cluster_config

proc hedeby_install_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }
   return -1
}

proc hedeby_install_setup {} {
   global CHECK_OUTPUT
   global install_current_cluster_config
   global install_user

   set install_current_cluster_config [get_current_cluster_config_nr]

   set install_user [get_hedeby_startup_user]

   # print out system information:
   puts $CHECK_OUTPUT "======================================="
   puts $CHECK_OUTPUT "sys_name:          [get_hedeby_system_name]"
   puts $CHECK_OUTPUT "installation mode: [get_hedeby_pref_type]"
   puts $CHECK_OUTPUT "admin user:        [get_hedeby_admin_user]"
   puts $CHECK_OUTPUT "======================================="


}

proc hedeby_install_cleanup {} {
   global CHECK_OUTPUT
   global install_current_cluster_config 

   # set the current cluster config to the one used when starting
   # the test
   set_current_cluster_config_nr $install_current_cluster_config
}


proc hedeby_add_and_verify_spare_pool_resources {} {
   global hedeby_config
   global CHECK_OUTPUT 
   global CHECK_USER

   foreach host $hedeby_config(hedeby_host_resources) {
      add_host_resource $host
   }
}

proc hedeby_cleanup_system {} {

   # first shutdown possible running system ...
   if { [shutdown_hedeby] != 0 } {
      add_proc_error "hedeby_cleanup_system" -2 "error shutting down hedeby system. skip hard here."
      return
   }
   
   # then remove system from preferences ... 
   #    we don't want a error reporting, because
   #    the system might not be installed at all
   remove_hedeby_preferences 0
}

proc hedeby_install_master_host {} {
   global CHECK_OUTPUT
   global hedeby_config
   global install_user
   global certificate_creation_time_on_master_host

   puts $CHECK_OUTPUT "installing hedeby master host on host \"$hedeby_config(hedeby_master_host)\""

   # first we make sure to work on the first cluster config
   set_current_cluster_config_nr 0
   get_current_cluster_config_array ts_config

   # now setup some basics ...
   # full path to sdmadm binary (script)
   set sdmadm_path [get_hedeby_binary_path "sdmadm" $install_user]

   # get distribution path
   set dist_path $hedeby_config(hedeby_product_root)

   # create and/or delete local spool directory for hedeby master host ...
   # (the spool_dir itself should not be existing)
   set spool_dir [cleanup_hedeby_local_spool_dir $hedeby_config(hedeby_master_host)]
   

   # get CS prot
   set cs_port $hedeby_config(hedeby_cs_port)

   # ca setup ... 
   set ca_admin_mail $ts_config(report_mail_to)
   set ca_location "Regensburg"
   set ca_country  "DE"
   set ca_org      "Sun Microsystems"
   set ca_org_unit "Development"
   set ca_state    "Germany"
   set sge_root $ts_config(product_root)

   # ssl disabled
   set ssl_disabled $hedeby_config(security_disable)

   puts $CHECK_OUTPUT "==Install params==========================="
   puts $CHECK_OUTPUT "sdmadm_path:      $sdmadm_path"
   puts $CHECK_OUTPUT "dist_path:        $dist_path" 
   puts $CHECK_OUTPUT "spool_dir:        $spool_dir"
   puts $CHECK_OUTPUT "cs_port:          $cs_port"
   puts $CHECK_OUTPUT "sge_root:         $sge_root"
   puts $CHECK_OUTPUT "   ca_admin_mail: $ca_admin_mail"
   puts $CHECK_OUTPUT "   ca_location:   $ca_location"
   puts $CHECK_OUTPUT "   ca_country:    $ca_country"
   puts $CHECK_OUTPUT "   ca_org:        $ca_org"
   puts $CHECK_OUTPUT "   ca_org_unit:   $ca_org_unit"
   puts $CHECK_OUTPUT "   ca_state:      $ca_state"
   puts $CHECK_OUTPUT "ssl disabled:     $ssl_disabled"
   puts $CHECK_OUTPUT "======================================="

   # install new system ...
   set arguments "-s [get_hedeby_system_name]\
                  -p [get_hedeby_pref_type]\
                  inst_master\
                  -ca_admin_mail \"$ca_admin_mail\"\
                  -ca_state \"$ca_state\"\
                  -ca_country \"$ca_country\"\
                  -ca_location \"$ca_location\"\
                  -ca_org_unit \"$ca_org_unit\"\
                  -ca_org \"$ca_org\"\
                  -a [get_hedeby_admin_user]\
                  -d $dist_path\
                  -cs_port $cs_port\
                  -l $spool_dir\
                  -sge_root $sge_root"

   if { $ssl_disabled == "true" } {
      append arguments " -nossl"
   }

   set install_master_output [sdmadm_command $hedeby_config(hedeby_master_host) $install_user $arguments]
   if { $prg_exit_state != 0 } {
      add_proc_error "hedeby_install_master_host" -1 "$hedeby_config(hedeby_master_host)($install_user): sdmadm $arguments failed:\n$install_master_output"
   }
   # save certificate creation time to be able to check if the certs are 
   # valid on remote managed hosts when installing manages hosts later
   set certificate_creation_time_on_master_host [get_remote_time $hedeby_config(hedeby_master_host)]
}


proc hedeby_startup_master_host {} {
   global CHECK_OUTPUT
   global hedeby_config
   global install_user

   if { [startup_hedeby_host "master" $hedeby_config(hedeby_master_host) $install_user] != 0} {
      add_proc_error "hedeby_startup_master_host" -2 "error starting master host \"$hedeby_config(hedeby_master_host)\"!\nSkip hard here."
      return
   }
}


proc hedeby_startup_managed_hosts {} {
   global CHECK_OUTPUT
   global hedeby_config
   global install_user

   foreach host [get_all_hedeby_managed_hosts] {
      set val [startup_hedeby_host "managed" $host $install_user]
      if { $val != 0 } {
         set ret_val 1
      }
   }
}


proc hedeby_install_managed_hosts {} {
   global CHECK_OUTPUT
   global hedeby_config
   global install_user
   global certificate_creation_time_on_master_host

   # first we make sure to work on the first cluster config
   set_current_cluster_config_nr 0
   get_current_cluster_config_array ts_config

   # full path to sdmadm binary (script)
   set sdmadm_path [get_hedeby_binary_path "sdmadm" $install_user]

   # get distribution path
   set dist_path $hedeby_config(hedeby_product_root)

   # get CS port
   set cs_url [get_hedeby_cs_url]

   # set sge_root
   set sge_root $ts_config(product_root)

   # ssl disabled
   set ssl_disabled $hedeby_config(security_disable)

   # TODO: switch between interactive and copy cert mode when installing managed hosts

   # TODO: remove check spooldir uniq code if hedeby supports different spool dirs in user pref mode!
   if {[get_hedeby_pref_type] == "user"} {
      set check_dirs 1
   } else {
      set check_dirs 0
   }

   # first get tmp keystore and cacert files
   # the tmp files are deleted with the next test!
   set ca_file [get_tmp_file_name "" "ca"]
   set admin_keystore_file [get_tmp_file_name "" "keystore"]
   set master_spool_dir [get_hedeby_local_spool_dir $hedeby_config(hedeby_master_host)]
   set admin_user [get_hedeby_admin_user]
   set cp_keystore_cmd "$master_spool_dir ; cp ./security/users/$admin_user.keystore $admin_keystore_file ; cp ./security/ca/ca_top/cacert.pem $ca_file"
   set result [start_remote_prog "$hedeby_config(hedeby_master_host)" $install_user "cd" "$cp_keystore_cmd"]
   puts $CHECK_OUTPUT "copy ca result:"
   puts $CHECK_OUTPUT $result
   puts $CHECK_OUTPUT "admin_keystore file should be at $admin_keystore_file"
   puts $CHECK_OUTPUT "ca cert file should be at $ca_file"

   foreach managed_host [get_all_hedeby_managed_hosts] {
      if { $check_dirs } {
         # TODO: remove check spooldir uniq code if hedeby supports different spool dirs in user pref mode!
         set mHostSpoolDir [get_hedeby_local_spool_dir $managed_host]
         if { $master_spool_dir != $mHostSpoolDir } {
            add_proc_error "hedeby_install_managed_hosts" -2 "local spool dir not unique for user pref mode!"
            return
         }
      }
      # create and/or delete local spool directory for hedeby master host ...
      # (the spool_dir itself should not be existing)
      set spool_dir [cleanup_hedeby_local_spool_dir $managed_host]

      puts $CHECK_OUTPUT "==Install params==========================="
      puts $CHECK_OUTPUT "sdmadm_path:      $sdmadm_path"
      puts $CHECK_OUTPUT "dist_path:        $dist_path" 
      puts $CHECK_OUTPUT "spool_dir:        $spool_dir"
      puts $CHECK_OUTPUT "cs_url:           $cs_url"
      puts $CHECK_OUTPUT "ssl disabled:     $ssl_disabled"
      puts $CHECK_OUTPUT "======================================="

      # check that NFS has transported the keystore and cacert file to the managed host ...
      wait_for_remote_file $managed_host $install_user $admin_keystore_file
      wait_for_remote_file $managed_host $install_user $ca_file

      # check that managed host time is older than creation time of certificates ...
      set local_time [get_remote_time $managed_host]
      while { $local_time < $certificate_creation_time_on_master_host } {
         set time_diff [expr ( $local_time - $certificate_creation_time_on_master_host )]
         puts $CHECK_OUTPUT "time difference between certificate creation time on master host \"$hedeby_config(hedeby_master_host)\" and managed host \"$managed_host\": $time_diff"
         after 2000
         set local_time [get_remote_time $managed_host]
      }

      # install new system ...
      set arguments "-s [get_hedeby_system_name]\
                     -p [get_hedeby_pref_type]\
                     --keystore $admin_keystore_file\
                     --cacert $ca_file\
                     inst_managed_host\
                     -a [get_hedeby_admin_user]\
                     -d $dist_path\
                     -l $spool_dir\
                     -cs_url $cs_url"


      if { $ssl_disabled == "true" } {
         append arguments " -nossl"
      }

      # TODO: make installation of managed host interactive - we have to trust the certificate in a question
      set output [sdmadm_command $managed_host $install_user $arguments]
      if { $prg_exit_state != 0 } {
         add_proc_error "hedeby_install_master_host" -1 "${managed_host}($install_user): sdmadm $arguments failed:\n$output"
      }
   }
}

