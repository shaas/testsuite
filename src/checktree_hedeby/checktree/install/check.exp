#!/vol2/TCL_TK/glinux/bin/expect
# global variables ... (defined in main check routine, but you can use it)
#
# global CHECK_ACT_PATH          ;# actual checkpath
# gloabl CHECK_ACTUAL_TEST_PATH  ;# this directory
# global CHECK_USER              ;# user who start test
# global CHECK_ARCH              ;# architecture of this system (e.g. irix6)
# global CHECK_HOST              ;# hostname of this system (e.g. DWAIN)

# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE

global check_name check_description check_needs check_functions check_errno check_errstr 
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
set check_root_access_needs  "yes"
set check_name          "hedeby_install"
set check_category      "INSTALL COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)   "install a hedeby system and start it up"
set check_needs         "init_core_system";# dependencies of this check (name of other check)
set check_highest_level  0 ;# 0 for usual tests
set check_init_level_procedure "hedeby_install_init_level"
set check_functions     ""                              ;# functions to call (in order)

lappend check_functions "hedeby_install_bootstrap"
lappend check_functions "install_hedeby" ;# install Haithabu 
lappend check_functions "install_hedeby_shell" ;# install Haithabu via shell

# ---------------------------------------------------------------------------------
# here the tests begin ....

proc hedeby_install_init_level {} {
  global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         set_error  0 "ok"
         return 0
      }
   }

  set_error -1 "not ok"  ;# no other level else
  return -1
}


proc create_template { template target } {
   
   global CHECK_CORE_MASTER CHECK_OUTPUT CHECK_USER CHECK_DEBUG_LEVEL CHECK_HOST
   global ts_config hedeby_config ts_host_config

   set p(GRM_SYSTEM) "${CHECK_USER}_${ts_config(commd_port)}"
   set p(GRM_ADMIN)  "$CHECK_USER"
   set p(GRM_DIST)   "$hedeby_config(dist)"
   set p(GRM_VAR)    "/var/grm"
   set p(GRM_ETC)    "/etc/grm/svcmgmt"
   set p(GRM_SHARED) "$hedeby_config(shared)"
   set p(SGE_ROOT)   "$ts_config(product_root)"
   
   set args ""
   foreach param [array names p] {
      set val $p($param)
      set args "$args -e \'s#@@@${param}@@@#$val#g\'"
   }
   
   set output [start_remote_prog $CHECK_HOST $CHECK_USER "sed" "$args $template > $target"]
   if { $prg_exit_state != 0 } {
      add_proc_error "create_template" -1 "sed failed: $output"

      return -1
   }
   return 0
}
proc hedeby_install_bootstrap {} {
   global CHECK_CORE_MASTER CHECK_OUTPUT CHECK_USER CHECK_DEBUG_LEVEL
   global CHECK_ACT_PATH
   global ts_config hedeby_config ts_host_config
   
   
   set tmp_file [get_tmp_file_name]
   if { [create_template $CHECK_ACT_PATH/bootstrap.inst.template $tmp_file] != 0 } {
      add_proc_error "hedeby_install_bootstrap" -1 "Can not create installation template"
      return -1
   }

   set args "-log com.sun.grid.grm.install=FINE -system -auto $tmp_file"
   
   set output [start_remote_prog $hedeby_config(master) $CHECK_USER "cd" "$hedeby_config(dist) ; ./inst_grm.sh $args"]
   if { $prg_exit_state != 0 } {
      add_proc_error "hedeby_install_bootstrap" -1 "inst_grm failed ($prg_exit_state): $output"
      return -1
   }
   
   # startup the system
   
   puts $CHECK_OUTPUT "-------------------------------------------------"
   puts $CHECK_OUTPUT "hedeby_install_bootstrap (and startup): NOT IMPLEMENTED!"
   puts $CHECK_OUTPUT "-------------------------------------------------"
   
   set_error 0 "ok"
}

#****** install_hedeby_shell() ***********************************************
#  NAME
#     install_hedeby_shell() -- Install Haithabu using local shell script
#     hedeby_install.sh. 
#
#  SYNOPSIS
#     Pass to hedeby_install.sh shell script list of master host
#     and execd hosts to be configured by gconf.
#
#  FUNCTION
#     Install Haithabu from TestSuite
#
#  INPUTS
#     
#
#*******************************************************************************

proc install_hedeby_shell {} {
   global CHECK_CORE_MASTER CHECK_OUTPUT CHECK_USER CHECK_DEBUG_LEVEL
   global CHECK_ACTUAL_TEST_PATH CHECK_ACT_LEVEL
   global ts_config hedeby_config ts_host_config
   

   set hostname [lindex $ts_config(execd_nodes) 0]
   set host1 [lindex $ts_config(execd_nodes) 1]
   #set host2 [lindex $ts_config(execd_nodes) 2]
    
  # Run this script as user "root" since the Haithabu project is setup
  # for user root.
 
   set result_shell_program [start_remote_prog $hostname "root" \
   "$CHECK_ACTUAL_TEST_PATH/hedeby_install.sh" "-h $hostname,$host1"]

   set_error 0 "ok"
   
}





