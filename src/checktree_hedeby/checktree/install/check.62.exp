
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2006 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE

global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
set check_root_access_needs      "yes"
set check_name                   "hedeby_install"
set check_category               "INSTALL COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)         "install hedeby system components and start them up"
set check_needs                  "init_core_system"
set check_highest_level          0 
set check_init_level_procedure   "hedeby_install_init_level"
set check_functions              {}  ;# functions to call (in order)
set check_setup_function "hedeby_install_setup"
set check_cleanup_function "hedeby_install_cleanup"

lappend check_functions "hedeby_check_distinst"
lappend check_functions "hedeby_shutdown_system"
lappend check_functions "hedeby_remove_preferences"
lappend check_functions "hedeby_install_master_host"
lappend check_functions "hedeby_startup_master_host"
lappend check_functions "hedeby_install_managed_hosts"
lappend check_functions "hedeby_startup_managed_hosts"
lappend check_functions "hedeby_add_ge_services"
lappend check_functions "hedeby_startup_ge_services"
lappend check_functions "hedeby_add_spare_pool_resources"
lappend check_functions "hedeby_setup_slos"
lappend check_functions "hedeby_check_resources"
lappend check_functions "hedeby_check_services"



# ---------------------------------------------------------------------------------
# here the tests begin ....

global install_current_cluster_config

proc hedeby_install_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }
   return -1
}

proc hedeby_install_setup {} {
   global install_current_cluster_config hedeby_config

   set install_current_cluster_config [get_current_cluster_config_nr]

   # print out system information:
   ts_log_fine "======================================="
   ts_log_fine "sys_name:          [get_hedeby_system_name]"
   ts_log_fine "preferences mode:  [get_hedeby_pref_type]"
   ts_log_fine "admin user:        [get_hedeby_admin_user]"
   ts_log_fine "install mode:      $hedeby_config(hedeby_install_mode)"
   ts_log_fine "======================================="
}

proc hedeby_install_cleanup {} {
   global install_current_cluster_config 

   # set the current cluster config to the one used when starting
   # the test
   set_current_cluster_config_nr $install_current_cluster_config
}


proc hedeby_add_spare_pool_resources {} {
   global hedeby_config
   set exit_state [add_host_resources [get_all_spare_pool_resources] "spare_pool"]
   ts_log_fine "exit_state: $exit_state"
}

proc hedeby_check_services {} {
   hedeby_check_default_services
}

proc hedeby_check_resources {} {
   hedeby_check_default_resources
}

proc hedeby_setup_slos {} {
   reset_default_slos "mod_config"
}

proc hedeby_startup_ge_services {} {
   global hedeby_config

   if { [is_simple_install_system]} {
      ts_log_fine "Not need to start rp_vms for the simple install use case"
      return
   }

   set ge_hosts [get_hedeby_default_services service_names]
   ts_log_fine "got following GE hosts: $ge_hosts"
   set hosts_with_jvm {}
   foreach ge_host $ge_hosts {
      # master host has already running rp_vm
      if {$ge_host != $hedeby_config(hedeby_master_host) && [lsearch -exact $hosts_with_jvm $ge_host] < 0} {
            lappend hosts_with_jvm $ge_host
      }
   }
   ts_log_fine "starting jvm: [get_service_jvm] on hosts: $hosts_with_jvm"

   foreach host $hosts_with_jvm {
      set task_info($host,expected_output) ""
      set task_info($host,sdmadm_command) "suj -j [get_service_jvm]"
   }
   set opt(user) [get_hedeby_startup_user]
   start_parallel_sdmadm_command_opt hosts_with_jvm task_info opt
}


proc hedeby_add_ge_services {} {
   global hedeby_config
   global install_current_cluster_config

   # first calculate spooldirs
   set ge_hosts [get_hedeby_default_services service_names]
   set managed_host_list [get_all_movable_resources]

   set cluster 0
   set execute_user [get_hedeby_admin_user]
   while { [set_current_cluster_config_nr $cluster] == 0 } {
      add_hedeby_ge_service_for_cluster $cluster
      incr cluster 1
   }
   set_current_cluster_config_nr $install_current_cluster_config
}

proc hedeby_check_distinst {} {
   # check hedeby installation for available $hedeby_config(hedeby_product_root)/lib/sdm-test.jar
   # to start sdmadm exe command 

   global hedeby_config
   set java_build_host [host_conf_get_java_compile_host]

   set path "$hedeby_config(hedeby_product_root)/lib/sdm-test.jar"
   if {[is_remote_file $java_build_host [get_hedeby_admin_user] $path] == 0} {
      ts_log_info "Product root \"$hedeby_config(hedeby_product_root)\" doesn't contain sdm-test.jar file in ./lib directory - executor test is unsupported"

# TODO: This is tmp fix for sdm-test.jar issue. We should in general test without sdm-test.jar, because it is not part of distribution! 
#       For the executor test the sdm-test.jar might be temporarly copied (manually). We must find a solution here

#      ts_log_fine "No sdm-test.jar file found in $hedeby_config(hedeby_product_root)/lib directory, copy from source ..."
#      set source_path "$hedeby_config(hedeby_source_dir)/dist/hedeby/lib/sdm-test.jar"
#      if {[is_remote_file $java_build_host [get_hedeby_admin_user] $source_path] == 1} {
#         set output [start_remote_prog $java_build_host [get_hedeby_admin_user] "cp" "$source_path $path" prg_exit_state 180 0 "" ""  1 0]
#         ts_log_fine $output
#         if {$prg_exit_state != 0} {
#            ts_log_severe "cp $source_path $path failed with exit state = $prg_exit_state"
#         } else {
#            ts_log_fine "Copied sdm-test.jar from $hedeby_config(hedeby_source_dir)/dist/hedeby/lib/ into distinst directory!"
#         }
#      } else {
#         add_proc_error "hedeby_check_distinst" -2 "File \"$source_path\" not found. Please compile hedeby with testsuite first!"
#      }
   } else {
      ts_log_info "Product root \"$hedeby_config(hedeby_product_root)\" contains sdm-test.jar file in ./lib directory - please remove it for testing"
   }
}

proc hedeby_shutdown_system {} {
   # shutdown possible running system ...
   if { [shutdown_hedeby] != 0 } {
      add_proc_error "hedeby_shutdown_system" -2 "error shutting down hedeby system. skip hard here."
      return
   }
}

proc hedeby_remove_preferences {} {

   # remove system from preferences ... 
   #    we don't want a error reporting, because
   #    the system might not be installed at all
   remove_hedeby_preferences 0
}

proc hedeby_install_master_host {} {
   global hedeby_config
   global certificate_creation_time_on_master_host

   set install_user [get_hedeby_startup_user]

   ts_log_fine "installing hedeby master host on host \"$hedeby_config(hedeby_master_host)\""

   # first we make sure to work on the first cluster config
   set_current_cluster_config_nr 0
   get_current_cluster_config_array ts_config

   # now setup some basics ...
   # full path to sdmadm binary (script)
   set sdmadm_path [get_hedeby_binary_path "sdmadm" $install_user]

   # get distribution path
   set dist_path $hedeby_config(hedeby_product_root)

   # create and/or delete local spool directory for hedeby master host ...
   # (the spool_dir itself should not be existing)
   set spool_dir [cleanup_hedeby_local_spool_dir $hedeby_config(hedeby_master_host)]
   

   # get CS prot
   set cs_port $hedeby_config(hedeby_cs_port)

   set hedeby_system_name [get_hedeby_system_name]

   # ca setup ... 
   set ca_admin_mail $ts_config(report_mail_to)
   set ca_location "Regensburg"
   set ca_country  "DE"
   set ca_org      "Sun Microsystems"
   set ca_org_unit "Hedeby system $hedeby_system_name"
   set ca_state    "Germany"
   set sge_root $ts_config(product_root)

   # ssl disabled
   set ssl_disabled $hedeby_config(security_disable)

   ts_log_fine "==Install params==========================="
   ts_log_fine "sdmadm_path:      $sdmadm_path"
   ts_log_fine "dist_path:        $dist_path" 
   ts_log_fine "spool_dir:        $spool_dir"
   ts_log_fine "cs_port:          $cs_port"
   ts_log_fine "sge_root:         $sge_root"
   ts_log_fine "   ca_admin_mail: $ca_admin_mail"
   ts_log_fine "   ca_location:   $ca_location"
   ts_log_fine "   ca_country:    $ca_country"
   ts_log_fine "   ca_org:        $ca_org"
   ts_log_fine "   ca_org_unit:   $ca_org_unit"
   ts_log_fine "   ca_state:      $ca_state"
   ts_log_fine "ssl disabled:     $ssl_disabled"
   ts_log_fine "install mode:     $hedeby_config(hedeby_install_mode)"
   ts_log_fine "======================================="

   # install new system ...
   set arguments "-s $hedeby_system_name\
                  -p [get_hedeby_pref_type]\
                  imsth\
                  -ca_admin_mail \"$ca_admin_mail\"\
                  -ca_state \"$ca_state\"\
                  -ca_country \"$ca_country\"\
                  -ca_location \"$ca_location\"\
                  -ca_org_unit \"$ca_org_unit\"\
                  -ca_org \"$ca_org\"\
                  -au [get_hedeby_admin_user]\
                  -d $dist_path\
                  -cs_port $cs_port\
                  -l $spool_dir\
                  -sge_root $sge_root\
		  -al\
                  -nost"

   if { $ssl_disabled == "true" } {
      append arguments " -nossl"
   }

   if { $hedeby_config(hedeby_install_mode) == "simple" } {
      append arguments " -si"
   }
   set install_master_output [sdmadm_command $hedeby_config(hedeby_master_host) $install_user $arguments]
   if { $prg_exit_state != 0 } {
      ts_log_severe "$hedeby_config(hedeby_master_host)($install_user): sdmadm $arguments failed:\n$install_master_output"
   }
   # save certificate creation time to be able to check if the certs are 
   # valid on remote managed hosts when installing manages hosts later
   set certificate_creation_time_on_master_host [get_remote_time $hedeby_config(hedeby_master_host)]
}


proc hedeby_startup_master_host {} {
   global hedeby_config

   set install_user [get_hedeby_startup_user]
   if { [startup_hedeby_hosts "master" $hedeby_config(hedeby_master_host) $install_user] != 0} {
      add_proc_error "hedeby_startup_master_host" -2 "error starting master host \"$hedeby_config(hedeby_master_host)\"!\nSkip hard here."
      return
   }
}


proc hedeby_startup_managed_hosts {} {
   global hedeby_config

   set install_user [get_hedeby_startup_user]

   startup_hedeby_hosts "managed" [get_all_movable_resources] $install_user
}


#****** check.62/hedeby_install_managed_hosts() ********************************
#  NAME
#     hedeby_install_managed_hosts() -- Install the managed hosts of the hedeby system 
#
#  SYNOPSIS
#     hedeby_install_managed_hosts { { host_list "" } } 
#
#  FUNCTION
#
#     Performs the installation for managed hosts
#
#  INPUTS
#     { host_list "" } - The list of managed hosts, if this parameter is an empty
#                        string all movable hosts will be installed 
#     { error_text_var "" } - upvar where the error text of the installations is stored
#                             if this parameter is a empty string no error_text will be upvared
#
#  RESULT
#
#      0    -  Success, all managed hosts have been installed
#      else -  At least one installation failed 
#
#*******************************************************************************
proc hedeby_install_managed_hosts { { host_list "" } { error_text_var ""} } {
   global hedeby_config
   global certificate_creation_time_on_master_host

   set install_user [get_hedeby_startup_user]

   if { $error_text_var != "" } {
      upvar $error_text_var error_text
   }

   # first we make sure to work on the first cluster config
   set_current_cluster_config_nr 0
   get_current_cluster_config_array ts_config

   # full path to sdmadm binary (script)
   set sdmadm_path [get_hedeby_binary_path "sdmadm" $install_user]

   # get distribution path
   set dist_path $hedeby_config(hedeby_product_root)

   # get CS port
   set cs_url [get_hedeby_cs_url]

   # set sge_root
   set sge_root $ts_config(product_root)

   # ssl disabled
   set ssl_disabled $hedeby_config(security_disable)

   # TODO: switch between interactive and copy cert mode when installing managed hosts


   # first get tmp keystore and cacert files
   # the tmp files are deleted with the next test!

   if { [hedeby_copy_admin_keystore_to_shared_folder admin_keystore_file ca_file] != 0 } {
      ts_log_severe "Could not copy the admin keystore and the cacert file into a shared folder"
      return
   }

   if { $host_list == "" } {
       set managed_host_list [get_all_movable_resources]
   } else {
       set managed_host_list $host_list
   }

   ts_log_heading "Install managed hosts"
   ts_log_fine "    Managed hosts: $managed_host_list"
   ts_log_fine "   admin_keystore: $admin_keystore_file"
   ts_log_fine "     ca cert file: $ca_file"
   ts_log_fine "      sdmadm_path: $sdmadm_path"
   ts_log_fine "        dist_path: $dist_path" 
   ts_log_fine "           cs_url: $cs_url"
   ts_log_fine "     ssl disabled: $ssl_disabled"
   ts_log_fine "========================================"

   ts_log_heading "Cleaning up local spool directories on all managed hosts" 
   foreach managed_host $managed_host_list {
      # create and/or delete local spool directory for hedeby master host ...
      # (the spool_dir itself should not be existing)

      ts_log_finest "Cleaning up local spool dir on host $managed_host ..."
      set managed_host_sdmadm_arguments($managed_host,spool_dir) [cleanup_hedeby_local_spool_dir $managed_host]
      ts_log_finest "   using spool dir:\n   $managed_host_sdmadm_arguments($managed_host,spool_dir)"
   }

   ts_log_heading "Check NFS  availability of ca and keystore file on all managed hosts"
   foreach managed_host $managed_host_list {
      ts_log_finest "Checking NFS availability of ca and keystore file on host $managed_host ..."
      # check that NFS has transported the keystore and cacert file to the managed host ...
      wait_for_remote_file $managed_host $install_user $admin_keystore_file
      wait_for_remote_file $managed_host $install_user $ca_file

      # If the method is used standalone (outside from the hedeby install test)
      # the global variable is not set
      # => In this case it is assumed that the certificates are already valid
      if {[info exists certificate_creation_time_on_master_host]} {
         # check that managed host time is older than creation time of certificates ...
         set local_time [get_remote_time $managed_host]
         while { $local_time < $certificate_creation_time_on_master_host } {
            set time_diff [expr ( $local_time - $certificate_creation_time_on_master_host )]
            ts_log_finest "time difference between certificate creation time on master host \"$hedeby_config(hedeby_master_host)\" and managed host \"$managed_host\": $time_diff"
            after 2000
            set local_time [get_remote_time $managed_host]
         }
      }
   }

   ts_log_heading "Starting parallel managed host installation ..."
   foreach managed_host $managed_host_list {
      # install new system ...
      set arguments "-d -s [get_hedeby_system_name]\
                     -p [get_hedeby_pref_type]\
                     -k $admin_keystore_file\
                     -cc $ca_file\
                     imgdh\
                     -au [get_hedeby_admin_user]\
                     -d $dist_path\
                     -l $managed_host_sdmadm_arguments($managed_host,spool_dir)\
                     -cs_url $cs_url"

      if { $ssl_disabled == "true" } {
         append arguments " -nossl"
      }
      # TODO: make installation of managed host interactive - we have to trust the certificate in a question
      set task_info($managed_host,expected_output) ""
      set task_info($managed_host,sdmadm_command) $arguments
   }

   set error_text [start_parallel_sdmadm_command managed_host_list $install_user task_info]
   
   foreach managed_host $managed_host_list {
      set    output "----------------------------------\n"
      append output "managed_host: $managed_host\n"
      append output "exit status: $$task_info($managed_host,exit_status)\n"
      append output "output:\n$task_info($managed_host,output)\n"
      append output "----------------------------------\n"
      ts_log_finer $output
   }

   if { $error_text != "" } {
      add_proc_error "hedeby_install_managed_hosts" -1 $error_text
      return 1
   }
   return 0
}



#****** check.62/hedeby_copy_admin_keystore_to_shared_folder() *****************
#  NAME
#     hedeby_copy_admin_keystore_to_shared_folder() -- copy the keystore of the
#                                                      hedeby admin user to a shared folder
# 
#
#  SYNOPSIS
#     hedeby_copy_admin_keystore_to_shared_folder { keystore_path_var cert_path_var } 
#
#  FUNCTION
#     This function copies the keystore of the hedeby admin user and the ca certificate
#     to temp files on a shared folder.  
#
#  INPUTS
#     keystore_path_var - upvar, contains the path to copied admin keystore file 
#     cert_path_var     - upvar, contains the path to copied ca cert file 
#
#  RESULT
#
#     0 - Success - both files are copied to the shared file, pathnames stored in the
#                   upvars
#     else  ERROR
#
#*******************************************************************************
proc hedeby_copy_admin_keystore_to_shared_folder { keystore_path_var cert_path_var } {

   global hedeby_config

   upvar $keystore_path_var keystore_file
   upvar $cert_path_var     cert_file
  
   set cert_file [get_tmp_file_name "" "ca"]
   set keystore_file [get_tmp_file_name "" "keystore"]

   set master_spool_dir [get_hedeby_local_spool_dir $hedeby_config(hedeby_master_host)]
   set admin_user [get_hedeby_admin_user]

   set    cmd "$master_spool_dir ;"
   append cmd " cp ./security/users/$admin_user.keystore $keystore_file ;"
   append cmd " cp ./security/ca/ca_top/cacert.pem $cert_file"

   ts_log_heading "Copy admin keystore file and ca cert file to shared folder"

   set result [start_remote_prog "$hedeby_config(hedeby_master_host)" [get_hedeby_startup_user] "cd" "$cmd"]

   return $prg_exit_state
}

#****** hedeby_uninstall_managed_host() *******************************
#  NAME
#     hedeby_uninstall_managed_host() -- 
#
#  SYNOPSIS
#     hedeby_uninstall_managed_host { host { opt "" } } 
#
#  FUNCTION
#     Executes a 'sdmadm uninstall_host' command on a host
#
#     If the hedeby startup user is root the keystore and certificate files
#     (need for authentication) are copied to a shared folder before calling
#     the sdmadm command.
#
#  INPUTS
#     host       - The hostname
#     { opt "" } - Options for the sdmadm command
#                  the opt(host) parameter will be overridden by the host parameter
#                  the opt(user) parameter will be overridden by the startup user
#                  all other possible parameter can be used as normal 
#
#  RESULT
#     0 -  Host has been uninstalled
#    -1 -  keystore or certificate could not be copied to shared folder
#   else - Exit code of the failed sdmadm command
#
#  EXAMPLE
#
#   if {[hedeby_uninstall_managed_host "foo"] != 0 } {
#      ts_log_severe "could not uninstall host foo"
#   }
#
#  SEE ALSO
#     hedeby_copy_admin_keystore_to_shared_folder
#     get_hedeby_startup_user
#     sdmadm_command_opt
#*******************************************************************************
proc hedeby_uninstall_managed_host { host  { opt "" } } {

   get_hedeby_proc_opt_arg $opt opts

   set opts(host) $host
   set opts(user) [get_hedeby_startup_user]

   set global_options ""
   if { $opts(user) == "root" } {
      # If we have a system installation root must execute
      # the uninstall_host command
      # But root is not a admin user, we need also credentials for authenticating
      set admin_keystore_file ""
      set ca_file ""

      if { [hedeby_copy_admin_keystore_to_shared_folder admin_keystore_file ca_file] != 0 } {
         ts_log_severe "Could not copy the admin keystore and the cacert file into a shared folder"
         return -1
      }
      wait_for_remote_file $host "root" $admin_keystore_file
      wait_for_remote_file $host "root" $ca_file

      set global_options "-keystore $admin_keystore_file -cacert $ca_file"
   }
   sdmadm_command_opt "$global_options uninstall_host" opts
   if { $prg_exit_state != 0 } {
      ts_log_severe "Could not uninstall managed host '$host'"
   }
   return $prg_exit_state
}
