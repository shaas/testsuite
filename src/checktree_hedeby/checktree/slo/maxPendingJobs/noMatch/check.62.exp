#!/vol2/TCL_TK/glinux/bin/expect
# ___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2008 by Sun Microsystems, Inc
#
#  All Rights Reserved.
#
##########################################################################
# ___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check specific things
set check_root_access_needs    "yes"
set check_name                 "no_match_filter"
set check_category             "COMPATIBILITY SYSTEM VERIFIED"
set check_description(0)       "Max pending jobs SLO test with no match job filter"
set check_needs                "hedeby_install"                  
set check_init_level_procedure "no_match_init_level"
set check_functions            {}   
set check_highest_level        0

set check_setup_level_function "no_match_setup_level"
set check_cleanup_level_function "no_match_cleanup_level"

lappend check_functions "no_match_check"


#****** slo/maxPendingJobs/noMatch/no_match_init_level() ************************
#  NAME
#     no_match_init_level() -- init level procedure for test
#
#  SYNOPSIS
#     no_match_init_level { } 
#
#  FUNCTION
#     Return the supported runlevel of this test. Currently only level 0
#     is supported.
#
#  INPUTS
#
#  RESULT
#     0 for CHECK_ACT_LEVEL 0
#    -1 for all other levels
#
#*******************************************************************************
proc no_match_init_level {} {
  global CHECK_ACT_LEVEL

  if {$CHECK_ACT_LEVEL == 0} {
     return 0
  }
  return -1
}

#****** slo/maxPendingJobs/noMatch/no_match_setup_level() *********************************
#  NAME
#    no_match_setup_level() -- setup level function
#
#  SYNOPSIS
#    no_match_setup_level { } 
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#*******************************************************************************
proc no_match_setup_level {} {
   upvar #0 no_match_ctx this

   get_hedeby_default_services service_names

   set this(ge_adapter)      [pick_random $service_names(services)]
   #set this(ge_adapter)     [lindex $service_names(services) 0]  
   set this(ge_master_host)  $service_names(master_host,$this(ge_adapter))
   set this(moveable_execds) $service_names(moveable_execds,$this(ge_adapter))

   set this(org_cluster_config) [get_current_cluster_config_nr]
   set_current_cluster_config_nr $service_names(ts_cluster_nr,$this(ge_adapter))
}

#****** slo/maxPendingJobs/noMatch/no_match_cleanup_level() *******************************
#  NAME
#    no_match_cleanup_level() -- setup level function
#
#  SYNOPSIS
#    with_job_filter_cleanup_level { } 
#
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#*******************************************************************************
proc no_match_cleanup_level {} {
    upvar #0 no_match_ctx this

    # delete jobs first as active jobs on resource prohibit 
    # resource movement to default service
    delete_all_jobs
    wait_for_end_of_all_jobs 60

    reset_default_slos "mod_config" $this(ge_adapter)
    move_resources_to_default_services

    enable_queue {\\*}
    #reset saved active cluster configuration nr
    set_current_cluster_config_nr $this(org_cluster_config)

    unset this
}


# ------------------------------------------------------------------------------
# here the tests begin ....

#****** slo/maxPendingJobs/noMatch/no_match_check *****************************
#  NAME
#     no_match_check() -- check if MaxPendingJobsSLO is working
#
#  SYNOPSIS
#     no_match_check { } 
#
#  FUNCTION
#     this steps test testsuite hedeby issue 231: 
#       MaxPendingJobsSLO with filter
#
#      Executed steps:
#        1. We will disable all queues on static resource of service   
#        2. We will setup a MaxPendingJob slo with specific job filter(we will ask for the resource with specific architecture)
#        3. We will submit a non matching jobs (eg. num_proc=9)
#        4. Test successful run conditions: pass - no resource was assigned,
#           fail - a resource was assigned, job did not finish, fail - a resource was assigned, job was finished
#   
#  INPUTS
#     no input parameters
#
#  RESULT
#     no return values
#
#*******************************************************************************
proc no_match_check {} {
    upvar #0 no_match_ctx this

   #--------------------------------------------------------------------------------
   ts_log_heading "Moving resource of service '$this(ge_adapter)' to spare_pool"
   #--------------------------------------------------------------------------------
   if {[hedeby_move_resources $this(moveable_execds) "spare_pool"] != 0} {
      return
   }

   #--------------------------------------------------------------------------------
   ts_log_heading "Setting up not MaxPendingJobsSLO with job filter for service '$this(ge_adapter)'"
   #--------------------------------------------------------------------------------
   #prepare a job filter which will ask for a resource with given architecture
   #we will get the architecture of the moveable resource
   set job_arch [host_conf_get_arch [pick_random $this(moveable_execds)]] 
   set prop(arch) "{=} {$job_arch}"

   #add MaxPendingJobs slo to the configuration of the ge adapter with the job filter for specific architecture
   set mpj_opts(jobFilter) [create_job_filter prop]
   set mpj_opts(urgency)   65
   set mpj_opts(max)       1
   set mpj_opts(name)      "not_matching_mpj"
   set slos [create_max_pending_jobs_slo_opt mpj_opts]
   lappend slos [create_fixed_usage_slo 50 "fixed_usage"]

   set opts(update_interval_unit)  "seconds"
   set opts(update_interval_value) 10 
   if {[set_service_slos_opt $this(ge_adapter) $slos opts] != 0} {
      return
   }
   unset opts

   #--------------------------------------------------------------------------------
   ts_log_heading "Disabling all queues in cluster '$this(ge_master_host)'"
   #--------------------------------------------------------------------------------
   #lets disable all queues of our static ge_adapter service execd 
   if {[disable_queue {\\*}] != 0} {
      return
   }

   #--------------------------------------------------------------------------------
   ts_log_heading "Submitting array job that do not match the job filter of MaxPendingJobsSLO"
   #--------------------------------------------------------------------------------
   #lets submit a no matching job and we will wait for some time to see that no resource was assigned and job was not executed
   set job_name "myjob"
   set job_id [submit_sleeper_job 600 "-t 1-10 -l num_proc=9 -N $job_name"]
   if {$job_id < 0} {
      return
   }
   # qconf -tsm
   trigger_scheduling

   #--------------------------------------------------------------------------------
   ts_log_heading "Checking that jobs stay in pending queue"
   #--------------------------------------------------------------------------------
   #now we will check that jobs are still pending in job queue
   for {set try 0} {$try < 5} {incr try} {
      after 3000 
      switch -- [is_job_running $job_id $job_name] {
         0 {  ts_log_fine "Job '$job_id' is still pending, fine" }
         1 {
             ts_log_severe "Job '$job_id' is running. This should not happen"
             return
         }
         -1 {
             ts_log_severe "Job '$job_id' no longer available, it should be pending"
             return
         }
         default {
             ts_log_severe "Job '$job_id' is in unknown state, it should be pending"
             return
         }
      }
   }

   #--------------------------------------------------------------------------------
   ts_log_heading "Checking that no new resources were added to service '$this(ge_adapter)'"
   #--------------------------------------------------------------------------------
   # get all resources from service $this(ge_adapter) and count them, must be
   # exactly 1 (static qmaster)
   set opts(res_list) res_list
   set opts(service) $this(ge_adapter)
   if {[get_resource_info_opt ri opts] != 0} {
      return
   }
   unset opts
   if {[llength $res_list] != 1} {
      ts_log_severe "Invalid number of resource assigned to service '$this(ge_adapter)' (got [llength $res_list], expected 1)"
      return
   }
}
