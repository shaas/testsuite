#!/vol2/TCL_TK/glinux/bin/expect
# global variables ... (defined in main check routine, but you can use it)
#
# gloabl CHECK_ACTUAL_TEST_PATH  ;# this directory
# global CHECK_USER              ;# user who start test
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE

global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
set check_root_access_needs  "yes"
set check_name          "arco_dbwriter_install"
set check_category      "INSTALL COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)   "install a dbwriter and start them up, "
set check_needs         "init_core_system arco_database_install"      ;# dependencies of this check (name of other check)
set check_init_level_procedure "arco_dbwriter_install_init_level"
set check_functions     ""                              ;# functions to call (in order)

lappend check_functions "arco_dbwriter_install"

# ---------------------------------------------------------------------------------
# here the tests begin ....

proc arco_dbwriter_install_init_level {} {
  global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level else
}

proc arco_dbwriter_install {} {
   global CHECK_USER CHECK_DEBUG_LEVEL 
   global ts_config arco_config ts_host_config
   
   if {[get_dbwriter_status 0] == 0} {
      shutdown_dbwriter
   }
   
   ts_log_fine "install dbwriter on host $arco_config(dbwriter_host) ..."
   
   if {[file isfile "$ts_config(product_root)/dbwriter/inst_dbwriter"] != 1} {
      ts_log_severe "dbwriter install script not found"
      return -1
   }
   
   set jdbc_driver [get_jdbc_driver_path]
   if {$jdbc_driver != "NONE"} {
      # copy the jdbc driver
      set args "$jdbc_driver $ts_config(product_root)/dbwriter/lib"
      start_remote_prog "$arco_config(dbwriter_host)" $CHECK_USER "cp" $args
      if {$prg_exit_state != 0} {
         ts_log_severe "copy jdbc driver failed"
         return -1
      }
   }
   
   set HIT_RETURN_TO_CONTINUE       [translate $ts_config(master_host) 0 1 0 [sge_macro DISTINST_HIT_RETURN_TO_CONTINUE] ]
   set CURRENT_GRID_ROOT_DIRECTORY  [translate $ts_config(master_host) 0 1 0 [sge_macro DISTINST_CURRENT_GRID_ROOT_DIRECTORY] "*" "*" ]
   set CELL_NAME_FOR_QMASTER        [translate $ts_config(master_host) 0 1 0 [sge_macro DISTINST_CELL_NAME_FOR_QMASTER] "*"]
   
   ts_log_fine "inst_dbwriter"
   set id [open_remote_spawn_process "$arco_config(dbwriter_host)" "root"  "./inst_dbwriter" "" 0 "$ts_config(product_root)/dbwriter"]
   set sp_id [ lindex $id 1 ]
   
   log_user 1
   
    set error_count 0
    while { $error_count == 0 } {
       if {$CHECK_DEBUG_LEVEL > 0} {
         flush stdout
         if {$CHECK_DEBUG_LEVEL > 1 } {
            puts "-->testsuite: press RETURN"
            set anykey [wait_for_enter 1]
         }
       }
       log_user 1
       set timeout 60
       expect {
          flush stdout
          -i $sp_id full_buffer {
             ts_log_severe "install_dbwriter - buffer overflow, increment CHECK_EXPECT_MATCH_MAX_BUFFER value"
             incr error_count 1
             break
          }   
          -i $sp_id eof { 
             ts_log_severe "install_dbwriter - unexpected eof"
             incr error_count 1
             break
          }
          -i $sp_id "coredump" {
             ts_log_severe "install_dbwriter - coredump"
             incr error_count 1
             break
          }
          -i $sp_id timeout { 
             ts_log_severe "install_dbwriter - timeout while waiting for output" 
             incr error_count 1
             break
          }
          -i $sp_id "Hit <RETURN> to continue >> " {
             send_to_spawn_id $sp_id ""
             continue
          }
          -i $sp_id $CURRENT_GRID_ROOT_DIRECTORY {
             send_to_spawn_id $sp_id $ts_config(product_root)
             continue
          }
          -i $sp_id $CELL_NAME_FOR_QMASTER {
             send_to_spawn_id $sp_id $ts_config(cell)
             continue
          }
          -i $sp_id "Enter the path to your java installation * >> " {
             if {$ts_config(gridengine_version) < 62} {
                set java_home [get_java_home_for_host $arco_config(dbwriter_host) "1.4"]  
             } else {
                set java_home [get_java_home_for_host $arco_config(dbwriter_host) "1.5"]
             }
             
             send_to_spawn_id $sp_id $java_home
             continue
          }
          -i $sp_id "Enter your database type * >> " {
             set input [string range [get_database_type] 0 0 ]
             send_to_spawn_id $sp_id $input
             continue
          }
          -i $sp_id "Enter the name of your * database host * >> " {
             send_to_spawn_id $sp_id [get_database_host]
             continue
          }
          -i $sp_id "Enter the port of your * database * >> " {
             send_to_spawn_id $sp_id [get_database_port]
             continue
          }
          -i $sp_id "Enter the name of your * database * >> " {
             send_to_spawn_id $sp_id [get_database_name]
             continue
          }
          -i $sp_id "Enter the name of the database user * >> " {
             send_to_spawn_id $sp_id [get_arco_write_user]
             continue
          }
          -i $sp_id "Enter the password of the database user >> " {
             send_to_spawn_id $sp_id [get_arco_user_pwd]
             continue
          }
          -i $sp_id "Retype the password >> " {
             send_to_spawn_id $sp_id [get_arco_user_pwd]
             continue
          }
          -i $sp_id "Should the connection to the database be tested? (y/n) * >> " {
             send_to_spawn_id $sp_id "y"
             continue
          }
          -i $sp_id "Do you want to repeat database connection setup*>> " {
             ts_log_severe "inst_dbwriter could not setup the database connection"
             incr error_count 1
             break
          }
          -i $sp_id "Should the database model be upgraded to version * >> " {
             send_to_spawn_id $sp_id "y"
             continue
          }
          -i $sp_id "Enter the name of this database user * >> " {
             send_to_spawn_id $sp_id [get_arco_read_user]
             continue
          }
          -i $sp_id "Enter the interval between two dbwriter runs in seconds * >> " {
             send_to_spawn_id $sp_id $arco_config(arco_dbwriter_interval)
             continue
          }
          -i $sp_id "Enter the path of the dbwriter spool directory *>> " {
             send_to_spawn_id $sp_id ""
             continue
          }
          -i $sp_id "Enter the file with the derived value rules * >> " {
             send_to_spawn_id $sp_id ""
             continue
          }
          -i $sp_id "Enter the debug level of the dbwriter * >> " {
             send_to_spawn_id $sp_id $arco_config(arco_dbwriter_debug_level)
             continue
          }
          -i $sp_id "Enter the name of TABLESPACE for tables * >> " {
             send_to_spawn_id $sp_id $arco_config(tablespace)
             continue
          }
          -i $sp_id "Enter the name of TABLESPACE for indexes * >> " {
             send_to_spawn_id $sp_id $arco_config(tablespace_index)
             continue
          }
          -i $sp_id "Enter the name of the database schema * >> " {
             set input [get_database_schema]
             send_to_spawn_id $sp_id $input
             continue
          }
          -i $sp_id "Are this settings correct? (y/n) * >> " {
             send_to_spawn_id $sp_id "y"
             continue
          }
          -i $sp_id "start dbwriter at machine boot (y/n) * >> " {
             send_to_spawn_id $sp_id "n"
             continue
          }
          #SMF startup is always disabled in testsuite
          -i $sp_id -- "NOTE: If you select \"n\" SMF will be not used at all"  {
             send_to_spawn_id $sp_id "n"
             continue
          }
          -i $sp_id "Installation of dbWriter completed" {
             break
          }
          -i $sp_id "Error:" {
             ts_log_severe "install_dbwriter - $expect_out(0,string)"
             break
          }
          -i $sp_id "ommand failed*\n" {
             ts_log_severe "install_dbwriter - $expect_out(0,string)"
             break
          }
          -i "_exit_status_:(*)" {
             set exit_status [get_string_value_between "_exit_status_:(" ")" $expect_out(0,string)]
             if { $exit_status != 0 } {
                ts_log_severe "install_dbwriter failed with exist status $exit_status"
                incr error_count 1
             }   
             break
          }
          -i $sp_id default {
             ts_log_severe "install_dbwriter - undefined behaviour: $expect_out(buffer)"
             incr error_count 1
             break
          }
       } ;# end of expect
    } ;# end of while
   close_spawn_process $id 
   
   return $error_count
}

