#!/vol2/TCL_TK/glinux/bin/expect
# global variables ... (defined in main check routine, but you can use it)
#
# gloabl CHECK_ACTUAL_TEST_PATH  ;# this directory
# global CHECK_USER              ;# user who start test
# global CHECK_ARCH              ;# architecture of this system (e.g. irix6)
# global CHECK_HOST              ;# hostname of this system (e.g. DWAIN)
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE

global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
set check_root_access_needs  "yes"
set check_name          "arco_reporting_install"
set check_category      "INSTALL COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)   "install the ARCo webapplication and start them up, "
set check_needs         "init_core_system arco_database_install"   ;# dependencies of this check (name of other check)
set check_init_level_procedure "arco_reporting_install_init_level"
set check_functions     ""                              ;# functions to call (in order)

lappend check_functions "arco_reporting_install"

# ---------------------------------------------------------------------------------
# here the tests begin ....

proc arco_reporting_install_init_level {} {
  global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level else
}


proc arco_reporting_install {} {
   global CHECK_CORE_MASTER CHECK_OUTPUT CHECK_USER CHECK_DEBUG_LEVEL
   global ts_config arco_config ts_host_config ts_user_config
   
   
   if {[get_dbwriter_status 0] == 0} {
      shutdown_dbwriter
   }
   
   puts $CHECK_OUTPUT "install reporting module on host $arco_config(swc_host) ..."
   
   if {[file isfile "$ts_config(product_root)/reporting/inst_reporting"] != 1} {
      add_proc_error "arco_reporting_install" -1 "reporting install script not found"
      return -1
   }
   
   if {$arco_config(jdbc_driver) != "NONE"} {
      # copy the jdbc driver
      set args "$arco_config(jdbc_driver) $ts_config(product_root)/reporting/WEB-INF/lib"
      start_remote_prog "$arco_config(dbwriter_host)" $CHECK_USER "cp" "$args"
      if {$prg_exit_state != 0} {
         add_proc_error "arco_reporting_install" -1 "copy jdbc driver failed"
         return -1
      }
   }
   
   
   set HIT_RETURN_TO_CONTINUE       [translate $CHECK_CORE_MASTER 0 1 0 [sge_macro DISTINST_HIT_RETURN_TO_CONTINUE] ]
   set CURRENT_GRID_ROOT_DIRECTORY  [translate $CHECK_CORE_MASTER 0 1 0 [sge_macro DISTINST_CURRENT_GRID_ROOT_DIRECTORY] "*" "*" ]
   set CELL_NAME_FOR_QMASTER        [translate $CHECK_CORE_MASTER 0 1 0 [sge_macro DISTINST_CELL_NAME_FOR_QMASTER] "*"]
   
    set user_count 0 ;# how many uses has already been added
    set users { }
    lappend users $ts_user_config(first_foreign_user)
    lappend users $ts_user_config(second_foreign_user)
    
    # We do not clean the arco spool dir, because the owner in noaccess
    set spool_dir [get_local_spool_dir $arco_config(swc_host) arco 0]
    
    if {$spool_dir == ""} {
       add_proc_error "arco_reporting_install" -1 "Can not get local spool dir for host $arco_config(swc_host)"
       return -1
    }

   # we have to change the ownership of the queries and results subdirectory, because
   # the installation script set it to noaccess
   start_remote_prog $arco_config(swc_host) root "chown" "-R $CHECK_USER $spool_dir/queries"
   start_remote_prog $arco_config(swc_host) root "chown" "-R $CHECK_USER $spool_dir/results"
   
   # no we can cleanup the spool directory
   set spool_dir [get_local_spool_dir $arco_config(swc_host) arco 1]
   
   puts $CHECK_OUTPUT "inst_reporting"
   set id [open_remote_spawn_process "$arco_config(swc_host)" "root"  "./inst_reporting" "" 0 $ts_config(product_root)/reporting]
   set sp_id [ lindex $id 1 ]
   
   log_user 1
   
    set error_count 0
  
    while { $error_count == 0 } {
       if {$CHECK_DEBUG_LEVEL > 1} {
         flush stdout
         flush $CHECK_OUTPUT
       }
       if {$CHECK_DEBUG_LEVEL > 2} {
         puts $CHECK_OUTPUT "-->testsuite: press RETURN"
         set anykey [wait_for_enter 1]
       }
       log_user 1
       set timeout 60
       expect {
          flush stdout
          flush $CHECK_OUTPUT 
          -i $sp_id full_buffer {
             add_proc_error "arco_reporting_install" -1 "buffer overflow please increment CHECK_EXPECT_MATCH_MAX_BUFFER value"
             incr error_count 1
             break
          }   
          -i $sp_id eof { 
             add_proc_error "arco_reporting_install" -1 "unexpected eof"
             incr error_count 1
             break
          }
          -i $sp_id "coredump" {
             add_proc_error "arco_reporting_install" "-2" "install_reporting - coredump"
             incr error_count 1
             break
          }
          -i $sp_id timeout { 
             add_proc_error "arco_reporting_install" -1 "timeout while waiting for output" 
             incr error_count 1
             break
          }
          -i $sp_id "Hit <RETURN> to continue >> " {
             send_to_spawn_id $sp_id ""
             continue
          }
          -i $sp_id $CURRENT_GRID_ROOT_DIRECTORY {
             send_to_spawn_id $sp_id $ts_config(product_root)
             continue
          }
          -i $sp_id $CELL_NAME_FOR_QMASTER {
             send_to_spawn_id $sp_id $ts_config(cell)
             continue
          }
          -i $sp_id "Please enter the path to your java installation * >> " {
             set java_home [ get_java_home_for_host $arco_config(swc_host) ]
             send_to_spawn_id $sp_id $java_home
             continue
          }
          -i $sp_id "Please enter the path to the spool directory * >> " {
             send_to_spawn_id $sp_id $spool_dir
             continue
          }
          -i $sp_id "Enter your database type ( o = Oracle, p = PostgreSQL, m = MySQL ) * >> " {
             if { $arco_config(database_type) == "oracle" } {
                set input "o"
             } elseif { $arco_config(database_type) == "postgres" } {
                set input "p"
             } else {
                set input "m"
             }
             send_to_spawn_id $sp_id $input
             continue
          }
          -i $sp_id "Please enter the name of your * db host * >> " {
             send_to_spawn_id $sp_id $arco_config(database_host)
             continue
          }
          -i $sp_id "Please enter the port of your * db * >> " {
             send_to_spawn_id $sp_id $arco_config(database_port)
             continue
          }
          -i $sp_id "Please enter the name of your * database * >> " {
             send_to_spawn_id $sp_id [get_database_name]
             continue
          }
          -i $sp_id "Please enter the name of the database user * >> " {
             send_to_spawn_id $sp_id [get_arco_read_user]
             continue
          }
          -i $sp_id "Please enter the password of the database user >> " {
             send_to_spawn_id $sp_id "secret"
             continue
          }
          -i $sp_id "Please retype the password >> " {
             send_to_spawn_id $sp_id "secret"
             continue
          }
          -i $sp_id "Please enter the name of the database schema * >> " {
             if { $arco_config(database_type) == "oracle" } {
                set input [get_arco_write_user]
             } else {
                set input "public"
             }
             send_to_spawn_id $sp_id $input
             continue
          }
          -i $sp_id "Should the connection to the database be tested? (y/n) * >> " {
             send_to_spawn_id $sp_id "y"
             continue
          }
          -i $sp_id "Do you want to repeat database connection setup? (y/n) * >>" {
             add_proc_error "arco_reporting_install" "-2" "inst_dbwriter could not setup the database connection"
             incr error_count 1
             break
          }
          -i $sp_id "Enter a login name of a user (Press enter to finish) >> " {
             if { $user_count < [llength $users] } {
                send_to_spawn_id $sp_id [lindex $users $user_count]
                incr user_count 1
             } else {
                send_to_spawn_id $sp_id ""
             }
          }
          -i $sp_id "Are this settings correct? (y/n) * >> " {
             send_to_spawn_id $sp_id "y"
             continue
          }
          -i $sp_id "Remove directory * (y/n) * >> " {
             send_to_spawn_id $sp_id "y"
             continue
          }
          -i $sp_id "Should the * reporting module * be unregistered? (y/n) * >> " {
             send_to_spawn_id $sp_id "y"
             continue
          }
          
          -i $sp_id "Directory ${spool_dir} does not exist, create it? (y/n) * >> " {
             send_to_spawn_id $sp_id "y"
             continue
          }
          -i $sp_id "ARCo reporting successfully installed" {
             break
          }
          -i $sp_id "Error:" {
             add_proc_error "arco_reporting_install" -1 "Unexpected Error: $expect_out(0,string)"
             break
          }
          -i $sp_id "ommand failed*\n" {
             add_proc_error "arco_reporting_install" -1 "Command failed: $expect_out(0,string)"
             break
          }
          -i "_exit_status_:(*)" {
             set exit_status [get_string_value_between "_exit_status_:(" ")" $expect_out(0,string)]
             if { $exit_status != 0 } {
                add_proc_error "arco_reporting_install" -1 "install_reporting failed with exist status $exit_statues"
                incr error_count 1
             }   
             break
          }
          -i $sp_id default {
             add_proc_error "arco_reporting_install" -1 "undefined behaviour: $expect_out(buffer)"
             incr error_count 1
             break
          }
       } ;# end of expect
    } ;# end of while

   close_spawn_process $id 

   return $error_count
}

