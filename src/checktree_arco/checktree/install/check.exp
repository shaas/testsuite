#!/vol2/TCL_TK/glinux/bin/expect
# global variables ... (defined in main check routine, but you can use it)
#
# gloabl CHECK_ACTUAL_TEST_PATH  ;# this directory
# global CHECK_USER              ;# user who start test
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE

global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
set check_root_access_needs  "yes"
set check_name          "arco_database_install"
set check_category      "INSTALL COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)   "install the arco database"
set check_needs         "init_core_system"                              ;# dependencies of this check (name of other check)
set check_init_level_procedure "arco_database_install_init_level"
set check_functions     ""                              ;# functions to call (in order)

lappend check_functions "arco_database_install"

# ---------------------------------------------------------------------------------
# here the tests begin ....

proc arco_database_install_init_level {} {
  global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level else
}

proc arco_database_install {} {
   global arco_config
   
   if { $arco_config(database_type) == "oracle" } {
      oracle_init_arco_db
   } elseif { $arco_config(database_type) == "postgres" } {
      postgres_init_arco_db
   } elseif { $arco_config(database_type) == "mysql" } {
      mysql_init_arco_db
   }
}

## ----------- ORACLE ----------------------------------------------------------
proc oracle_init_arco_db {} {
   
   global ts_config ts_host_config arco_config CHECK_DEBUG_LEVEL
   

   set id [sqlutil_create]
   if { $id == "-1" } {
      add_sql_error "oracle_init_arco_db" "-2" "Can not create sqlutil"
      return -2
   }   
   set sp_id [ lindex $id 1 ]
   
   # connect to the admin database
   if { [ sqlutil_connect $sp_id 1 ] != 0 } {
      add_sql_error "oracle_init_arco_db" "-2" "Can not connect to database"      
      close_spawn_process $id
      return -2
   }
   
   set arco_write_user [get_arco_write_user]
   set sql "SELECT username FROM dba_users WHERE username = '${arco_write_user}'"
   
   set res [sqlutil_query $sp_id "$sql" result_array column_names]
   if { $res < 0 } {
      add_sql_error "oracle_init_arco_db" "-2" "can not query arco_write_user"
      close_spawn_process $id 
      return -2
   } elseif { $res > 0 } {
      # database does exists => drop it
      set sql "DROP USER \"$arco_write_user\" CASCADE"
      if { [ sqlutil_exec $sp_id "$sql" 120 ] != 0 } {
         add_sql_error "oracle_init_arco_db" "-2" "Can't drop user $arco_write_user"
         close_spawn_process $id 
         return -2
      }
   }
   
   set arco_read_user [get_arco_read_user]
   set sql "SELECT username FROM dba_users WHERE username = '${arco_read_user}'"
   
   set res [sqlutil_query $sp_id "$sql" result_array column_names]
   if { $res < 0 } {
      add_sql_error "oracle_init_arco_db" "-2" "can not query arco_read_user"
      close_spawn_process $id 
      return -2
   } elseif { $res > 0 } {
      set sql "DROP USER \"$arco_read_user\" CASCADE"
      if { [ sqlutil_exec $sp_id "$sql" 120] != 0 } {
         add_sql_error "oracle_init_arco_db" "-2" "Can't drop user $arco_read_user"
         close_spawn_process $id 
         return -2
      }
   }
   
   set    sql "CREATE USER ${arco_write_user} PROFILE \"DEFAULT\" IDENTIFIED BY secret"
   append sql " DEFAULT TABLESPACE \"USERS\" TEMPORARY TABLESPACE \"TEMP\" QUOTA 100 M ON \"USERS\" ACCOUNT UNLOCK"
   
   if { [ sqlutil_exec $sp_id "$sql"] != 0 } {
      add_sql_error "oracle_init_arco_db" "-2" "Can't create user $arco_write_user"
      close_spawn_process $id 
      return -2
   }
   
   # Grant priviliges for arco_write_user
   set sql "GRANT CREATE ANY SYNONYM, CREATE TABLE, CREATE VIEW, CREATE SESSION TO ${arco_write_user}"
   if { [ sqlutil_exec $sp_id "$sql"] != 0 } {
      add_sql_error "oracle_init_arco_db" "-2" "Can't grant privileges to $arco_write_user"
      close_spawn_process $id 
      return -2
   }
   
   set    sql "CREATE USER ${arco_read_user} PROFILE \"DEFAULT\" IDENTIFIED BY secret"
   append sql " DEFAULT TABLESPACE \"USERS\" TEMPORARY TABLESPACE \"TEMP\" QUOTA 100 M ON \"USERS\" ACCOUNT UNLOCK"
   
   if { [ sqlutil_exec $sp_id "$sql"] != 0 } {
      add_sql_error "oracle_init_arco_db" "-2" "Can't create user $arco_write_user"
      close_spawn_process $id 
      return -2
   }
   
   # Grant priviliges for arco_write_user
   set sql "GRANT CREATE SESSION TO ${arco_read_user}"
   if {[sqlutil_exec $sp_id "$sql"] != 0} {
      add_sql_error "oracle_init_arco_db" "-2" "Can't grant privileges to  $arco_read_user"
      close_spawn_process $id 
      return -2
   }
   
   close_spawn_process $id 
   return 0
}

## ----------- POSTGRES --------------------------------------------------------

proc postgres_init_arco_db {} {
   global ts_config ts_host_config arco_config 
   global CHECK_OUTPUT CHECK_DEBUG_LEVEL

   if { [get_dbwriter_status 0] == 0} {
      shutdown_dbwriter
   }
   
   set id [sqlutil_create]
   if { $id == "-1" } {
      add_sql_error "postgres_init_arco_db" "-2" "Can not create sqlutil"
      return -2
   }   
   set sp_id [ lindex $id 1 ]
   
   # connect to the admin database
   if {[sqlutil_connect $sp_id 1] != 0} {
      add_sql_error "postgres_init_arco_db" "-2" "Can not connect to database"      
      close_spawn_process $id
      return -2
   }
   
   set db_name [get_database_name]
   set sql "SELECT datname FROM pg_database where datname = '${db_name}'"
   
   set column_names {}
   array set result_array {}
   set res [sqlutil_query $sp_id $sql result_array column_names]
   if {$res < 0} {
      add_sql_error "postgres_init_arco_db" "-2" "can not query database name"
      close_spawn_process $id 
      return -2
   } elseif {$res > 0} {
      # database does exists => drop it
      set sql "drop database $db_name"
      if {[sqlutil_exec $sp_id "$sql"] != 0} {
         add_sql_error "postgres_init_arco_db" "-2" "Can't drop database $db_name, may be another user is using this database"
         close_spawn_process $id 
         return -2
      }
   }
   
   set arco_write_user [get_arco_write_user]
   set sql "SELECT usename FROM pg_user WHERE usename = '${arco_write_user}'"
   
   set res [sqlutil_query $sp_id "$sql" result_array column_names]
   if {$res < 0} {
      add_sql_error "postgres_init_arco_db" "-2" "can not query arco_write_user"
      close_spawn_process $id 
      return -2
   } elseif {$res > 0} {
      # user does exists => drop it
      set sql "drop user $arco_write_user"
      if {[sqlutil_exec $sp_id "$sql"] != 0} {
         add_sql_error "postgres_init_arco_db" "-2" "Can't drop user $arco_write_user"
         close_spawn_process $id 
         return -2
      }
   }
   
   set arco_read_user [get_arco_read_user]
   set sql "SELECT usename FROM pg_user WHERE usename = '${arco_read_user}'"
   
   set res [sqlutil_query $sp_id "$sql" result_array column_names]
   if {$res < 0} {
      add_sql_error "postgres_init_arco_db" "-2" "can not query arco_read_user"
      close_spawn_process $id 
      return -2
   } elseif {$res > 0} {
      set sql "drop user $arco_read_user"
      if {[sqlutil_exec $sp_id "$sql"] != 0} {
         add_sql_error "postgres_init_arco_db" "-2" "Can't drop user $arco_read_user"
         close_spawn_process $id 
         return -2
      }
   }
   
   set sql "create user $arco_write_user PASSWORD 'secret'"
   if {[sqlutil_exec $sp_id "$sql"] < 0} {
      add_sql_error "postgres_init_arco_db" "-2" "Can't create user $arco_write_user"
      close_spawn_process $id 
      return -2
   }
   
   set sql "create user $arco_read_user PASSWORD 'secret'"
   if {[sqlutil_exec $sp_id "$sql"] < 0} {
      add_sql_error "postgres_init_arco_db" "-2" "Can't create user $arco_write_user"
      close_spawn_process $id 
      return -2
   }
   
   set sql "create database $db_name owner $arco_write_user"
   if {[sqlutil_exec $sp_id "$sql"] < 0} {
      add_sql_error "postgres_init_arco_db" "-2" "Can't create database $db_name"
      close_spawn_process $id
      return -2
   }
   
   close_spawn_process $id
   return 0
}

## ----------- MySQL --------------------------------------------------------
proc mysql_init_arco_db {} {

   global ts_config ts_host_config arco_config 
   global CHECK_OUTPUT CHECK_DEBUG_LEVEL

   if { [get_dbwriter_status 0] == 0} {
      shutdown_dbwriter
   }
   
   set id [sqlutil_create]
   if { $id == "-1" } {
      add_sql_error "mysql_init_arco_db" "-2" "Can't create sqlutil"
      return -2
   }   
   set sp_id [ lindex $id 1 ]
   
   # connect to the admin database
   if {[sqlutil_connect $sp_id 1] != 0} {
      add_sql_error "mysql_init_arco_db" "-2" "Can not connect to database"      
      close_spawn_process $id
      return -2
   }
   
   set db_name [get_database_name]
   set column_names {}
   array set result_array {}
   
   # drop database ${db_name} if exists
   set sql "SELECT schema_name FROM information_schema.schemata where schema_name = '${db_name}'"
   set res [sqlutil_query $sp_id $sql result_array column_names]
   if {$res < 0} {
      add_sql_error "mysql_init_arco_db" "-2" "can not query database name"
      close_spawn_process $id 
      return -2
   } elseif {$res > 0} {
      # database does exists => drop it
      set sql "drop database $db_name"
      if {[sqlutil_exec $sp_id "$sql"] != 0} {
         add_sql_error "mysql_init_arco_db" "-2" "Can't drop database $db_name, may be another user is using this database"
         close_spawn_process $id 
         return -2
      }
   }
   
   # drop user if exists
   set arco_write_user [get_arco_write_user]
   set sql "SELECT user, host FROM mysql.user WHERE user = '${arco_write_user}'"
   set res [sqlutil_query $sp_id "$sql" result_array column_names]
   if {$res < 0} {
      add_sql_error "mysql_init_arco_db" "-2" "Can't query user $arco_write_user"
      close_spawn_process $id 
      return -2
   } elseif {$res > 0} {
      # user does exists => drop it
      foreach i [ array names result_array ] {
         if { "$result_array($i)" != "${arco_write_user}" } {
            # revoke user's privileges 
            set sql "REVOKE ALL PRIVILEGES, GRANT OPTION FROM '${arco_write_user}'@'$result_array($i)'"
            if {[sqlutil_exec $sp_id "$sql"] != 0} {
               add_sql_error "mysql_init_arco_db" "-2" "Can't revoke privileges from user '$arco_write_user'@'$result_array($i)'"
               close_spawn_process $id 
#               return -2
            }
            # drop user 
            set sql "drop user '$arco_write_user'@'$result_array($i)'"
            if {[sqlutil_exec $sp_id "$sql"] != 0} {
               add_sql_error "mysql_init_arco_db" "-2" "Can't drop user '$arco_write_user'@'$result_array($i)'"
               close_spawn_process $id 
               return -2
            }
         }
      }
   }

   set arco_read_user [get_arco_read_user]
   set sql "SELECT user, host FROM mysql.user WHERE user = '${arco_read_user}'"
   
   set res [sqlutil_query $sp_id "$sql" result_array column_names]
   if {$res < 0} {
      add_sql_error "mysql_init_arco_db" "-2" "Can't query user $arco_read_user"
      close_spawn_process $id 
      return -2
   } elseif {$res > 0} {
      foreach i [ array names result_array ] {
         if { "$result_array($i)" != "${arco_read_user}" } {
            # before dropping the user we have to revoke his privileges 
               set sql "REVOKE SELECT, SHOW VIEW on ${db_name}.* FROM '${arco_read_user}'@'$result_array($i)'"
               if {[sqlutil_exec $sp_id "$sql"] != 0} {
                  add_sql_error "mysql_init_arco_db" "-2" "Can't revoke privileges from user '${arco_read_user}'@'$result_array($i)'"
                  close_spawn_process $id 
#                  return -2
               }
            # drop user 
            set sql "drop user '$arco_read_user'@'$result_array($i)'"
            if {[sqlutil_exec $sp_id "$sql"] != 0} {
               add_sql_error "mysql_init_arco_db" "-2" "Can't drop user '$arco_read_user'@'$result_array($i)'"
               close_spawn_process $id 
               return -2
            }
         }
      }
   }
  
   set sql "create database $db_name"
   if {[sqlutil_exec $sp_id "$sql"] < 0} {
      add_sql_error "mysql_init_arco_db" "-2" "Can't create database $db_name"
      close_spawn_process $id
      return -2
   }

   # Note: 
   # In MySQL database user is identified by the host from which he connects and his username
   # We have to create users: 'username'@'%' 
   #                          'username'@'database_host' [ mandatory if swc_host = database_host ]
   # The grant statement also creates the user in the database

   set hosts {}
   lappend hosts "%"
   lappend hosts "$arco_config(database_host)"
    
   foreach host $hosts {
      set sql "GRANT ALL on *.* to '$arco_write_user'@'$host' IDENTIFIED BY 'secret' with GRANT OPTION"
      if {[sqlutil_exec $sp_id "$sql"] < 0} {
         add_sql_error "mysql_init_arco_db" "-2" "Can't grant privileges to user '$arco_write_user'@'$host'"
         close_spawn_process $id 
         return -2
      }
   }

   foreach host $hosts { 
      set sql "GRANT SELECT, SHOW VIEW on ${db_name}.* to '$arco_read_user'@'$host' IDENTIFIED BY 'secret'"
      if {[sqlutil_exec $sp_id "$sql"] < 0} {
         add_sql_error "mysql_init_arco_db" "-2" "Can't grant privileges to user '$arco_read_user'@'$host'"
         close_spawn_process $id 
         return -2
      }
   }
   
   set sql "FLUSH PRIVILEGES"
   if {[sqlutil_exec $sp_id "$sql"] < 0} {
      add_sql_error "mysql_init_arco_db" "-2" "Can't flush privileges"
      close_spawn_process $id 
      return -2
   }
   
   close_spawn_process $id
#   add_proc_error "mysql_init_arco_db" 0 "arco db initialized"
   return 0

}
