#!/vol2/TCL_TK/glinux/bin/expect
# global variables ... (defined in main check routine, but you can use it)
#
# gloabl CHECK_ACTUAL_TEST_PATH  ;# this directory
# global CHECK_USER              ;# user who start test
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE

global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
set check_root_access_needs    "yes"
set check_name                 "arcorun_commandline"
set check_category             "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)       "Test the arcorun command line options"
set check_needs                "arco_database_install"                  
set check_init_level_procedure "arcorun_commandline_init_level"
set check_functions            ""   
set check_highest_level        0

set check_setup_function "arcorun_commandline_setup"
set check_cleanup_function "arcorun_commandline_cleanup"

lappend check_functions "arcorun_commandline_check"

# ---------------------------------------------------------------------------------
# here the tests begin ....
global CHECK_PROTOCOL_DIR
global arcorun_output_dir  

set arcorun_output_dir $CHECK_PROTOCOL_DIR/arcorun 

proc arcorun_commandline_init_level {} {
  global CHECK_ACT_LEVEL

  if { $CHECK_ACT_LEVEL < 4 } {
     return 0
  }
  return -1
}

#****** check/arcorun_commandline_setup() ************************************************
#  NAME
#    arcorun__commandline_setup() -- setup procedure for the arcrun test
#
#  SYNOPSIS
#    arcorun__commandline_setup { } 
#
#  FUNCTION
#     o sets the owner of the queries and results back to $CHECK_USER
#     o create the arco run output diretory ($CHECK_PROTOCOL_DIR/arcorun)
#
#  INPUTS
#
#*******************************************************************************
proc arcorun_commandline_setup {} {
   
   global CHECK_USER arcorun_output_dir arco_config
   
   start_remote_prog $arco_config(swc_host) $CHECK_USER "mkdir" "-p $arcorun_output_dir"
   if { $prg_exit_state != 0 } {
      add_proc_error "arcorun_commandline_setup" -1 "Can not create directory $arcorun_output_dir"
      return -1
   }
   
   start_remote_prog $arco_config(swc_host) $CHECK_USER "rm" "-f $arcorun_output_dir/*"
   if { $prg_exit_state != 0 } {
      add_proc_error "arcorun_commandline_setup" -3 "Can not clean directory $arcorun_output_dir"
      return -1
   }
   
   return 0
}

#****** check/arcorun_commandline_cleanup() ************************************************
#  NAME
#    arcorun_commandline_cleanup() -- clean up procedure for the arcrun test
#
#  SYNOPSIS
#    arcorun_commandline_cleanup { } 
#
#  FUNCTION
#     o sets the owner of the queries and results back to noaccess
#     o cleans the arco run output diretory ($CHECK_PROTOCOL_DIR/arcorun)
#
#  INPUTS
#
#*******************************************************************************
proc arcorun_commandline_cleanup {} {
   global arcorun_output_dir CHECK_USER arco_config
   
   start_remote_prog $arco_config(swc_host) $CHECK_USER "rm" "-r $arcorun_output_dir"
   if { $prg_exit_state != 0 } {
      add_proc_error "arcorun_setup" -1 "Can not clean directory $arcorun_output_dir"
      return -1
   }
   
   return 0
}

#****** check/arcorun_commandline_check() **********************************************
#  NAME
#    arcorun_commandline_check() -- checks the command line options of the arcorun util
#
#  SYNOPSIS
#    arcorun_commandline_check { } 
#
#  FUNCTION
#     checks the command line options of the arcorun util
#
#  INPUTS
#
#*******************************************************************************
proc arcorun_commandline_check {} {
   global CHECK_ACT_LEVEL arcorun_output_dir ts_config
   
   set test_dir $arcorun_output_dir/arcorun_cli_check
   set test_file $arcorun_output_dir/arcorun_cli_check/blubber
   
   
   if { $CHECK_ACT_LEVEL != 0 } {
      return 0
   }
   
   set testcases {}
   lappend testcases { ""                      "ArcoRun.illegalArgumentCount"  }
   lappend testcases { "-c"                    "ArcoRun.arcoConfFileisMissing" }
   lappend testcases { "-d"                    "ArcoRun.debugLevelIsMissing"   }
   lappend testcases { "-d blubber"            "ArcoRun.invalidLogLevel"       }
   lappend testcases { "-o"                    "ArcoRun.outputFileMissing"     }
   lappend testcases { "-f blubber"            "ArcoRun.unknownOutputFormat"   }
   lappend testcases { "-lb"                   "ArcoRun.missingLateBindingParameter" }
   lappend testcases { "-lb blubber"           "ArcoRun.invalidLateBindingParameter" }
   lappend testcases { "-lbfile"               "ArcoRun.missingLateBindingFile" }
   lappend testcases { "-lbfile $test_file"    "ArcoRun.latebindingIOError" }
   lappend testcase  { "-n"                    "ArcoRun.missingResultName" }
   lappend testcase  { "-blubber"              "ArcoRun.unknownOption" }
   lappend testcase  { "-o xml"                "ArcoRun.missingQueryName" }
   lappend testcase  { "-o html"               "ArcoRun.missingOutputForHTML" }
   lappend testcase  { "-o html -f $test_file" "ArcoRun.invalidOutputForHTML" }
   lappend testcase  { "__blubber__"           "ArcoRun.queryNotFound" }
   lappend testcase  { "Job Log"               "ArcoRun.missingLatebinding" }
   if {$ts_config(gridengine_version) >= 62} {
      lappend testcase  { "-cl"                   "ArcoRun.missingClusterName }
   }
   
   foreach testcase $testcases {
      set args [lindex $testcase 0]
      set msg  [lindex $testcase 1]
      
      set res [arcorun_exec "$args" output]
      if { $res == 0 } {
         add_proc_error "arcorun_cli_check" -1 "Invalid exit state ($args)"
      }
      if { [string first $msg $output] >= 0 } {
         add_proc_error "arcorun_cli_check" -1 "Error message '$msg' is not translated"
      }

   }
   return 0
}

