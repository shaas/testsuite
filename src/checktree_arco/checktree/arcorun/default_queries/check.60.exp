#!/vol2/TCL_TK/glinux/bin/expect
# global variables ... (defined in main check routine, but you can use it)
#
# gloabl CHECK_ACTUAL_TEST_PATH  ;# this directory
# global CHECK_USER              ;# user who start test
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE

global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system check_init_level_procedure

# This file shows some check spezific things
set check_root_access_needs    "yes"
set check_name                 "arcorun"
set check_category             "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)       "The the xml output of the arcorun util"
set check_description(1)       "The the cvs output of the arcorun util"
set check_description(2)       "The the html output of the arcorun util"
set check_description(3)       "The the pdf output of the arcorun util"
set check_needs                "arco_database_install"                  
set check_init_level_procedure "arcorun_default_queries_init_level"
set check_functions            ""   
set check_highest_level        3

set check_setup_function "arcorun_default_queries_setup"
set check_cleanup_function "arcorun_default_queries_cleanup"

lappend check_functions "arcorun_default_queries_check"

# ---------------------------------------------------------------------------------
# here the tests begin ....
global CHECK_PROTOCOL_DIR
global arcorun_output_dir  

#set arcorun_output_dir $CHECK_PROTOCOL_DIR/arcorun 
set arcorun_output_dir "/tmp/arcorun_output"

proc arcorun_default_queries_init_level {} {
  global CHECK_ACT_LEVEL

  if {$CHECK_ACT_LEVEL < 4} {
     return 0
  }

  return -1
}

#****** check/arcorun_default_queries_setup() ************************************************
#  NAME
#    arcorun_default_queries_setup() -- setup procedure for the arcrun test
#
#  SYNOPSIS
#    arcorun_default_queries_setup { } 
#
#  FUNCTION
#     o sets the owner of the queries and results back to $CHECK_USER
#     o create the arco run output diretory ($CHECK_PROTOCOL_DIR/arcorun)
#
#  INPUTS
#
#*******************************************************************************
proc arcorun_default_queries_setup {} {
   global CHECK_USER arcorun_output_dir arco_config
   
   if { [arcorun_change_spooldir_owner $CHECK_USER] != 0 } {
      ts_log_severe "Can not change owner of queries and results"
      return -1
   }   
   
   start_remote_prog $arco_config(swc_host) $CHECK_USER "mkdir" "-p $arcorun_output_dir"
   if {$prg_exit_state != 0} {
      ts_log_severe "Can not create directory $arcorun_output_dir"
      return -1
   }
   
   start_remote_prog $arco_config(swc_host) $CHECK_USER "rm" "-f $arcorun_output_dir/*"
   if {$prg_exit_state != 0} {
      ts_log_config "Can not clean directory $arcorun_output_dir"
      return -1
   }
   
   return 0
}

#****** check/arcorun_default_queries_cleanup() ************************************************
#  NAME
#    arcorun_default_queries_cleanup() -- clean up procedure for the arcrun test
#
#  SYNOPSIS
#    arcorun_default_queries_cleanup { } 
#
#  FUNCTION
#     o sets the owner of the queries and results back to get_SWC_USER
#     o cleans the arco run output diretory ($CHECK_PROTOCOL_DIR/arcorun)
#
#  INPUTS
#
#  SEE ALSO
#     arcorun/get_SWC_USER
#
#*******************************************************************************
proc arcorun_default_queries_cleanup {} {
   global arcorun_output_dir CHECK_USER arco_config
   
   if { [arcorun_change_spooldir_owner [get_SWC_USER]] != 0 } {
      ts_log_severe "Can not change owner of queries and results"
      return -1
   }
   
   start_remote_prog $arco_config(swc_host) $CHECK_USER "rm" "-rf $arcorun_output_dir"
   if { $prg_exit_state != 0 } {
      ts_log_severe "Can not clean directory $arcorun_output_dir"
      return -1
   }
   
   return 0
}

#****** check/arcorun_default_queries_check() **************************************************
#  NAME
#    arcorun_default_queries_check() -- Execute all default queries with arcorun
#
#  SYNOPSIS
#    arcorun_default_queries_check { } 
#
#  FUNCTION
#     This method executes all default queries of the ARCo web application
#
#*******************************************************************************
proc arcorun_default_queries_check {} {
   global CHECK_ACT_LEVEL arcorun_output_dir
   global ts_config

   set add_args ""
   
   switch -- $CHECK_ACT_LEVEL {
      0 { ;# xml output no additional params necessary
         set output_format "xml"
      }
      1 { ;# csv output
        set add_args "-f csv"
         set output_format "csv"
      }
      2 { ;# html output
        set output_format "html"
        set add_args "-f html -o $arcorun_output_dir"        
      }
      3 { ;# pdf output
        set output_format "pdf"
        set add_args "-f pdf"
      }
   }
   
   # first of all do a scan
   set output ""
   set res [arcorun_exec "-l" output]
   if { $res != 0 } {
      ts_log_severe "arcorun -l failed: $output"
      return -1
   }
   ts_log_fine "Test $output_format output of arcorun"
   
   set queries {}
   lappend queries { "Statistics" }
   lappend queries { "Average Job Turnaround Time" }
   lappend queries { "Accounting per Department"  }
   lappend queries { "Accounting per User" }
   lappend queries { "Number of Jobs completed" }
   lappend queries { "Average Job Wait Time"  }
   lappend queries { "Host Load" }
   lappend queries { "Accounting per Project" }
   lappend queries { "Queue Consumables" "-lb variable=slots" }
   lappend queries { "Job Log" "-lb job_number=1" }
   if {$ts_config(gridengine_version) >= 61} {
      lappend queries { "Statistic History" }
      lappend queries { "DBWriter Performance" }
   }
   
   if {$ts_config(gridengine_version) >= 62} {
      lappend queries { "Advance Reservation Attributes" "-lb ar_number=1" }
      lappend queries { "Advance Reservation Log" "-lb ar_number=1" }
      lappend queries { "Advance Reservation Time Usage"  }
      lappend queries { "Advance Reservation by User" "-lb ar_owner=sgetest1" }
      lappend queries { "Accounting per AR" }
      lappend queries { "Number of Jobs Completed per AR" }
   }


   set error_count 0
   foreach query_spec $queries {
      set query [lindex $query_spec 0]
      
      set args "$add_args"
      set len  [llength $query_spec]
      for {set i 1} { $i < $len  } {incr i 1} {
         append args " [lindex $query_spec $i]"
      }
      ts_log_fine "Execute query $query ($args)"
      set res [arcorun_exec "$args '$query'" output]
      if {$res != 0} {
         ts_log_severe "Query $query failed:\n$output"
         incr error_count 1
      }
   }

   if { $error_count > 0 } {
      return -1
   } else {
      return 0
   }
}



