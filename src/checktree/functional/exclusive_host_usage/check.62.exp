#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global check_need_running_system

# define a level initialization procedure:
set check_init_level_procedure "exclusive_host_usage_init_level"

# define test's name and run level descriptions
set check_name            "exclusive_host_usage"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  ""

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function exclusive_host_usage_setup
set check_cleanup_function exclusive_host_usage_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "sequential_exclusive_blocked"
lappend check_functions "sequential_non_exclusive_blocked"
lappend check_functions "parallel_exclusive_blocked"
lappend check_functions "parallel_non_exclusive_blocked"
lappend check_functions "sequential_resource_reservation"
lappend check_functions "parallel_resource_reservation"
lappend check_functions "sequential_AR_exclusive_blocked"
lappend check_functions "sequential_AR_non_exclusive_blocked"
lappend check_functions "parallel_AR_exclusive_blocked"
lappend check_functions "parallel_AR_non_exclusive_blocked"
lappend check_functions "exclusive_job_consumables"

proc exclusive_host_usage_init_level {} {
   global CHECK_ACT_LEVEL
   switch -- $CHECK_ACT_LEVEL {
      0 {
         return 0
      }
   }
   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc exclusive_host_usage_setup {} {
   global ts_config CHECK_FIRST_FOREIGN_SYSTEM_USER
   global exclusive_hosts
   global exclusive_host_usage_complex_backup

   if {![ge_has_feature "exclusive-host-usage"]} {
      ts_log_config "need \"exclusive-host-usage\" feature for this test"
      return 99
   }

   if {$ts_config(source_dir) == "none"} {
      ts_log_config "source directory is set to \"none\" - cannot run test"
      return 99
   }

   get_complex exclusive_host_usage_complex_backup

   # need 1 test hosts
   set exclusive_hosts [host_conf_get_suited_hosts 2]

   # add exclusive complex
   set tmp_complex(exclusive) "excl BOOL EXCL YES YES 0 0"
   set tmp_complex(jexclusive) "jexcl BOOL EXCL YES JOB 0 0"
   set_complex tmp_complex
  
   # set host complex attributes 
   set host_config(complex_values) "excl=true,jexcl=true"
   set_exechost host_config [lindex $exclusive_hosts 0]
   set_exechost host_config [lindex $exclusive_hosts 1]

   # add pes
   set pe(slots)             "100"
   set pe(allocation_rule)   "\$round_robin"
   add_pe "round_robin" pe

   set pe(slots)             "100"
   set pe(allocation_rule)   "\$fill_up"
   add_pe "fill_up" pe

   # add queue
   set queue_conf(slots)            "10"
   set queue_conf(pe_list)          "round_robin fill_up"
   add_queue "excl.q" "@allhosts" queue_conf

   # setup resource quota set
   set rqs_name "exclusive_test"
   set rules ""
   lappend rules "users $CHECK_FIRST_FOREIGN_SYSTEM_USER to exclusive=true" 
   set rqs_charray($rqs_name,limit)   "$rules"
   set rqs_charray($rqs_name,enabled) "true"
   add_rqs rqs_charray

   # set scheduler config to speed up the test
   set sched_conf(schedule_interval) "0:0:5"
   set sched_conf(weight_urgency) "0.0"
   # set sched_conf(params) "MONITOR=true"
   set sched_conf(flush_submit_sec)  1
   set sched_conf(flush_finish_sec)  1
   set sched_conf(max_reservation)   10
   set_schedd_config sched_conf
}

proc exclusive_host_usage_cleanup {} {
   global ts_config
   global exclusive_host_usage_complex_backup
   global exclusive_hosts

   delete_all_jobs
   wait_for_end_of_all_jobs

   # reset scheduler config
   reset_schedd_config

   # remove resource quota set
   del_rqs "exclusive_test"

   # remove queue
   del_queue "excl.q" "" 1 1

   # remove pes
   del_pe "round_robin"
   del_pe "fill_up"

   # remove host complex attributes 
   set host_config(complex_values) "NONE"
   set_exechost host_config [lindex $exclusive_hosts 0]
   set_exechost host_config [lindex $exclusive_hosts 1]

   # remove exclusive complex
   reset_complex exclusive_host_usage_complex_backup
   unset exclusive_host_usage_complex_backup

   # unset our test's global variables
   foreach var "exclusive_hosts" {
      if {[info exists $var]} {
         unset $var
      }
   }
}

proc do_exclusive_usage_test { first_is_exclusive {pe_name ""} {rqs_test 0} } {
   global CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER
   global exclusive_hosts
   set ret 0

   ts_log_fine "doing test with first_is_exclusive=$first_is_exclusive, pe=$pe_name, rqs_test=$rqs_test"

   if {$rqs_test == 0} {
      set user $CHECK_USER
      set test_host [lindex $exclusive_hosts 0]
      set job_request "-b y -l h=$test_host"
      set msg [translate_macro MSG_SCHEDD_ITOFFERSONLY]
      set msg1 "${msg}hc:exclusive=false"
      set msg2 [translate_macro MSG_SCHEDD_EXCLUSIVE_IN_USE_S "exclusive"]
   } else {
      set user $CHECK_FIRST_FOREIGN_SYSTEM_USER
      set job_request "-b y"
      set msg1 [translate_macro MSG_SCHEDD_INFO_CANNOTRUNRQSGLOBAL_SS "/////" "exclusive_test/1"]
      set msg2 $msg1
   }

   if {$pe_name != ""} {
      set job_request "-pe $pe_name 2 $job_request"
   }
   set job_script "/bin/sleep 10000"

   # submit the first job to fill a slot
   if {$first_is_exclusive == 1} {
      set job_id [submit_job "$job_request -l excl=true $job_script" 1 60 "" $user] 
   } else {
      set job_id [submit_job "$job_request -l excl=false $job_script" 1 60 "" $user] 
   }

   if {[wait_for_jobstart $job_id "sleep" 60] != 0} {
      ts_log_severe "first job did not start even cluster is empty"
      set ret 1
   }

   if {$ret == 0} {
      # a exclusive job should now not started
      set job_id [submit_job "$job_request -l excl=true $job_script" 1 60 "" $user] 
      if {[wait_for_jobstart $job_id "sleep" 5 0] == 0} {
         # job has to run, error was generated in wait_for_jobstart
         ts_log_severe "exclusive job was started even consumable is already in use"
         set ret 1
      } else {
         # check scheduling message
         set output [start_sge_bin "qalter" "-w p $job_id"]
         if {$first_is_exclusive == 1} {
            if {[string match "*$msg1*" $output] == 0} {
               ts_log_severe "did not find correct scheduling message for exclusive request\nexpected: $msg1\ngot: $output"
               set ret 1
            }
         } else {
            if {[string match "*$msg2*" $output] == 0} {
               ts_log_severe "did not find correct scheduling message for exclusive request\nexpected: $msg2\ngot: $output"
               set ret 1
            }
         }
      }
   }
 
   if {$ret == 0} { 
      # depending on the first job a non-exclusive job has to
      # a) start if first job was non-exclusive
      # b) stay pending if first job was exclusive 
      set job_id [submit_job "$job_request -l excl=false $job_script" 1 60 "" $user] 
      if {$first_is_exclusive == 1} {
         if {[wait_for_jobstart $job_id "sleep" 5 0] == 0} {
            # job has to run, error was generated in wait_for_jobstart
            ts_log_severe "non-exclusive job was started even consumable is already in use by exclusive job"
            set ret 1
         } else {
            set output [start_sge_bin "qalter" "-w p $job_id"]
            if {[string match "*$msg2*" $output] == 0} {
               ts_log_severe "did not find correct scheduling message for non-exclusive request\nexpected: $msg2\ngot: $output"
               set ret 1
            }
         }
      } else {
         if {[wait_for_jobstart $job_id "sleep" 5 0] != 0} {
            # job has to run, error was generated in wait_for_jobstart
            ts_log_severe "non-exclusive job stayed pending even consumable is just used by anonther non-exclusive job"
            set ret 1
         }
      }
   }

   if {$ret == 0} {
      # now do the same with the default request of false
      set job_id [submit_job "$job_request $job_script" 1 60 "" $user] 
      if {$first_is_exclusive == 1} {
         if {[wait_for_jobstart $job_id "sleep" 5 0] == 0} {
            # job has to run, error was generated in wait_for_jobstart
            ts_log_severe "non-exclusive job (by default request) was started even consumable is already in use by exclusive job"
            set ret 1
         } else {
            set output [start_sge_bin "qalter" "-w p $job_id"]
            if {[string match "*$msg2*" $output] == 0} {
               ts_log_severe "did not find correct scheduling message for non-exclusive request\nexpected: $msg2\ngot: $output"
               set ret 1
            }
         }
      } else {
         if {[wait_for_jobstart $job_id "sleep" 5 0] != 0} {
            # job has to run, error was generated in wait_for_jobstart
            ts_log_severe "non-exclusive job (by default request) stayed pending even consumable is just used by anonther non-exclusive job"
            set ret 1
         }
      }
   }

   delete_all_jobs
   wait_for_end_of_all_jobs
}

proc sequential_exclusive_blocked {} {
   do_exclusive_usage_test 1
   do_exclusive_usage_test 1 "" 1
}

proc sequential_non_exclusive_blocked {} {
   do_exclusive_usage_test 0
   do_exclusive_usage_test 0 "" 1
}

proc parallel_exclusive_blocked {} {
   do_exclusive_usage_test 1 "round_robin"
   do_exclusive_usage_test 1 "fill_up"
   do_exclusive_usage_test 1 "round_robin" 1
   do_exclusive_usage_test 1 "fill_up" 1
}

proc parallel_non_exclusive_blocked {} {
   do_exclusive_usage_test 0 "round_robin"
   do_exclusive_usage_test 0 "fill_up"
   do_exclusive_usage_test 0 "round_robin" 1
   do_exclusive_usage_test 0 "fill_up" 1
}

proc do_resource_reservation_test {mode {pe_name ""}} {
   global ts_config CHECK_USER
   global exclusive_hosts

   set runtime_1 "10"
   if {$mode == "ST_BACKFILL_FINISH_ORDER"} {
      set runtime_2 "10"
   } else {
      set runtime_2 "20" 
   }

   set job_script "$ts_config(product_root)/examples/jobs/sleeper.sh"

   set test_host [lindex $exclusive_hosts 0]
   set compile_arch_mt [resolve_build_arch_installed_libs $test_host 0]
   set binary_path "$ts_config(source_dir)/$compile_arch_mt/test_drmaa.1.0"

   if {$pe_name != ""} {
      set job_request "-R y -q excl.q -pe $pe_name"
      set job_desc1 "-N L4_BF -p 100 $job_request 1 -l h_rt=$runtime_1,excl=false"
      set job_desc2 "-N L5_BF -p 0 $job_request 11 -l h_rt=$runtime_1,excl=true"
      set job_desc3 "-N L1_BF -p 0 $job_request 1 -l h_rt=$runtime_2,excl=false"
   } else {
      set job_request "-R y -l h=$test_host"
      set job_desc1 "-N L4_BF -p 100 $job_request,h_rt=$runtime_1,excl=false"
      set job_desc2 "-N L5_BF -p 0 $job_request,h_rt=$runtime_1,excl=true"
      set job_desc3 "-N L1_BF -p 0 $job_request,h_rt=$runtime_2,excl=false"
   }
  
   set drmaa_arguments "$mode \"$job_script\" \"$job_desc1\" \"$job_desc2\" \"$job_desc3\""
   set test_output [start_remote_prog $test_host $CHECK_USER $binary_path $drmaa_arguments prg_exit_state 500 0 "" "" 1 0 1]

   ts_log_fine "exit status was $prg_exit_state"
   ts_log_fine "output was\n$test_output"

   if { $prg_exit_state != 0 } {
      ts_log_severe "$drmaa_arguments failed\n$test_output"
   }

   delete_all_jobs
   wait_for_end_of_all_jobs
}

proc sequential_resource_reservation {} {
   do_resource_reservation_test ST_RESERVATION_FINISH_ORDER 
   do_resource_reservation_test ST_BACKFILL_FINISH_ORDER
}

proc parallel_resource_reservation {} {
   do_resource_reservation_test ST_RESERVATION_FINISH_ORDER "round_robin"
   do_resource_reservation_test ST_BACKFILL_FINISH_ORDER "round_robin"
   do_resource_reservation_test ST_RESERVATION_FINISH_ORDER "fill_up"
   do_resource_reservation_test ST_BACKFILL_FINISH_ORDER "fill_up"
}

proc do_AR_exclusive_usage_test { first_is_exclusive {pe_name ""} } {
   global CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER
   global exclusive_hosts
   set ret 0

   ts_log_fine "doing AR test with first_is_exclusive=$first_is_exclusive, pe=$pe_name"

   set test_host [lindex $exclusive_hosts 0]
   set job_request "-l h=$test_host"

   if {$pe_name != ""} {
      set job_request "-pe $pe_name 2 $job_request"
   }
   set ar_request "$job_request -d 3600"
   set job_script "-b y /bin/sleep 10000"

   # submit the first job to fill a slot
   if {$first_is_exclusive == 1} {
      set ar_id [submit_ar "$ar_request -l excl=true"] 
   } else {
      set ar_id [submit_ar "$ar_request -l excl=false"] 
   }

   if {$ar_id <= 0} {
      ts_log_severe "first AR was wrongly rejected"
      set ret 1
   }

   # test behavior inside the AR
   if {$ret == 0} {
      # test exclusive job
      set job_id [submit_job "$job_request -ar $ar_id -l excl=true $job_script" 0]
      if {$first_is_exclusive == 0} {
         # job is rejected at submit time because AR did not requested to be exclusive
         if {$job_id > 0} {
            ts_log_severe "exclusive AR job was not rejected for non-exclusive AR"
            set ret 1
         }
         # non-exclusive job has to run
         set job_id [submit_job "$job_request -ar $ar_id -l excl=false $job_script"]
         if {[wait_for_jobstart $job_id "sleep" 5 0] != 0} {
            # job has to run, error was generated in wait_for_jobstart
            ts_log_severe "non-exclusive job stayed pending for non-exclusive AR"
            set ret 1
         }
      } else {
         # job is rejected at submit time because AR did not requested to be exclusive
         if {$job_id <= 0} {
            ts_log_severe "exclusive AR job was rejected for exclusive AR"
            set ret 1
         }
      }
   }

   if {$ret == 0} {
      # a exclusive AR should now be rejected
      set ar_id [submit_ar "$ar_request -l excl=true" "" "" 0] 
      if {$ar_id > 0} {
         ts_log_severe "exclusive are was accepeted even consumable is already in use"
         set ret 1
      }
      
      # a exclusive job should now not started
      set job_id [submit_job "$job_request -l excl=true $job_script"] 
      if {[wait_for_jobstart $job_id "sleep" 5 0] == 0} {
         # job has to run, error was generated in wait_for_jobstart
         ts_log_severe "exclusive job was started even consumable is already in use"
         set ret 1
      }
   }
 
   if {$ret == 0} { 
      # depending on the first AR a non-exclusive AR has to be
      # a) accepted if first AR was non-exclusive
      # b) rejected if first AR was exclusive 
      set ar_id [submit_ar "$ar_request -l excl=false" "" "" 0] 
      if {$first_is_exclusive == 1} {
         if {$ar_id > 0} {
            ts_log_severe "non-exclusive AR was accepted even consumable is already used by exclusive AR"
            set ret 1
         }
      } else {
         if {$ar_id <= 0} {
            ts_log_severe "non-exclusive AR was rejected even consumable is jused used by anonther non-exclusive AR"
            set ret 1
         }
      }

      # depending on the first AR a non-exclusive job has to
      # a) start if first job was non-exclusive
      # b) stay pending if first job was exclusive 
      set job_id [submit_job "$job_request -l excl=false $job_script"] 
      if {$first_is_exclusive == 1} {
         if {[wait_for_jobstart $job_id "sleep" 5 0] == 0} {
            # job has to run, error was generated in wait_for_jobstart
            ts_log_severe "non-exclusive job was started even consumable is already in use by exclusive job"
            set ret 1
         }
      } else {
         if {[wait_for_jobstart $job_id "sleep" 5 0] != 0} {
            # job has to run, error was generated in wait_for_jobstart
            ts_log_severe "non-exclusive job stayed pending even consumable is just used by anonther non-exclusive job"
            set ret 1
         }
      }
   }

   if {$ret == 0} {
      # now do the same with the default request of false

      set ar_id [submit_ar "$ar_request" "" "" 0] 
      if {$first_is_exclusive == 1} {
         if {$ar_id > 0} {
            ts_log_severe "non-exclusive AR was accepted even consumable is already used by exclusive AR"
            set ret 1
         }
      } else {
         if {$ar_id <= 0} {
            ts_log_severe "non-exclusive AR was rejected even consumable is jused used by anonther non-exclusive AR"
            set ret 1
         }
      }

      set job_id [submit_job "$job_request $job_script"] 
      if {$first_is_exclusive == 1} {
         if {[wait_for_jobstart $job_id "sleep" 5 0] == 0} {
            # job has to run, error was generated in wait_for_jobstart
            ts_log_severe "non-exclusive job (by default request) was started even consumable is already in use by exclusive job"
            set ret 1
         }
      } else {
         if {[wait_for_jobstart $job_id "sleep" 5 0] != 0} {
            # job has to run, error was generated in wait_for_jobstart
            ts_log_severe "non-exclusive job (by default request) stayed pending even consumable is just used by anonther non-exclusive job"
            set ret 1
         }
      }
   }

   delete_all_ars
   delete_all_jobs
   wait_for_end_of_all_jobs
}

proc sequential_AR_exclusive_blocked {} {
   do_AR_exclusive_usage_test 1
}

proc sequential_AR_non_exclusive_blocked {} {
   do_AR_exclusive_usage_test 0
}

proc parallel_AR_exclusive_blocked {} {
   do_AR_exclusive_usage_test 1 "round_robin"
   do_AR_exclusive_usage_test 1 "fill_up"
}

proc parallel_AR_non_exclusive_blocked {} {
   do_AR_exclusive_usage_test 0 "round_robin"
   do_AR_exclusive_usage_test 0 "fill_up"
}

proc exclusive_job_consumables {} {
   set ret 0
   
   # block one node by a sequential non-exclusive job. This one should still
   # be usable for slave tasks
   set job_id [submit_job "-q excl.q -l jexcl=false -b y /bin/sleep 10000"]
   if {[wait_for_jobstart $job_id "sleep" 60] != 0} {
      ts_log_severe "first job did not start even cluster is empty"
      set ret 1
   }

   set pes "fill_up"
   lappend pes "round_robin"

   # Now try to use the remaining slots by a pe job
   # The job has run on both nodes
   foreach pe $pes {
      set job_id1 [submit_job "-pe $pe 11 -l jexcl=true -b y /bin/sleep 10000"]
      if {[wait_for_jobstart $job_id1 "sleep" 5 0] == 0} {
         # OK, but a second pe job should be stay pending
         set job_id2 [submit_job "-pe $pe 2 -l jexcl=true -b y /bin/sleep 10000"]
         if {[wait_for_jobstart $job_id2 "sleep" 5 0] == 0} {
            ts_log_severe "$pe pe does not enforce excl use"
            set ret 1
         }
      } else {
         ts_log_severe "$pe pe wasn't started even one node is still free for excl use"
         set ret 1
      }
      delete_job $job_id1 1
      delete_job $job_id2 1

      if {$ret == 1} {
         break
      }
   }
}
