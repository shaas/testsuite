#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace

# define a level initialization procedure:
set check_init_level_procedure "smf_init_level"

# define test's name and run level descriptions
set check_name            "smf"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "Test SMF support"

set check_root_access_needs  "yes"

# define test's dependencies
set check_needs           "init_core_system"

# define test's procedure order
set check_fuctions   ""
lappend check_functions "smf_test_host_supported"
lappend check_functions "smf_test_qmaster"
lappend check_functions "smf_test_shadowd"
lappend check_functions "smf_test_execd"
global ts_config
#Add BDB test only if BDB server used
if { ![info exists ts_config(bdb_server)] } {
   lappend check_functions "smf_test_bdb"
}
#Add Dbwriter test only if arco checktree setuped
if { [info exists ts_config(additional_checktree_dirs)] && [lsearch -glob $ts_config(additional_checktree_dirs) "*checktree_arco"] != -1 } {
   lappend check_functions "smf_test_dbwriter"
}

set check_setup_function "smf_setup_cleanup"
set check_cleanup_function "smf_setup_cleanup"
set check_highest_level       0

proc smf_init_level {} {
   global ts_config
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0"  { 
         return 0
      }
   }
   return -1
}

proc smf_setup_cleanup {} {
   global ts_config CHECK_USER
   
   #Remove all SGE SMF services with this cluster_name on all cluster hosts
   set hosts [get_all_hosts]
   foreach host $hosts {
      if { [is_smf_host $host] == 1 } {
         set output [start_remote_prog $host "root" "/usr/bin/svcs" "-H -o fmri svc:/application/sge/*:$ts_config(cluster_name)" prg_exit_state]
         if { $prg_exit_state == 0 } {
            foreach found_service $output {
               start_remote_prog $host "root" "/usr/sbin/svccfg" "delete $found_service"
	    }
         }
      }
   }
}

#Go over all hosts in configraion any non-solaris host must return NOT supported
proc smf_test_host_supported {} {
   global ts_config
   global CHECK_USER

   set hosts [get_all_hosts]
   foreach host $hosts {
      start_remote_prog $host $CHECK_USER "/bin/sh" "-c [get_sge_smf_cmd] supported" supported_exit_state
      set arch_str [resolve_arch $host]
      if { [string match "sol-*" $arch_str] == 1 } {
         set result [string trim [start_remote_prog $host $CHECK_USER "/usr/bin/uname" "-r"]]
         set min [lindex [split $result .] end]
         if { $min < 10 && $supported_exit_state == 0 } {
            ts_log_severe "ERROR: Unexpected SMF support on host=$host with arch=$arch_str OS_release=$result!"
         } elseif { $min >= 10 && $prg_exit_state != 0 } {
            ts_log_severe "ERROR: Expected to find SMF support on host=$host with arch=$arch_str OS_release=$result!"
         }
      } elseif { $supported_exit_state == 0 } {
         ts_log_severe "ERROR: Unexpected SMF support on host=$host with arch=$arch_str OS_release=$result!"
      }
   }
   return 0
}


proc smf_test_qmaster {} {
   global ts_config

   set host $ts_config(master_host)
   if { [is_smf_host $host] == 1 } {
      smf_generic_test $host "qmaster" 60 0
   } else {
      ts_log_config "Qmaster host $host does not support SMF" 
   }
}

proc smf_test_shadowd {} {
   global ts_config

   if { [llength $ts_config(shadowd_hosts)] == 0 } {
      ts_log_config "No shadowd hosts in your configuration"
      return 
   }
   
   set counter 0
   set smf_hosts ""
   foreach host $ts_config(shadowd_hosts) {
      if { [is_smf_host $host] == 1 } {
	 lappend smf_hosts $host
         smf_generic_test $host "shadowd" 30 0
	 incr counter 1
      }
   }

   
   if {$counter == 0 } {
      ts_log_config "No smf capable shadow hosts in your configuration"
      return 
   }
}

proc smf_test_execd {} {
   global ts_config

   if {[llength $ts_config(execd_nodes)] == 0} {
      ts_log_config "No execd hosts in your configuration"
      return 
   }
   
   set counter 0
   set smf_hosts ""
   foreach host $ts_config(execd_nodes) {
      if { [is_smf_host $host] == 1 } {
	 lappend smf_hosts $host
         smf_generic_test $host "execd" 30 0
	 incr counter 1
      }
   }
   
   if {$counter == 0} {
      ts_log_config "No smf capable execd hosts in your configuration"
      return 
   }
}

proc smf_test_bdb {} {
   global ts_config

   if { [llength $ts_config(bdb_server)] == 0 } {
      ts_log_config "No bdb server host in your configuration"
      return
   }
   
   set host $ts_config(bdb_server)
   if { [is_smf_host $host] == 1 } {
      smf_generic_test  $host "bdb"
   } else {
      ts_log_config "BDB server host $host does not support SMF"  
   }
}

proc smf_test_dbwriter {} {
   global ts_config arco_config
   
   if { ![info exists $arco_config(dbwriter_host)] } {
      ts_log_config "No dbwriter host in your configuration"
      return
   }
   
   set host $arco_config(dbwriter_host)
   if { [is_smf_host $host] == 1 } {
      smf_generic_test $host "dbwriter"
   } else {
      ts_log_config "Dbwriter host $host does not support SMF"
   }
}
