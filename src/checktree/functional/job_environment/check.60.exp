#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__
global job_environment_60
global job_environment_exec_host
global job_environment_libpath
global job_environment_libvar

set check_root_access_needs "yes"

# additional checks for N1GE 6
lappend check_functions "job_environment_amount_uninherited"
lappend check_functions "job_environment_JOB_NAME_uninherited"
lappend check_functions "job_environment_INHERIT_ENV"
lappend check_functions "job_environment_SET_LIB_PATH"

####### job_environment_setup_60() #############################################
#  NAME
#     job_environment_setup_60() -- setup the job env test
#
#  SYNOPSIS
#     job_environment_setup_60 { } 
#
#  FUNCTION
#     Do required setup for the job environment test for 6.0.
#
#  RESULT
#     0 -> ok   1 -> error
#
#  SEE ALSO
#     job_environment_setup()
################################################################################
proc job_environment_setup_60 {} {
   global CHECK_OUTPUT
   global job_environment_exec_host job_environment_libpath
   global job_environment_libvar ts_config

   # Stop first execd
   shutdown_system_daemon $job_environment_exec_host "execd"

   # Set marker var
   set job_environment_libvar [get_shared_lib_var $job_environment_exec_host]

    # The test suite will add the SGE path to the lib path
   set arch [resolve_arch $job_environment_exec_host]
   set sge_path "$ts_config(product_root)/lib/$arch/../$arch"
   set job_environment_libpath ".:$sge_path"


   set my_environment(THISIS) "atest"
   set my_environment($job_environment_libvar) "$job_environment_libpath"

   # Restart execd
   startup_execd $job_environment_exec_host my_environment

   puts $CHECK_OUTPUT "************************************************************"
   puts $CHECK_OUTPUT "$job_environment_libvar before starting of execd on \"$job_environment_exec_host\""
   puts $CHECK_OUTPUT "is set to \"$job_environment_libpath\""
   puts $CHECK_OUTPUT "************************************************************"
}

####### job_environment_cleanup_60() ###########################################
#  NAME
#     job_environment_cleanup_60() -- clean up after the job env test
#
#  SYNOPSIS
#     job_environment_cleanup_60 { } 
#
#  FUNCTION
#     Clean up changes made during the job environment 6.0 test.
#
#  RESULT
#     0 -> ok   1 -> error
#
#  SEE ALSO
#     job_environment_cleanup()
################################################################################
proc job_environment_cleanup_60 {} {
   global job_environment_exec_host

   # Stop execd
   shutdown_system_daemon $job_environment_exec_host "execd"

   # Restart execd without marker variable
   startup_execd $job_environment_exec_host
}

#****** job_environment_amount_uninherited() ***********************************
#  NAME
#     job_environment_amount_uninherited() -- test job environment
#
#  SYNOPSIS
#     job_environment_amount_uninherited { } 
#
#  FUNCTION
#     Check that all required environment variables are set by the shepherd when
#     the execd_param, INHERIT_ENV, is set to false.
#
#  RESULT
#     0 -> ok   1 -> error
#
#  SEE ALSO
#     job_environment_amount()
#*******************************************************************************
proc job_environment_amount_uninherited {} {
   global CHECK_OUTPUT job_environment_exec_host

   puts $CHECK_OUTPUT "Testing list of environment variables with INHERIT_ENV=false"

   set new_config(execd_params) "INHERIT_ENV=false"
   set_config_and_propagate new_config $job_environment_exec_host

   set errors ""

   job_environment_var_test missing extra
   set error_type "-3"
   if {[llength $missing] != 0} {
      set missing_vars ""

      foreach missing_var $missing {
         append missing_vars " $missing_var"
      }
      append errors "\nThe following environment variables should have been set but were not: [string trim $missing]"
      set error_type "-1"
   } elseif {[llength $extra] != 0} {
      set extra_vars ""
      foreach extra_var $extra {
         append extra_vars " $extra_var"
      }
      append errors "\nThe following unrecognized environment variables were set: [string trim $extra_vars]"
   }

   if {$errors != ""} {
      add_proc_error "job_environment_amount_uninherited" $error_type [string trim $errors]
   }
}


#****** job_environment_JOB_NAME_uninherited() *********************************
#  NAME
#     job_environment_JOB_NAME_uninherited() -- test the job name env vars
#
#  SYNOPSIS
#     job_environment_JOB_NAME_uninherited { } 
#
#  FUNCTION
#     Tests whether the shepherd correctly sets the job name environment
#     variables when the execd_param, INHERIT_ENV, is set to false.
#
#  RESULT
#     0 -> ok   1 -> error
#
#  SEE ALSO
#     job_environment_JOB_NAME()
#*******************************************************************************
proc job_environment_JOB_NAME_uninherited {} {
   global CHECK_OUTPUT job_environment_exec_host

   puts $CHECK_OUTPUT "Testing presence of job env vars with INHERIT_ENV=false"

   # Set INHERIT_ENV=false
   set new_config(execd_params) "INHERIT_ENV=false"
   set_config_and_propagate new_config $job_environment_exec_host

   # Run JOB_NAME test
   job_environment_JOB_NAME 0
}


#****** job_environment_INHERIT_ENV() ******************************************
#  NAME
#     job_environment_INHERIT_ENV() -- test that env vars are inherited
#                                      correctly
#
#  SYNOPSIS
#     job_environment_INHERIT_ENV { } 
#
#  FUNCTION
#     Tests whether the shepherd correctly sets the environment
#     variables based on the execd_param, INHERIT_ENV.
#
#  RESULT
#     0 -> ok   1 -> error
#*******************************************************************************
proc job_environment_INHERIT_ENV {} {
   global env CHECK_OUTPUT job_environment_exec_host

   set args "-l h=$job_environment_exec_host -o /dev/null -j yes"

   set errors ""

   puts $CHECK_OUTPUT "Testing effects of INHERIT_ENV=false"

   # Set INHERIT_ENV=false
   set new_config(execd_params) "INHERIT_ENV=false"
   set_config_and_propagate new_config $job_environment_exec_host

   # Submit job
   if {[job_environment_qsub_job "jobenv.sh" job_env $args]} {
      # Check for presence of THISIS env var
      if {[info exists job_env(THISIS)]} {
         append errors "\nEnvironment variable was inherited when it shouldn't have been, with INHERIT_ENV=false"
      }
   } else {
      append errors "\nFailed submitting job, with INHERIT_ENV=false"
   }

   puts $CHECK_OUTPUT "Testing effects of execd_params=none, after INHERIT_ENV=false"

   # Set exced_params=none
   set new_config(execd_params) "none"
   set_config_and_propagate new_config $job_environment_exec_host

   # Submit job
   if {[job_environment_qsub_job "jobenv.sh" job_env $args]} {
      # Check for presence of THISIS env var
      if {![info exists job_env(THISIS)]} {
         append errors "\nEnvironment variable was not inherited, with execd_params=none after INHERIT_ENV=false"
      }
   } else {
      append errors "\nFailed submitting job, with execd_params=none after INHERIT_ENV=false"
   }

   puts $CHECK_OUTPUT "Testing effects of INHERIT_ENV=true"

   # Set INHERIT_ENV=true
   set new_config(execd_params) "INHERIT_ENV=true"
   set_config_and_propagate new_config $job_environment_exec_host

   # Submit job
   if {[job_environment_qsub_job "jobenv.sh" job_env $args]} {
      # Check for presence of THISIS env var
      if {![info exists job_env(THISIS)]} {
         append errors "\nEnvironment variable was not inherited, with INHERIT_ENV=true"
      }
   } else {
      append errors "\nFailed submitting job, with INHERIT_ENV=true"
   }

   puts $CHECK_OUTPUT "Testing effects of execd_params=none, after INHERIT_ENV=true"

   # Set exced_params=none
   set new_config(execd_params) "none"
   set_config_and_propagate new_config $job_environment_exec_host

   # Submit job
   if {[job_environment_qsub_job "jobenv.sh" job_env $args]} {
      # Check for presence of THISIS env var
      if {![info exists job_env(THISIS)]} {
         append errors "\nEnvironment variable was inherited when it shouldn't have been, with execd_params=none after INHERIT_ENV=true"
      }
   } else {
      append errors "\nFailed submitting job, with execd_params=none after INHERIT_ENV=true"
   }

   if {$errors != ""} {
      add_proc_error "job_environment_INHERIT_ENV" -1 [string trim $errors]
   }
}

#****** check.60/test_job_environment_lib_path() *******************************
#  NAME
#     test_job_environment_lib_path() -- used by job_environment_SET_LIB_PATH
#
#  SYNOPSIS
#     test_job_environment_lib_path { error_var execd_params expected_lib_path 
#     } 
#
#  FUNCTION
#     starts job with specified execd_params and tests for correct
#     expected lib path
#
#  INPUTS
#     error_var         - string for reporting errors (upvared)
#     execd_params      - execd_params to set before starting job
#     expected_lib_path - expected LD_LIBRARY_PATH
#                         if expected_lib_path set to "TEST_UNSET" the
#                         procedure assumes that no LD_LIBRARY_PATH
#                         is set at all
#
#*******************************************************************************
proc test_job_environment_lib_path { error_var execd_params expected_lib_path  } {
   global CHECK_OUTPUT job_environment_exec_host job_environment_libvar
   upvar $error_var errors

   set args "-l h=$job_environment_exec_host -o /dev/null -j yes"

   puts $CHECK_OUTPUT ""
   set new_config(execd_params) "$execd_params"
   set_config_and_propagate new_config $job_environment_exec_host
   puts $CHECK_OUTPUT "Testing with execd_params set to $new_config(execd_params)"
   puts $CHECK_OUTPUT "Expected SGE lib path is \"$expected_lib_path\" on host $job_environment_exec_host"

   set errors ""
   # Test that lib path is "SGE lib path":"execd path"
   if {[job_environment_qsub_job "jobenv.sh" job_env $args] == 0} {
      append errors "\nFailed submitting job, with $new_config(execd_params)"
      return
   }

   if { $expected_lib_path == "TEST_UNSET" } {
      # library path should not be set at all
      if {[info exists job_env($job_environment_libvar)]} {
         append errors "\nShared library IS set, with $new_config(execd_params) (host=$job_environment_exec_host)"
         append errors "\n   expected $job_environment_libvar not to be set!"
         append errors "\n   $job_environment_libvar is wrongly set to \"$job_env($job_environment_libvar)\""
         return
      } else {
         puts $CHECK_OUTPUT "**************************************************"
         puts $CHECK_OUTPUT "libpath correctly NOT set at all for execd_params"
         puts $CHECK_OUTPUT "set to \"$execd_params\""
         puts $CHECK_OUTPUT "**************************************************"
         return
      }
   } else {
      # library path should be set
      if {[info exists job_env($job_environment_libvar)] == 0} {
         append errors "\nShared library path NOT set, with $new_config(execd_params) (host=$job_environment_exec_host)"
         append errors "\n   expected \"$expected_lib_path\""
         return
      }
   }

   if {$job_env($job_environment_libvar) != $expected_lib_path} {
      # problem
      append errors "\nShared library path is incorrectly set to \"$job_env($job_environment_libvar)\", with $new_config(execd_params)"
      append errors "\n   Should be set to \"$expected_lib_path\""
      return
   }
   puts $CHECK_OUTPUT "**************************************************"
   puts $CHECK_OUTPUT "libpath correctly set set to"
   puts $CHECK_OUTPUT "\"$expected_lib_path\""
   puts $CHECK_OUTPUT "for execd_params"
   puts $CHECK_OUTPUT "set to \"$execd_params\""
   puts $CHECK_OUTPUT "**************************************************"
}

#****** job_environment_SET_LIB_PATH() *****************************************
#  NAME
#     job_environment_SET_LIB_PATH() -- test that the lib path gets set
#                                       correctly
#
#  SYNOPSIS
#     job_environment_SET_LIB_PATH { } 
#
#  FUNCTION
#     Tests whether the shepherd correctly sets the shared library path
#     environment variable based on the execd_params, INHERIT_ENV and
#     SET_LIB_PATH.
#
#  RESULT
#     0 -> ok   1 -> error
#*******************************************************************************
proc job_environment_SET_LIB_PATH {} {
   global ts_config CHECK_OUTPUT
   global job_environment_exec_host job_environment_libvar
   global job_environment_libpath

   set arch [resolve_arch $job_environment_exec_host]
   set sge_path "$ts_config(product_root)/lib/$arch"

   # test 1
   test_job_environment_lib_path errors "INHERIT_ENV=true,SET_LIB_PATH=true" "$sge_path:$job_environment_libpath"
   if {$errors != ""} {
      add_proc_error "job_environment_SET_LIB_PATH" -1 [string trim $errors]
   }
  
   # test 2
   test_job_environment_lib_path errors "INHERIT_ENV=true,SET_LIB_PATH=false" "$job_environment_libpath"
   if {$errors != ""} {
      add_proc_error "job_environment_SET_LIB_PATH" -1 [string trim $errors]
   }

   # test 3
   test_job_environment_lib_path errors "INHERIT_ENV=false,SET_LIB_PATH=true" "$sge_path"
   if {$errors != ""} {
      add_proc_error "job_environment_SET_LIB_PATH" -1 [string trim $errors]
   }

   # test 4
   test_job_environment_lib_path errors "INHERIT_ENV=false,SET_LIB_PATH=false" "TEST_UNSET"
   if {$errors != ""} {
      add_proc_error "job_environment_SET_LIB_PATH" -1 [string trim $errors]
   }
}

