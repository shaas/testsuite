#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

# set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "binary_submission_init_level"

# define test's name and run level descriptions
set check_name            "binary_submission"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "test qsub/qrsh -b y|n functionality"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function "binary_submission_setup"
set check_cleanup_function "binary_submission_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "binary_submission_check"

proc binary_submission_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0    
      } 
   } 
   return -1  ;# no other level else
}

# -------- local test procedures -------------------------------------------

proc binary_submission_setup  {} {
   global ts_config
   global CHECK_OUTPUT CHECK_PRODUCT_ROOT CHECK_ARCH
   global CHECK_OUTPUT 
   global CHECK_CORE_MASTER

   #
   # Save sge_aliases file which was created during installation
   #
   set sge_aliases "$CHECK_PRODUCT_ROOT/$ts_config(cell)/common/sge_aliases"
   if { ([ file isfile "${sge_aliases}.sav" ] == 1) } { 
      file delete ${sge_aliases}.sav
   }
   if { ([ file isfile "${sge_aliases}" ] == 1) } { 
      file rename ${sge_aliases} ${sge_aliases}.sav
   }

   puts $CHECK_OUTPUT "binary_submission_setup ..."
   set_error 0 "ok"
}

proc binary_submission_cleanup  {} {
   global ts_config
   global CHECK_OUTPUT CHECK_PRODUCT_ROOT CHECK_ARCH CHECK_CORE_MASTER

   puts $CHECK_OUTPUT "binary_submission_cleanup ..."

   #
   # Restore sge_aliases file
   #
   set sge_aliases "$CHECK_PRODUCT_ROOT/$ts_config(cell)/common/sge_aliases"
   if { ([ file isfile "${sge_aliases}.sav" ] == 1) } {
      if { ([ file isfile "${sge_aliases}" ] == 1) } {
         delete_file ${sge_aliases}
      }
      file rename ${sge_aliases}.sav ${sge_aliases}
   }

   delete_all_jobs
   wait_for_end_of_all_jobs 60

   set_error 0 "ok"
}

proc binary_submission_check {} {
   global ts_config
   global CHECK_OUTPUT CHECK_PRODUCT_ROOT CHECK_ARCH
   global CHECK_HOST CHECK_USER
   global qrsh_hostlist
 
   puts $CHECK_OUTPUT "binary_submission_check ..."

   #
   # Scenario 1:
   #  qsub -b n <file_which_does_not_exist_on_client>
   #     -> error message
   #
   # Scenario 2:
   #  qsub <file_which_does_not_exist_on_client>
   #     -> error message
   #
   # Scenario 3:
   #  qsub -b y <file_which_does_not_exist_on_client>
   #     -> successfull submission
   #     -> embedded script options won't be parsed
   #  path_aliasing is enabled
   #     -> jobscript will be found on execd
   #     -> job will be started 
   #  qacct
   #     -> job was executed successfully
   # 
   # Scenario 4:
   #  qsub -b y <file_which_does_not_exist_on_client>
   #     -> successfull submission
   #     -> embedded script options won't be parsed
   #  path_aliasing is disabled
   #     -> jobscript won't be found on execd
   #     -> shell will be started with not existing job script 
   #     -> job will be executed successfully 
   #        (shell will return with error code and error message will
   #         be found in output file)
   # 
   # Scenario 5:
   #  qsub -b n sleeper.sh
   #     -> successfull submission
   #     -> embedded script options will be parsed
   #  path_aliasing is disabled
   #     -> jobscript will be found on execd (file transfer)
   #     -> job will be started 
   #  qacct
   #     -> job was executed successfully 
   # 
   # Scenario 6:
   #  qsub sleeper.sh
   #     -> equivalent with scenario 5 (-b n is default for qsub)
   #
   # Scenario 7:
   #  qsub -b y sleeper.sh
   #     -> successfull submission
   #     -> embedded script options won't be parsed 
   #  path_aliasing is disabled
   #     -> jobscript will be found on execd
   #     -> job will be started 
   #  qacct
   #     -> job was executed successfully
   #
   # Scenario 8:
   #  qrsh sleeper.sh
   #     -> successfull submission
   #     -> embedded script options won't be parsed 
   #  path_aliasing is disabled
   #     -> jobscript will be found on execd
   #     -> job will be started 
   #  qacct
   #     -> job was executed successfully
   #
   # Scenario 9:
   #  qrsh -b y <file_which_does_not_exist_on_client> 
   #     -> successfull submission
   #     -> embedded script options won't be parsed 
   #  path_aliasing is enabled
   #     -> jobscript will be found on execd
   #     -> job will be started 
   #  qacct
   #     -> job was executed successfully
   #
   # Scenario 10:
   #  qrsh -b n <file_which_does_not_exist_on_client> 
   #     -> error message
   #

   # scenario id
   set scenario_list { "1" "2"  "3"  "4"  "5"  "6"  "7" \
                       "8" "9" "10" "11"}

   # 0 - qsub
   # 1 - qrsh
   set sub_cmd_list { "0" "0" "0" "0" "0" "0" "0" \
                      "1" "1" "1" "1" }

   # 0 - b n
   # 1 - b y
   # 2 - use default for -b
   set b_param_list { "0" "2" "1" "1" "0" "2" "1" \
                      "2" "1" "0" "1"}

   # 0 - /xxx/sleeper.sh 15 
   # 1 - $SGE_ROOT/examples/jobs/sleeper.sh 15
   # 2 - /bin/echo '$JOB_NAME'
   # 3 - $CHECK_ACTUAL_TEST_PATH/args.sh  
   set s_exist_list { "0" "0" "0" "0" "1" "1" "1" \
                      "1" "0" "0" "2" }

   # 0 - disable path aliasing
   # 1 - enable path aliasing
   set p_alias_list { "0" "0" "1" "0" "0" "0" "0" \
                      "0" "1" "0" "0" }

   # 0 - job submission should be successfull
   # 1 - submission command has to fail in this scenario
   set s_error_list { "1" "1" "0" "0" "0" "0" "0" \
                      "0" "0" "1" "0" }

   # 0 - job execution should be successfull
   # 1 - job should switch into error state
   # 2 - do not perform this test (job was not submitted)
   set e_error_list { "2" "2" "0" "0" "0" "0" "0" \
                      "0" "0" "2" "2" }

   # 0 - check wether the job was executed successfully (qacct)
   # 1 - do not perform this test
   set account_list { "1" "1" "0" "1" "0" "0" "0" \
                      "0" "0" "1" "1" }

   set sleep_t 15
   set start_scenario 1
   set end_scenario 99 

   set job_id "-1"

   # interate through all scenarios
   foreach scenario $scenario_list b_param $b_param_list \
           p_alias $p_alias_list s_exist $s_exist_list \
           s_error $s_error_list e_error $e_error_list \
           account $account_list sub_cmd $sub_cmd_list {

      #
      # for debug purpose we might skip some scenarios 
      #
      if { $scenario < $start_scenario || $scenario > $end_scenario } {
         continue
      }

      puts "STARTING WITH SCENARIO $scenario"

      # 
      # delete default file or delete file used in last scenario
      # create new sge_aliases file if it it necessary for this scenario
      #
      set sge_aliases "$CHECK_PRODUCT_ROOT/$ts_config(cell)/common/sge_aliases"
      if { ( [ file isfile ${sge_aliases}] == 1) } {
         delete_file "$sge_aliases" 
      }
      if { $p_alias == 1 } {
         set data(src-path,0)    "/xxx/"
         set data(sub-host,0)    "*"
         set data(exec-host,0)   "*"
         set data(replacement,0) "$CHECK_PRODUCT_ROOT/examples/jobs/"
         create_path_aliasing_file $sge_aliases data 1
         set cwd_parameter "-cwd"
      } else {
         set cwd_parameter ""
      }

      #
      # initialize submission parameters
      #
      set qsub_arguments ""
      if { $b_param == 0 } {
         set b_parameter "-b n"
      } elseif { $b_param == 1 } {
         set b_parameter "-b y"
      } elseif { $b_param == 2 } {
         set b_parameter ""
      }
      if { $s_exist == 0 || $s_exist == 1 } {
         if { $b_param == 0 } {
            set job_name "Sleeper"
         } elseif { $b_param == 1 } {
            set job_name "sleeper.sh" 
         } elseif { $b_param == 2 } {
            if {$sub_cmd == 0 } {
               set job_name "Sleeper"
            } elseif { $sub_cmd == 1 } {
               set job_name "sleeper.sh"
            }
         }
      } elseif { $s_exist == 2 } {
         set job_name "echo"
      }
      if { $s_exist == 0 } {
         set jcommand "/xxx/sleeper.sh $sleep_t"
      } elseif { $s_exist == 1 } {
         set jcommand "$CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh $sleep_t"
      } elseif { $s_exist == 2 } {
         set jcommand "/bin/echo \'\$JOB_NAME\'"
      } elseif { $s_exist == 3 } {
         set job_arguments "$JOB_NAME \"\" test \'$JOB_NAME\'"
         set jcommand "${CHECK_ACTUAL_TEST_PATH}/args.sh $job_arguments"
      }
      set qsub_arguments "$cwd_parameter $b_parameter $jcommand"

      #
      # try to submit job
      #
      set output "bablick"
      if { $sub_cmd == 0 } {
         set job_id [submit_job $qsub_arguments 0]
      } elseif { $sub_cmd == 1 } {
         #
         # We need to know the id of the last job to calculate
         # the id of the next (qrsh) job. If there was no previous
         # job than we will execute one to get an id.
         #
         if { $job_id == -1 } {
            set t_io_parameter "-o /dev/null -e /dev/null"
            set t_cmd "$CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh $sleep_t"
            set t_qsub_arguments "$t_io_parameter $t_cmd"
            set job_id [submit_job $t_qsub_arguments ]
            delete_job $job_id
         }
         incr job_id 1

         puts "qrsh arguments: $qsub_arguments"
         set output [start_remote_prog "$CHECK_HOST" "$CHECK_USER" "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qrsh" "$qsub_arguments"]
         set output [string trim $output] 
         set result $prg_exit_state
      }

      #
      # Check submit result
      #
      if { $sub_cmd == 0 } {
         if { $job_id == -1  && $s_error == 0 } { 
            add_proc_error "binary_submission_check" "-1" \
               "unable to start job in scenario $scenario"
            return
         } elseif { $job_id > 0 && $s_error == 1 } {
            add_proc_error "binary_submission_check" "-1" \
               "Submitted job which should be rej. in scenario $scenario" 
            return
         }
      } elseif { $sub_cmd == 1 } {
         if { $result != 0 && $s_error == 0 } {
            add_proc_error "binary_submission_check" "-1" \
               "unable to start job in scenario $scenario"
            return
         } elseif { $result == 0 && $s_error == 1 } {
            add_proc_error "binary_submission_check" "-1" \
               "Submitted job which should be rej. in scenario $scenario"
            return
         }
      }

      #
      # Check lifetime of job
      #
      if { $sub_cmd == 0 } {
         #
         # Either the job will be executed successfully
         # or it will be put back into the list of pending jobs (E state)
         # or we have nothing to do because 
         #
         if { $e_error == 0 } {
            # JG: Job may be done too fast in scenario 4
            if { $scenario != 4 } {
               wait_for_jobstart $job_id $job_name 300 
            }
            wait_for_jobend $job_id $job_name 30 0
         } elseif { $e_error == 1 } {
            set state_timeout [timestamp] ;# get unix timestamp
            incr state_timeout 30         ;# timeout
            set E_state_ok 0
            while { $state_timeout > [timestamp] } {
               set job_state [ get_job_state $job_id ] 
               if { [ string compare $job_state "Eqw" ] == 0 } {
                  set E_state_ok 1 
                  break
               }
               sleep 1
            }   
            if { $E_state_ok != 1 } {
               add_proc_error "binary_submission_check" "-1" \
                  "Job did not switch into E state in scenario $scenario"
               return
            }
            delete_job $job_id
         } elseif { $e_error == 2 } { 
            # do nothing here
         }
      } elseif { $sub_cmd == 1 } {
         if { $e_error == 0 } {
            wait_for_jobend $job_id $job_name 20 0
            if { $s_exist == 2 } { 
               # 
               # check if output of command is correct
               #
               if { [ string compare $output $job_name ] != 0 } {
                  add_proc_error "binary_submission_check" "-1" \
                     "Invalid output in $scenario" 
               }
            }
         } elseif { $e_error == 1 } {
            # do nothing here
         } elseif { $e_error == 2 } {
            # do nothing here
         } 
      } 

      #
      # Check whether the job was executed successfully
      #
      if { $account == 0 } {
         # wait for accounting to be flushed
         after 10000
         was_job_running $job_id
      }

      puts "TEST FOR SCENARIO $scenario WAS SUCCESSFULL"
   }

   set_error 0 "ok"
}


