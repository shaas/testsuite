#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


#****** functional/usage ***************************************
#
#  NAME
#     function -- test if usage is reported correctly
#
#  FUNCTION
#     This test monitors and checks the job usage reported by SGE 
#    (cpu and mem).
#
#     The following job types are run:
#     - single CPU job
#     - tightly integrated parallel job
#     - loosely integrated parallel job
#        - with job_is_first_task = TRUE
#        - with job_is_first_task = FALSE
#
#     The following usage related settings are tested:
#     - "normal" usage reporting
#     - reserved usage (execd_params acct_reserved_usage and 
#                       sharetree_reserved_usage)
#
#     The following submit commands are used:
#     - qsub
#     - qrsh (with command)
#
#  NOTES
#     - we should also check array jobs
#     - we should also check parallel array jobs
#     - we should have additional submit methods (qsh, qlogin, qrsh without 
#       command)
#
#  BUGS
#     - "normal" usage tests are still missing
#***************************************************************************

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env
global ts_config
global submit_command

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "usage_init_level"

# define test's name and run level descriptions
set check_name            "usage"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   101
set check_description(0)  "check reserved usage of jobs submitted with qsub (random host)"
set check_description(1)  "check reserved usage of jobs submitted with qrsh (random host)"
set check_description(2)  "check reserved usage of jobs submitted with qrsh (random host), accounting summary"
set check_description(100)  "check reserved usage of jobs submitted with qsub (all architectures)"
set check_description(101)  "check reserved usage of jobs submitted with qrsh (all architectures)"
set check_description(102)  "check reserved usage of jobs submitted with qrsh (all architectures), accounting summary"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function "usage_setup"
set check_cleanup_function "usage_cleanup"
set check_setup_level_function "usage_setup_level"

# define test's procedure order
set check_functions ""
lappend check_functions "usage_single"
lappend check_functions "usage_tight"
lappend check_functions "usage_loose1"
lappend check_functions "usage_loose2"

proc usage_init_level {} {
   global ts_config
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 -
      1 -
      100 -
      101 {
         return 0
      }
      2 -
      102 {
         if {$ts_config(gridengine_version) >= 62} {
            return 0
         }
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc usage_setup_level {} {
   global ts_config
   global CHECK_ACT_LEVEL
   global submit_command usage_master_hosts usage_accounting_summary

   set usage_accounting_summary 0
   switch -exact $CHECK_ACT_LEVEL {
      0 {
         set submit_command "qsub"
         set usage_master_hosts [host_conf_get_suited_hosts]
      }
      1 -
      2 {
         set submit_command "qrsh"
         set usage_master_hosts [host_conf_get_suited_hosts]
      }
      100 {
         set submit_command "qsub"
         set usage_master_hosts $ts_config(unique_arch_nodes)
      }
      101 -
      102 {
         set submit_command "qrsh"
         set usage_master_hosts $ts_config(unique_arch_nodes)
      }
   }
   if {$CHECK_ACT_LEVEL == 2 || $CHECK_ACT_LEVEL == 102} {
      set usage_accounting_summary 1
   }

   # in levels 2 and 102, we test with pe setting accounting_summary true
   if {$usage_accounting_summary} {
      set pe(accounting_summary) "TRUE"
   } else {
      if {$ts_config(gridengine_version) >= 62} {
         set pe(accounting_summary) "FALSE"
      }
   }
   mod_pe "tight" pe

   ts_log_fine "testing $submit_command on host(s) $usage_master_hosts"
}

proc usage_setup {} {
   global ts_config
   global saved_config

   # backup old config
   get_config saved_config

   # set scheduler flushing params
   if {$ts_config(gridengine_version) == 53} {
      set new_config(schedd_params) "$saved_config(schedd_params) flush_submit_secs=0"
   } else {
      set my_schedd_conf(flush_submit_sec) "1"
      set_schedd_config my_schedd_conf 
   }

   # set global config params
   set new_config(load_report_time) "0:0:5"
   set new_config(execd_params) "$saved_config(execd_params) acct_reserved_usage=1 sharetree_reserved_usage=1"
   set_config new_config
   sleep 30

   # create parallel environments
   set pe(slots)              5
   set pe(user_lists)         none
   set pe(xuser_lists)        none
   set pe(start_proc_args)    none
   set pe(stop_proc_args)     none
   set pe(allocation_rule)    "\$round_robin"
   set pe(control_slaves)     TRUE
   set pe(job_is_first_task)  FALSE
   add_pe tight pe

   set pe(control_slaves)     FALSE
   add_pe loose1 pe

   set pe(job_is_first_task)  TRUE
   add_pe loose2 pe

   set queue_conf(load_thresholds) "np_load_avg=11"
   set queue_conf(pe_list)         "tight loose1 loose2"
   set queue_conf(slots)           5

   # set memory limits
   set queue_conf(h_vmem) "500M"
   add_queue "usage.q" "@allhosts" queue_conf
}

proc usage_cleanup {} {
   global ts_config
   global saved_config

   delete_all_jobs
   wait_for_end_of_all_jobs 60

   # reset config
   set_config saved_config

   if {$ts_config(gridengine_version) != 53} {
      reset_schedd_config;
   }
   
   sleep 15

   del_queue usage.q "" 0 1

   # remove pe's
   del_pe tight
   del_pe loose1
   del_pe loose2
}

# -------- local test procedures: utilities --------------------------
proc usage_monitor_job {id started_var finished_var jobid_var info_var {my_timeout 180} {timeout_error 1}} {
   global ts_config
   global master_host

   upvar $started_var  started
   upvar $finished_var finished
   upvar $jobid_var    jobid
   upvar $info_var     info

   set ret "unknown"

   set sp_id [lindex $id 1]
   set timeout $my_timeout
   
   expect_user {
      -i $sp_id timeout {
         if {$timeout_error} {
            ts_log_severe "timeout waiting for tasks output (usage)"
            set ret "timeout"
         } else {
            set ret "task running"
         }
      }
      -i $sp_id full_buffer {
         ts_log_severe "buffer overflow please increment CHECK_EXPECT_MATCH_MAX_BUFFER value"
         set ret "error"
      }
      -i $sp_id eof {
         set ret "eof"
      }
      # workaround for a feature lacking in expect:
      # We have to parse complete lines.
      # expect_user ensures only that expect will parse input up to a newline,
      # but there seems to be no way to tell expect we want to examine each
      # individual line.
      -i $sp_id "?*\n" {
         #ts_log_fine "entered default branch, data: $expect_out(0,string)"
         foreach line [string trim [split $expect_out(0,string) "\n"]] {
            set line [string trim $line]
            if {[string length $line] > 0} {
               #ts_log_fine "processing line: $line"
               switch -glob -- $line {
                  "starting with method *" {
                     incr started
                     ts_log_fine "usage script started"
                     set ret "task started"
                  }
                  "petask ??? with pid ???????? started on host*" {
                     set task [lindex $line 1]
                     lappend info(tasks) $task
                     set info($task,pid) [lindex $line 4]
                     set info($task,host) [lindex $line 8]
                     incr started
                     ts_log_fine "task $task started, total started: $started"
                     set ret "task started"
                  }
                  "petask ??? with pid ???????? finished*" {
                     set task [lindex $line 1]
                     incr finished
                     ts_log_fine "task $task finished, total finished: $finished"
                     set ret "task finished"
                  }
                  "master task started with job id ?????? and pid*" {
                     set jobid [lindex $line 6]
                     lappend info(tasks) master
                     set info(master,pid) [lindex $line 9]
                     set info(master,host) $master_host
                     ts_log_fine "job $jobid started"
                     set ret "master started"
                  }
                  "master task submitted all sub tasks*" {
                     ts_log_fine "master task submitted all tasks"
                     set ret "master submitted"
                  }
                  "master task exiting*" {
                     ts_log_fine "job $jobid exited"
                     set ret "master finished"
                  }
                  "NSLOTS ??? NHOSTS ??? NQUEUES*" {
                     set ret "task running"
                  }
                  "_start_mark_:(*)*" {
                     ts_log_fine "got start mark from remote prog shell script"
                  }
                  "_exit_status_:(*)*" {
                     ts_log_fine "got exit status from remote prog shell script"
                  }
                  "script done.*" {
                     ts_log_fine "got \"script done.\" from remote prog shell script"
                  }

                  default {
                     ts_log_fine "skipping unexpected job output $line"
                  }
               }
            }
         }
      }
   }
   return $ret
}

proc usage_job_finished {job_state} {
   switch -exact $job_state {
      "timeout" -
      "eof" -
      "master finished" -
      "error" {
         set job_finished 1
      }
      
      "unknown" -
      "task started" -
      "task running" -
      "task finished" -
      "master started" -
      "master submitted" {
         set job_finished 0
      }

      default {
         set job_finished 1
      }
   }

   return $job_finished
}


proc usage_check {jobid qstat_j_info slots acct_slots} {
   global ts_config
   global usage_accounting_summary

   upvar $qstat_j_info online_info

   set online_cpu $online_info(cpu)
   set online_mem $online_info(mem)

   # get accounting record
   # on SGE >= 60, the accounting file is buffered - wait for all records being written
   if {$ts_config(gridengine_version) >= 60} {
      sleep 10
   }
   get_qacct $jobid
   set acct_cpu $qacct_info(cpu)
   set acct_mem $qacct_info(mem)
   set acct_count [llength $qacct_info(exit_status)]
   ts_log_fine "acct_cpu = $acct_cpu, acct_mem = $acct_mem, acct_count = $acct_count"

   # calculate expected usage
   # JG: TODO: not yet perfect for parallel jobs: we have to check the 
   #           memory limit for each queue we have jobs running in
   #           and set different memory limits for different queues
   set wallclock $qacct_info(ru_wallclock)
   set expected_cpu [expr $wallclock * $slots]
   set expected_mem [expr $wallclock * 500.0 * $slots / 1024]
   ts_log_fine "expected_cpu = $expected_cpu, expected_mem = $expected_mem"

   # compare usage
   set result {}
   # online cpu
   if {[expr abs($online_cpu - $expected_cpu)] > [expr $expected_cpu / 10]} {
      lappend result "online cpu usage ($online_cpu) differs more than 10% from expected usage ($expected_cpu) on host $qacct_info(hostname)"
   }
   # online mem
   if {[expr abs($online_mem - $expected_mem)] > [expr $expected_mem / 10]} {
      lappend result "online memory usage ($online_mem) differs more than 10% from expected usage ($expected_mem) on host $qacct_info(hostname)"
   }
   # accounting cpu
   if {[expr abs($acct_cpu - $expected_cpu)] > [expr $expected_cpu / 20]} {
      lappend result "accounting cpu usage ($acct_cpu) differs more than 5% from expected usage ($expected_cpu) on host $qacct_info(hostname)"
   }
   # accounting mem
   if {[expr abs($acct_mem - $expected_mem)] > [expr $expected_mem / 20]} {
      lappend result "accounting memory usage ($acct_mem) differs more than 5% from expected usage ($expected_mem) on host $qacct_info(hostname)"
   }
   # number of accounting records
   if {$usage_accounting_summary} {
      if {$acct_count != 1} {
         lappend result "got $acct_count accounting records, but expected 1 record (accounting summary)"
      }
   } else {
      if {$acct_count != $acct_slots} {
         lappend result "got $acct_count accounting records, but expected $slots records"
      }
   }

   return $result
}

proc max {a b} {
   if {$a >= $b} {
      return $a
   } else {
      return $b
   }
}

proc usage_monitor_check {id test_name slots acct_slots} {
   set started 0
   set finished 0
   set jobid 0
   set job_finished 0
   set my_timeout 180
   set timeout_error 1
   if [info exists qstat_j_info] {
      unset qstat_j_info
   }
   set online_info(cpu) 0
   set online_info(mem) 0
   set now [clock seconds]
   set end [expr $now + 300]
   while {$job_finished == 0 && $now < $end} {
      set job_state [usage_monitor_job $id started finished jobid info $my_timeout $timeout_error]
      set job_finished [usage_job_finished $job_state]

      if {$started > 0 && $job_finished == 0} {
         set my_timeout 1
         set timeout_error 0
         if {![get_qstat_j_info $jobid]} {
            ts_log_severe "job terminated abnormally"
            set job_finished 1
         } else {
            # get online usage
            foreach name [array names qstat_j_info] {
               if {[string compare [lindex $name 0] "usage"] == 0} {
                  set usage_list [split $qstat_j_info($name) ","]
                  set value_list [split [lindex $usage_list 0] "="]
                  set online_cpu [parse_cpu_time [lindex $value_list 1]]
                  set value_list [split [lindex $usage_list 1] "="]
                  set online_mem [lindex [lindex $value_list 1] 0]
                  set online_info(cpu) [max $online_info(cpu) $online_cpu]
                  set online_info(mem) [max $online_info(mem) $online_mem]
               }
            }
            ts_log_fine "job state: $job_state, cpu: $online_info(cpu), mem: $online_info(mem)"
         }
      } else {
         ts_log_fine "job state: $job_state"
      }

      set now [clock seconds]
   }

   close_spawn_process $id

   if {$timeout_error} {
      ts_log_severe "job didn't run as expected"
      delete_all_jobs
   } else {   
      wait_for_jobend $jobid usage 60 0 1

      # now wait for some time - accounting file might not be flushed yet
      sleep 20

      if {!$job_finished} {
         ts_log_severe "job terminated abnormally"
      } else {
         set error_list [usage_check $jobid online_info $slots $acct_slots]

         foreach error $error_list {
            ts_log_severe $error
         }
      }
   }
}

# -------- local test procedures: tests ------------------------------
proc usage_single {} {
   global ts_config
   global submit_command usage_master_hosts
   global master_host
   global CHECK_FIRST_FOREIGN_SYSTEM_USER

   foreach master_host $usage_master_hosts {
      ts_log_fine "usage: single cpu job submitted with $submit_command to run on host $master_host"

      set queue [get_queue_instance "usage.q" $master_host]
      set id [submit_with_method $submit_command "-N usage -q $queue" "$ts_config(testsuite_root_dir)/scripts/usage.sh" "sleep 60" $master_host $CHECK_FIRST_FOREIGN_SYSTEM_USER]

      usage_monitor_check $id "usage_single" 1 1
   }
}

proc usage_tight {} {
   global ts_config
   global submit_command usage_master_hosts
   global master_host
   global CHECK_FIRST_FOREIGN_SYSTEM_USER

   # tight integration with csp is not working in SGE(EE) 5.3
   if {$ts_config(gridengine_version) == 53 && $ts_config(product_feature) == "csp"} {
      ts_log_config "tight integration is not available in SGE(EE) 5.3 with CSP enabled"
   } else {
      foreach master_host $usage_master_hosts {
         ts_log_fine "usage: tightly integrated parallel job submitted with $submit_command, master_host is $master_host"

         set queue [get_queue_instance "usage.q" $master_host]
         set id [submit_with_method $submit_command "-pe tight 4 -N usage -masterq $queue" "$ts_config(testsuite_root_dir)/scripts/pe_job.sh" "$ts_config(testsuite_root_dir)/scripts/pe_task.sh 1 120" $master_host $CHECK_FIRST_FOREIGN_SYSTEM_USER]

         usage_monitor_check $id "usage_tight" 5 5
      }
   }
}

proc usage_loose {pe expected_slots acct_slots} {
   global ts_config
   global submit_command usage_master_hosts
   global master_host
   global CHECK_FIRST_FOREIGN_SYSTEM_USER

   foreach master_host $usage_master_hosts {
      ts_log_fine "usage: parallel job in pe $pe submitted with $submit_command, master_host is $master_host"

      set queue [get_queue_instance "usage.q" $master_host]
      set id [submit_with_method $submit_command "-N usage -pe $pe 4 -masterq $queue" "$ts_config(testsuite_root_dir)/scripts/usage.sh" "sleep 60" $master_host $CHECK_FIRST_FOREIGN_SYSTEM_USER]

      usage_monitor_check $id "usage_loose" $expected_slots $acct_slots
   }
}

proc usage_loose1 {} {
   usage_loose loose1 5 1
}

proc usage_loose2 {} {
   usage_loose loose2 4 1
}
