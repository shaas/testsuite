#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace

# define a level initialization procedure:
set check_init_level_procedure "copy_certs_init_level"

# define test's name and run level descriptions
set check_name            "copy_certs"
set check_category        "COMPATIBILITY SYSTEM VERIFIED CSP"
set check_highest_level   0
set check_description(0)  "Tests the copy_certs switch installation script"

set check_root_access_needs  "yes"

# define test's dependencies
set check_needs           "init_core_system"

# define test's procedure order
set check_fuctions   ""
lappend check_functions "copy_certs_setup"
set check_highest_level       0

proc copy_certs_init_level {} {
   global ts_config
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0"  { 
         return 0
      }
   }

   return -1
}

proc copy_certs_setup {} {
   global ts_config
   global CHECK_USER

   set HIT_RETURN_TO_CONTINUE       [translate $ts_config(master_host) 0 1 0 [sge_macro DISTINST_HIT_RETURN_TO_CONTINUE] ]
   set CURRENT_GRID_ROOT_DIRECTORY  [translate $ts_config(master_host) 0 1 0 [sge_macro DISTINST_CURRENT_GRID_ROOT_DIRECTORY] "*" "*" ]
   set CELL_NAME_FOR_EXECD          [translate $ts_config(master_host) 0 1 0 [sge_macro DISTINST_CELL_NAME_FOR_EXECD] "*"]
   set ENTER_HOSTS                  [translate $ts_config(master_host) 0 1 0 [sge_macro DISTINST_ENTER_HOSTS] ]
   set FILE_FOR_HOSTLIST            [translate $ts_config(master_host) 0 1 0 [sge_macro DISTINST_FILE_FOR_HOSTLIST] ]
   set FINISHED_ADDING_HOSTS        [translate $ts_config(master_host) 0 1 0 [sge_macro DISTINST_FINISHED_ADDING_HOSTS] ]
   set CSP_COPY_CERTS [translate $ts_config(master_host) 0 1 0 [sge_macro DISTINST_CSP_COPY_CERTS]]
   set CSP_COPY_CMD [translate $ts_config(master_host) 0 1 0 [sge_macro DISTINST_CSP_COPY_CMD]]
   set CSP_COPY_FAILED [translate $ts_config(master_host) 0 1 0 [sge_macro DISTINST_CSP_COPY_FAILED]]
   set CSP_COPY_RSH_FAILED [translate $ts_config(master_host) 0 1 0 [sge_macro DISTINST_CSP_COPY_RSH_FAILED]]

   set remote_host "$ts_config(master_host)"
   set submit_hosts ""
   if {$ts_config(submit_only_hosts) != "none"} {
      set submit_hosts "$ts_config(submit_only_hosts)"
   }
   set hostcount 0

   # start submithost install 
   set id [open_remote_spawn_process $remote_host $CHECK_USER "./inst_sge" "-copycerts \"$submit_hosts\"" 0 $ts_config(product_root)]
   set sp_id [ lindex $id 1 ]
   set do_log_output 0 ;# _LOG

   while {1} {
      set timeout 30
      log_user 1
      ts_log_fine "reset error status"
      expect {
         -i $sp_id $HIT_RETURN_TO_CONTINUE {
            ts_log_fine "\n -->testsuite: sending >RETURN<(1)"
            if {$do_log_output == 1} {
               ts_log_fine "-->testsuite: press RETURN (HIT_RETURN_TO_CONTINUE)"
               set anykey [wait_for_enter 1]
            }
            ts_send $sp_id "\n"
            continue
         }
         -i $sp_id $CURRENT_GRID_ROOT_DIRECTORY {
            ts_log_fine "\n --> testsuite: sending >RETURN<(2)"
            ts_send $sp_id "\n"
            continue
         }
         -i $sp_id $CELL_NAME_FOR_EXECD {
            ts_log_fine "\n -->testsuite: sending $ts_config(cell)"
            set input "$ts_config(cell)\n"
  
            if {$do_log_output == 1} {
               ts_log_fine "-->testsuite: press RETURN (CELL_NAME_FOR_QMASTER)"
               set anykey [wait_for_enter 1]
            }
            ts_send $sp_id $input
            continue
         }
         -i $sp_id $ENTER_HOSTS {
            if {$hostcount >= [llength $submit_hosts]} {
               ts_log_fine "\n -->testsuite: sending >RETURN<(3)"
               ts_send $sp_id "\n"
            } else {
               set submit_host [lindex $submit_hosts $hostcount]
               incr hostcount
               ts_log_fine "\n -->testsuite: sending >${submit_host}<"
               ts_send $sp_id "$submit_host\n"
            }
            continue
         }
         -i $sp_id $FINISHED_ADDING_HOSTS {
            ts_log_fine "\n -->testsuite: sending >RETURN<(4)"
            if {$do_log_output == 1} {
               ts_log_fine "-->testsuite: press RETURN (FINISHED_ADDING_HOSTS)"
               set anykey [wait_for_enter 1]
            }
            ts_send $sp_id "\n"
            continue
         }
         -i $sp_id $FILE_FOR_HOSTLIST {
            ts_log_fine "\n -->testsuite: sending >RETURN<(5)"
            if {$do_log_output == 1} {
               ts_log_fine "-->testsuite: press RETURN (FILE_FOR_HOSTLIST)"
               set anykey [wait_for_enter 1]
            }
            ts_send $sp_id "\n"
            continue
         }
         -i $sp_id $CSP_COPY_CERTS {
            ts_log_fine "\n -->testsuite: sending >RETURN<(6)"
            if {$do_log_output == 1} {
               ts_log_fine "-->testsuite: press RETURN (CSP_COPY_CERTS)"
               set anykey [wait_for_enter 1]
            }
            ts_send $sp_id "\n"
            continue
         }
         -i $sp_id $CSP_COPY_CMD {
            ts_log_fine "\n -->testsuite: sending y (yes)"
            set input "y\n"
  
            if {$do_log_output == 1} {
               ts_log_fine "-->testsuite: press RETURN (CSP_COPY_CMD)"
               set anykey [wait_for_enter 1]
            }
            ts_send $sp_id $input
            continue
         }
         -i $sp_id "Copying certificates is complete!" {
            ts_log_fine "copy successful" 
            break   
         }
         # Errors
         -i $sp_id "No CSP system installed!" {
            ts_log_info "No csp system, copy not necessary and possible" 
            break   
         }
         -i $sp_id "The certificate copy failed!" {
            ts_log_info "copy failed" 
            continue   
         }
         -i $sp_id "Certificates couldn't be copied!" {
            ts_log_info "rsh is not working" 
            continue   
         }
         -i $sp_id "Permission denied" {
            ts_log_info "rsh is working but copy error happened"
            continue   
         }

         -i $sp_id timeout {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id
            return
         }
         -i $sp_id "ommand failed*\n" {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id
            return
         }
      }
   }

   # close the connection to inst_sge
   close_spawn_process $id
}
