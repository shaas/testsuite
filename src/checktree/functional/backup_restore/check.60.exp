#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace

# define a level initialization procedure:
set check_init_level_procedure "backup_restore_init_level"

# define test's name and run level descriptions
set check_name            "backup_restore"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "Tests the backup and restore functionality"

set check_root_access_needs "yes"

# define test's dependencies
set check_needs           "init_core_system"

# setup and cleanup functions
set check_setup_function "backup_restore_setup"
set check_cleanup_function "backup_restore_cleanup"

# define test's procedure order
set check_fuctions ""
lappend check_functions "backup_restore_do_backup_restore"
lappend check_functions "backup_restore_check_cluster"
set check_highest_level 0

proc backup_restore_init_level {} {
   global ts_config
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0  {
         return 0
      }
   }

   return -1
}

proc backup_restore_setup {} {
   global ts_config CHECK_USER
   global test_ar

   # create a rqs
   if {$ts_config(gridengine_version) >= 61} {
      set rules ""
      lappend rules "to slots=10"
      set rqs(test,limit) $rules
      add_rqs rqs
   }

   # create an advance reservation
   if {$ts_config(gridengine_version) >= 62} {
      set test_ar [submit_ar "-N TEST_AR -d 3600"]
   }
}

proc backup_restore_do_backup_restore {} {
   global ts_config CHECK_USER

   set spooling_method $ts_config(spooling_method)
   set master_spool_dir [get_spool_dir $ts_config(master_host) qmaster]
   if {$spooling_method == "berkeleydb" && $ts_config(bdb_server) != "none"} {
      ts_log_fine "berkeleydb rpc spooling detected"
      set remote_host $ts_config(bdb_server)
      set spool_dir [get_bdb_spooldir $remote_host]
   } else {
      set remote_host $ts_config(master_host)
      set spool_dir [get_spool_dir $ts_config(master_host) spooldb]
      if {$spooling_method == "classic"} {
         ts_log_fine "classic spooling detected"
      } else {
         ts_log_fine "berkeleydb local spooling detected"
      }
   }
   #ST support file
   set st_file "$ts_config(product_root)/$ts_config(cell)/common/st.enabled"
   set st_file_before [is_remote_file $ts_config(master_host) $CHECK_USER $st_file] 

   # Backup Database
   set id [open_remote_spawn_process $remote_host $CHECK_USER "./inst_sge" "-bup" 0 $ts_config(product_root)]
   set sp_id [lindex $id 1]

   log_user 1
   while {1} {
      set timeout 30
      expect {
         -i $sp_id "Please enter your SGE_ROOT directory." {
            ts_log_fine "--> testsuite: sending $ts_config(product_root)"
            ts_send $sp_id "$ts_config(product_root)\n"
            continue
         }
         -i $sp_id "Please enter your SGE_CELL name.*" {
            ts_log_fine "--> testsuite: sending $ts_config(cell)"
            ts_send $sp_id "$ts_config(cell)\n"
            continue;
         }
         -i $sp_id "Where do you want to save the backupfiles?" {
            ts_log_fine "--> testsuite: sending >RETURN<"
            ts_send $sp_id "\n"
            continue;
         }
         -i $sp_id "Shall the backup function create a compressed tarpackage with your files?" {
            ts_log_fine "--> testsuite: sending >RETURN<"
            ts_send $sp_id "\n"
            continue;
         }
         -i $sp_id "Please enter a filename for your backupfile.*" {
            ts_log_fine "--> testsuite: sending >RETURN<"
            ts_send $sp_id "\n"
            continue;
         }
         -i $sp_id "Do you want to overwrite the existing backup directory?" {
            ts_log_fine "--> testsuite: sending y<"
            ts_send $sp_id "y\n"
            continue;
         }
         -i $sp_id "Are all settings right" {
            ts_log_fine "--> testsuite: sending y<"
            ts_send $sp_id "y\n"
            continue;
         }
         
         # Errors
         -i $sp_id timeout {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id;
            return;
         }
         -i $sp_id "ommand failed*\n" {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id;
            return;
         }
         -i $sp_id "No such file or directory*\n" {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id;
            return;
         }
         -i $sp_id "error:\n" {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id
            return
         }
        
         # End of loop
         -i $sp_id "All information is saved in*" {
            break
         } 
      }
   }

   # close the connection to inst_sge
   close_spawn_process $id

   #adding a queue
   add_queue "lila.q" "@allhosts" "" 1
  
   # TODO Try to restore the database with running master (should not be possible) 

   shutdown_core_system

   # move cell and spool directory
   if {$spooling_method == "berkeleydb"} {
      ts_log_fine "mv $spool_dir $ts_config(product_root)/spooling_backup"
      ts_log_fine [start_remote_prog $remote_host $CHECK_USER "mv" "$spool_dir $ts_config(product_root)/spooling_backup"]
   }
   ts_log_fine "mv $master_spool_dir $ts_config(product_root)/master_spooling_backup"
   ts_log_fine [start_remote_prog $remote_host $CHECK_USER "mv" "$master_spool_dir $ts_config(product_root)/master_spooling_backup"]

   ts_log_fine "mv $ts_config(product_root)/$ts_config(cell) $ts_config(product_root)/$ts_config(cell)_backup"
   ts_log_fine [start_remote_prog $remote_host $CHECK_USER "mv" "$ts_config(product_root)/$ts_config(cell) $ts_config(product_root)/$ts_config(cell)_backup"]

   # restore from backup 
   set id [open_remote_spawn_process $remote_host $CHECK_USER "./inst_sge" "-rst" 0 $ts_config(product_root)]
   set sp_id [lindex $id 1]
   log_user 1
   while {1} {
      set timeout 30
      expect {
         -i $sp_id "Hit, <ENTER> to continue!" {
            ts_log_fine "\n --> testsuite: sending >RETURN<"
            ts_send $sp_id "\n"
            continue
         }
         -i $sp_id "Please enter your SGE_ROOT directory." {
            ts_log_fine "\n --> testsuite: sending $ts_config(product_root)"
            ts_send $sp_id "$ts_config(product_root)\n"
            continue;
         }
         -i $sp_id "Please enter your SGE_CELL name.*" {
            ts_log_fine "\n --> testsuite: sending $ts_config(cell)"
            ts_send $sp_id "$ts_config(cell)\n"
            continue;
         }
         -i $sp_id "Is your backupfile in tar.gz*" {
            ts_log_fine "\n --> testsuite: sending >RETURN<"
            ts_send $sp_id "\n"
            continue;
         }
         -i $sp_id "Please enter the full path and name of your backup file." {
            ts_log_fine "\n --> testsuite: sending >RETURN<"
            ts_send $sp_id "\n"
            continue;
         }
         -i $sp_id "If this is correct hit *" {
            ts_log_fine "\n --> testsuite: sending >RETURN<"
            ts_send $sp_id "\n"
            continue;
         }
         -i $sp_id "Are all settings right" {
            ts_log_fine "\n --> testsuite: sending y<"
            ts_send $sp_id "y\n"
            continue;
         }
         
         # Errors
         -i $sp_id timeout {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id;
            return;
         }
         -i $sp_id "ommand failed*\n" {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id;
            return;
         }
         -i $sp_id "No such file or directory*\n" {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id;
            return;
         }
         -i $sp_id "error:\n" {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id
            return;
         }
         -i $sp_id "does not exist*" {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id
            return
         }
         
         # End of loop
         -i $sp_id "Your configuration has been restored" {
            break
         }
      }
   }
   
   # close connection to inst_sge
   close_spawn_process $id

   # restart the restored cluster
   startup_core_system  
   
   wait_for_load_from_all_queues 60

   set arch [resolve_arch $ts_config(master_host)]
   set args "-f"
   set result [start_remote_prog $ts_config(master_host) $CHECK_USER $ts_config(product_root)/bin/$arch/qstat $args exit_state]

   ts_log_fine "qstat result: $result"

   set tmp_result [split $result "\n"]

   foreach line $tmp_result {
      if {[string first "lila.q" $line] != -1} {
         ts_log_fine "found a queue, configured after backup!"
         ts_log_severe "restore did not work!"
      }
   }

   set st_file_after [is_remote_file $ts_config(master_host) $CHECK_USER $st_file] 
   if { $st_file_after != $st_file_before } {
      ts_log_fine "The st.enabled file is not restored!"
      ts_log_severe "restore did not work for ST!"
   }
}

proc backup_restore_check_cluster {} {
   global ts_config
   global test_ar

   # run a test job
   set job_id [submit_job "-o /dev/null -j y $ts_config(product_root)/examples/jobs/sleeper.sh 15"]
   if {$job_id > 0} {
      wait_for_jobstart $job_id "" 60
      wait_for_job_end $job_id
      get_qacct $job_id
   }

   # >= 6.1: check if rqs exists
   if {$ts_config(gridengine_version) >= 61} {
      get_rqs_list
      if {[lsearch $result "test"] < 0} {
         ts_log_severe "resource quota set \"test\" has not been restored"
      }
   }

   # >= 6.2: check if ar exists
   if {$ts_config(gridengine_version) >= 62} {
      parse_qrstat $test_ar
      if {![info exists qrstat_info(name)] || $qrstat_info(name) != "TEST_AR"} {
         ts_log_severe "advance reservation $test_ar has not been properly restored"
      }
   }
}

proc backup_restore_cleanup {} {
   global CHECK_USER ts_config
   global test_ar

   set spooling_method $ts_config(spooling_method)
   set master_spool_dir [get_spool_dir $ts_config(master_host) qmaster]
   if {$spooling_method == "berkeleydb" && $ts_config(bdb_server) != "none"} {
      ts_log_fine "berkeleydb rpc spooling detected"
      set remote_host $ts_config(bdb_server)
      set spool_dir $ts_config(bdb_dir)
   } else {
      set remote_host $ts_config(master_host)
      set spool_dir [get_spool_dir $ts_config(master_host) spooldb]
      if {$spooling_method == "classic"} {
         ts_log_fine "classic spooling detected"
      } else {
         ts_log_fine "berkeleydb local spooling detected"
      }
   }

   set result [wait_for_load_from_all_queues 60]

   if {$result != 0} {
       set master_spool_dir [get_spool_dir $ts_config(master_host) qmaster]
       shutdown_core_system
       ts_log_fine [start_remote_prog $remote_host $CHECK_USER "rm" "-rf $ts_config(product_root)/$ts_config(cell)"]
       ts_log_fine [start_remote_prog $remote_host $CHECK_USER "mv" "$ts_config(product_root)/$ts_config(cell)_backup $ts_config(product_root)/$ts_config(cell)"]
       ts_log_fine [start_remote_prog $remote_host $CHECK_USER "rm" "-rf $master_spool_dir"]
       ts_log_fine [start_remote_prog $remote_host $CHECK_USER "mv" "$ts_config(product_root)/master_spooling_backup $master_spool_dir"]

       if {$spooling_method == "berkeleydb"} {
         ts_log_fine [start_remote_prog $remote_host $CHECK_USER "rm" "-rf $spool_dir"]
         ts_log_fine [start_remote_prog $remote_host $CHECK_USER "mv" "$ts_config(product_root)/spooling_backup $spool_dir"]
       }

       startup_core_system
   } else {
      ts_log_fine "no need to restore the backup - load values from all execds available"
      ts_log_fine "removing $ts_config(product_root)/$ts_config(cell)_backup and other moved directories"
      ts_log_fine "rm -rf $ts_config(product_root)/$ts_config(cell)_backup"
      ts_log_fine [start_remote_prog $remote_host $CHECK_USER "rm" "-rf $ts_config(product_root)/$ts_config(cell)_backup"]
      ts_log_fine "rm -rf -rf $ts_config(product_root)/master_spooling_backup"
      ts_log_fine [start_remote_prog $remote_host $CHECK_USER "rm" "-rf $ts_config(product_root)/master_spooling_backup"]
      if { $spooling_method == "berkeleydb"} { 
         ts_log_fine "rm -rf -rf $ts_config(product_root)/spooling_backup"
         ts_log_fine [start_remote_prog $remote_host $CHECK_USER "rm" "-rf $ts_config(product_root)/spooling_backup"]
       }
   }

   # cleanup our test objects
   if {$ts_config(gridengine_version) >= 61} {
      del_rqs test
   }

   if {$ts_config(gridengine_version) >= 62} {
      delete_ar $test_ar
   }
}

