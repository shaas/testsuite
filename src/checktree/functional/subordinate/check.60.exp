#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Test description:
# ------------------
#
# Bugfixes:
# - Issue: 1882 - mutually subordinating queues suspend eachother 
#

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

#set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "subordinate_init_level"

# define test's name and run level descriptions
set check_name            "subordinate"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   8
set check_description(0)  "Consumable resources on global level"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function subordinate_setup
set check_cleanup_function subordinate_cleanup

# define test's procedure order
set check_functions "subordinate_test"


global subordinate_test_hosts
global subordinate_saved_slot_count

proc subordinate_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0
      } 
   } 

   return -1  ;# no other level 
}

# -------- local test procedures: initialization------------------------------

proc subordinate_setup  {} {
   global ts_config
   global subordinate_test_hosts
   global subordinate_saved_slot_count
   global consumable_complex_backup
   global CHECK_OUTPUT

   # backup complex - we will modify it during the test
   get_complex consumable_complex_backup

   set subordinate_test_hosts {}
   set subordinate_saved_slot_count ""
   set execd_count 0
   foreach host $ts_config(execd_nodes) {
      if { $execd_count < 2 } {
         incr execd_count 1
         lappend subordinate_test_hosts "$host"
         puts $CHECK_OUTPUT "using host $host"
      } 
   }

   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }

   disable_queue $queue_list
   puts $CHECK_OUTPUT "disabled $queue_list"
   
   set queue_settings(slots) 1
   set queue_settings(load_thresholds) "np_load_avg=11.75"
   set qname "res.q"
   add_queue $qname $subordinate_test_hosts queue_settings
   puts $CHECK_OUTPUT "added queue $qname for hosts $subordinate_test_hosts"

   unset queue_settings
   set queue_settings(slots) 1
   set queue_settings(load_thresholds) "np_load_avg=11.75"
   set queue_settings(subordinate_list) "res.q=1"
   set qname "res1.q"
   add_queue $qname $subordinate_test_hosts queue_settings
   puts $CHECK_OUTPUT "added queue $qname for hosts $subordinate_test_hosts"
   
   unset queue_settings
   set qname "res.q"
   set queue_settings(subordinate_list) "res1.q=1"
   set_queue $qname "" queue_settings
   puts $CHECK_OUTPUT "mod queue $qname for hosts $subordinate_test_hosts"
   
   set_error 0 "ok"
}

proc subordinate_cleanup  {} {
   global CHECK_OUTPUT ts_config
   global subordinate_test_hosts
   global subordinate_saved_slot_count
   global consumable_complex_backup

   delete_all_jobs
   wait_for_end_of_all_jobs 60

   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }
   enable_queue $queue_list
   puts $CHECK_OUTPUT "disabled $queue_list"

   set qname "res1.q"
   set queue_settings(subordinate_list) "none"
   set_queue $qname "" queue_settings

   set qname "res.q"
   del_queue $qname $subordinate_test_hosts  0 1

   set qname "res1.q"
   del_queue $qname $subordinate_test_hosts  0 1

   # restore complex
   set_complex consumable_complex_backup

   set_error 0 "ok"
}

proc subordinate_submit_jobs_and_wait { job_arguments job_count run_job_count job_arguments2 case { schedd_info "" } { queue_state "" } { schedd_info_err "" } } {
   global ts_config CHECK_OUTPUT CHECK_ARCH

   if { $job_arguments2 == "" } {
      for { set i 0 } { $i < $job_count } { incr i 1 } {
         set job_id($i) [submit_job "$job_arguments $ts_config(product_root)/examples/jobs/sleeper.sh 100"]
      }
   } else {
      for { set i 0 } { $i < $job_count } { incr i 1 } {
         set job_id($i) [submit_job "$job_arguments $ts_config(product_root)/examples/jobs/sleeper.sh 100"]
         incr i 1
         set job_id($i) [submit_job "$job_arguments2 $ts_config(product_root)/examples/jobs/sleeper.sh 100"]
      }
   }

   while { 1 } {
      trigger_scheduling
      set running_jobs 0
      set error 0
      for { set i 0 } { $i < $job_count } { incr i 1 } {
         set job_state [is_job_running $job_id($i) "leeper"]
         set job_id($i,running) $job_state
         if { $job_state == 1 } {
            incr running_jobs 1
         }
         if { $job_state == -1 } {
            add_proc_error "case $case) subordinate_submit_jobs_and_wait" -2 "job was not submitted - stop"
            set error 1
            break
         }
      }
      puts $CHECK_OUTPUT "running jobs count: $running_jobs"
      if { $running_jobs == $run_job_count || $error != 0 } {
         break
      }
   }

   if { $queue_state != "" } {
      wait_for_queue_state [lindex $queue_state 0] [lindex $queue_state 1] 60
   }

   if { $job_count != $run_job_count } {
      if { $schedd_info == "" } {
         add_proc_error "case $case) subordinate_submit_jobs_and_wait" -2 "got not running job, but no schedule info to search for"
      } else {
         set sched_info_tries 10
         set ok 0
         while { $sched_info_tries > 0 } {      
            trigger_scheduling
            for { set i 0 } { $i < $job_count } { incr i 1 } {
               if { $job_id($i,running) == 0 } {
                  puts $CHECK_OUTPUT "job $job_id($i) is not running, checking schedd job info message ..."
                  puts $CHECK_OUTPUT "looking for \"$schedd_info\" of job $job_id($i)"
                  get_qstat_j_info $job_id($i)
                  if { $schedd_info_err != "" } {
                     if { [string match "*$schedd_info_err*" $qstat_j_info(scheduling info)] } {
                        add_proc_error "subordinate_submit_jobs_and_wait_error" -2 "found issue 1894 (scheduling info contains: $schedd_info_err) - stop"
                        set error 1
                        set ok 1
                     }
                  }
                  if { [string match "*$schedd_info*" $qstat_j_info(scheduling info)] } {
                     puts $CHECK_OUTPUT "found matching scheduling info"
                     set ok 1
                  }
               }
            }
            if { $ok == 1 } {
               break
            }
            incr sched_info_tries -1
            after 1000
         }
         if { $ok != 1 } {
            add_proc_error "case $case) subordinate_submit_jobs_and_wait" -2 "can't find matching scheduler info:\nexpected: $schedd_info\ngot: $qstat_j_info(scheduling info)"
         }
      }
   }
   delete_all_jobs  
   wait_for_end_of_all_jobs 60
}

proc subordinate_test {} {
   global subordinate_test_hosts check_description CHECK_ARCH
   global CHECK_OUTPUT ts_config CHECK_CORE_MASTER CHECK_ACT_LEVEL CHECK_SCRIPT_FILE_DIR


   puts $CHECK_OUTPUT $check_description($CHECK_ACT_LEVEL)

   if { $CHECK_ACT_LEVEL == 0 } {
      set RUNATHOST  [translate $CHECK_CORE_MASTER 1 0 0 [sge_macro MSG_SCHEDD_INFO_QUEUENOTAVAIL_]  "*"]

      set job_arguments "-o /dev/null -e /dev/null"
      set job_count 4
      set run_job_count 2
      subordinate_submit_jobs_and_wait $job_arguments $job_count $run_job_count "" "a" $RUNATHOST
   }
   
   set_error 0 "ok"
}
