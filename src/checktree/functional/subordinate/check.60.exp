#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Test description:
# ------------------
#
# Bugfixes:
# - Issue: 1882 - mutually subordinating queues suspend eachother 
#

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs

#set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "subordinate_init_level"

# define test's name and run level descriptions
set check_name            "subordinate"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "Consumable resources on global level"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function subordinate_setup
set check_cleanup_function subordinate_cleanup

# define test's procedure order
set check_functions "subordinate_test"

global subordinate_test_hosts
global subordinate_saved_slot_count

proc subordinate_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc subordinate_setup {} {
   global ts_config
   global subordinate_test_hosts
   global subordinate_saved_slot_count
   global consumable_complex_backup

   # backup complex - we will modify it during the test
   get_complex consumable_complex_backup

   set subordinate_saved_slot_count ""

   set subordinate_test_hosts [host_conf_get_suited_hosts 2]
   ts_log_fine "using hosts $subordinate_test_hosts"

   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }

   disable_queue $queue_list
   ts_log_fine "disabled $queue_list"
   
   set queue_settings(slots) 1
   set queue_settings(load_thresholds) "np_load_avg=11.75"
   set qname "res.q"
   add_queue $qname $subordinate_test_hosts queue_settings
   ts_log_fine "added queue $qname for hosts $subordinate_test_hosts"

   unset queue_settings
   set queue_settings(slots) 1
   set queue_settings(load_thresholds) "np_load_avg=11.75"
   set queue_settings(subordinate_list) "res.q=1"
   set qname "res1.q"
   add_queue $qname $subordinate_test_hosts queue_settings
   ts_log_fine "added queue $qname for hosts $subordinate_test_hosts"
   
   unset queue_settings
   set qname "res.q"
   set queue_settings(subordinate_list) "res1.q=1"
   set_queue $qname "" queue_settings
   ts_log_fine "mod queue $qname for hosts $subordinate_test_hosts"
}

proc subordinate_cleanup {} {
   global ts_config
   global subordinate_test_hosts
   global subordinate_saved_slot_count
   global consumable_complex_backup

   delete_all_jobs
   wait_for_end_of_all_jobs 60

   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }
   enable_queue $queue_list
   ts_log_fine "disabled $queue_list"

   set qname "res1.q"
   set queue_settings(subordinate_list) "none"
   set_queue $qname "" queue_settings

   set qname "res.q"
   del_queue $qname $subordinate_test_hosts  0 1

   set qname "res1.q"
   del_queue $qname $subordinate_test_hosts  0 1

   # restore complex
   set_complex consumable_complex_backup
}

proc subordinate_submit_jobs_and_wait {job_arguments job_count run_job_count job_arguments2 case {schedd_info ""} {queue_state ""} {schedd_info_err ""}} {
   global ts_config

   if {$job_arguments2 == ""} {
      for {set i 0} {$i < $job_count} {incr i 1} {
         set job_id($i) [submit_job "$job_arguments $ts_config(product_root)/examples/jobs/sleeper.sh 100"]
      }
   } else {
      for {set i 0} {$i < $job_count} {incr i 1} {
         set job_id($i) [submit_job "$job_arguments $ts_config(product_root)/examples/jobs/sleeper.sh 100"]
         incr i 1
         set job_id($i) [submit_job "$job_arguments2 $ts_config(product_root)/examples/jobs/sleeper.sh 100"]
      }
   }

   while {1} {
      trigger_scheduling
      set running_jobs 0
      set error 0
      for {set i 0} {$i < $job_count} {incr i 1} {
         set job_state [is_job_running $job_id($i) "leeper"]
         set job_id($i,running) $job_state
         if {$job_state == 1} {
            incr running_jobs 1
         }
         if {$job_state == -1} {
            ts_log_warning "case $case: job was not submitted - stop"
            set error 1
            break
         }
      }
      ts_log_fine "running jobs count: $running_jobs"
      if {$running_jobs == $run_job_count || $error != 0} {
         break
      }
   }

   if {$queue_state != ""} {
      wait_for_queue_state [lindex $queue_state 0] [lindex $queue_state 1] 60
   }

   if {$job_count != $run_job_count} {
      if {$schedd_info == ""} {
         ts_log_warning "case $case: got not running job, but no schedule info to search for"
      } else {
         set sched_info_tries 10
         set ok 0
         while {$sched_info_tries > 0} {      
            trigger_scheduling
            for {set i 0} {$i < $job_count} {incr i 1} {
               if {$job_id($i,running) == 0} {
                  ts_log_fine "job $job_id($i) is not running, checking schedd job info message ..."
                  ts_log_fine "looking for \"$schedd_info\" of job $job_id($i)"
                  get_qstat_j_info $job_id($i)
                  if {$schedd_info_err != ""} {
                     if {[string match "*$schedd_info_err*" $qstat_j_info(scheduling info)]} {
                        ts_log_warning "found issue 1894 (scheduling info contains: $schedd_info_err) - stop"
                        set error 1
                        set ok 1
                     }
                  }
                  if {[string match "*$schedd_info*" $qstat_j_info(scheduling info)]} {
                     ts_log_fine "found matching scheduling info"
                     set ok 1
                  }
               }
            }
            if {$ok == 1} {
               break
            }
            incr sched_info_tries -1
            after 1000
         }
         if {$ok != 1} {
            ts_log_warning "case $case: can't find matching scheduler info:\nexpected: $schedd_info\ngot: $qstat_j_info(scheduling info)"
         }
      }
   }
   delete_all_jobs  
   wait_for_end_of_all_jobs 60
}

proc subordinate_test {} {
   global subordinate_test_hosts check_description
   global ts_config CHECK_ACT_LEVEL

   set RUNATHOST [translate_macro MSG_SCHEDD_INFO_QUEUENOTAVAIL_ "*"]

   set job_arguments "-o /dev/null -e /dev/null"
   set job_count 4
   set run_job_count 2
   subordinate_submit_jobs_and_wait $job_arguments $job_count $run_job_count "" "a" $RUNATHOST
}
