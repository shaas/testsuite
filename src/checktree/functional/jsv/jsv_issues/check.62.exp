#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2009 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "jsv_issues_init_level"

# define test's name and run level descriptions
set check_name            "jsv_issues"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0 
set check_description(0)  ""

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function jsv_issues_setup
set check_cleanup_function jsv_issues_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "jsv_issues_job_start_user_qsub"
lappend check_functions "jsv_issues_job_start_user_drmaa"
lappend check_functions "jsv_issues_wrong_w_flag"
lappend check_functions "jsv_issues_q_soft_selection"
lappend check_functions "jsv_issues_q_hard_selection"
lappend check_functions "jsv_issues_cmdargs"

# global variables for this test. all of them are initiaized in the setup procedure
global jsv_org_global_conf
global jsv_base_path
global jsv_enabled
set jsv_enabled ""
set jsv_base_path ""

proc file_touch {name} {
   global ts_config CHECK_USER

   set expect_bin [get_binary_path $ts_config(master_host) expect]
   start_remote_prog $ts_config(master_host) $CHECK_USER $expect_bin "-c \"file mtime $name [clock seconds]\""

}

proc jsv_issues_init_level {} {
   global CHECK_ACT_LEVEL
   global ts_config

   switch -- $CHECK_ACT_LEVEL {
      0 {
         if {$ts_config(gridengine_version) >= 62} {
            return 0
         }
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

# start different JSV shells and initialize variables the test expect
proc jsv_issues_setup {} {
   global CHECK_ACT_LEVEL
   global CHECK_USER
   global ts_config
   global jsv_org_global_conf
   global jsv_base_path
   global jsv_enabled

   # check if jsv is available
   if {$jsv_enabled == ""} {
      set jsv_enabled [ge_has_feature "job-submission-verify"]
      if {$jsv_enabled == false} {
         ts_log_config "Cannot run this test, jsv is not available for this GE version!"
      }
   }
   # if jsv is not available return
   if {$jsv_enabled == false} {
      # nothing to setup, jsv not available
      return 
   }     

   # get base path of scripts
   set jsv_base_path $ts_config(testsuite_root_dir)/checktree/functional/jsv/jsv_issues

   # change global config 
   get_config jsv_org_global_conf
   set global_conf(load_report_time) "00:00:04"
   set global_conf(max_unheard) "00:00:15"
   set_config_and_propagate global_conf

   set global_conf(jsv_url) "NONE"
   set_config_and_propagate global_conf

   # change schedd config
   set sched_conf(flush_submit_sec) "1"
   set sched_conf(flush_finish_sec) "1"
   set_schedd_config sched_conf
}

# stop all running JSV scripts 
proc jsv_issues_cleanup {} {
   global CHECK_ACT_LEVEL
   global ts_config
   global jsv_org_global_conf
   global jsv_enabled
 
   # if jsv is not available return
   if {$jsv_enabled == false} {
      # nothing to setup, jsv not available
      return 
   }     

   # trigger and wait for job termination
   delete_all_jobs
   wait_for_end_of_all_jobs 60

   # reset configurations
   reset_config_and_propagate jsv_org_global_conf
   reset_schedd_config

   # unset our test's global variables
   foreach var "jsv_org_global_conf jsv_enabled jsv_base_path" {
      if {[info exists $var]} {
         unset $var
      }
   }
}

# this test is related to the test jsv_issues_job_start_user_drmaa below
# it takes care that the same issue does not occure in qsub
proc jsv_issues_job_start_user_qsub {} {
   global CHECK_ACT_LEVEL
   global CHECK_USER
   global ts_config
   global jsv_base_path

   # Create a new directory and store a .sge_request file containing a -jsv switch
   set tmp_dir [get_tmp_directory_name]
   set tmp_file "$tmp_dir/.sge_request"
   file mkdir $tmp_dir
   set fd [open $tmp_file "a+"]
   puts $fd "-jsv ${jsv_base_path}/jsv_get_owner.sh"
   close $fd

   # Submit a job in that directory as a result the .sge_request file will be parsed and
   # the contained switch will be used 
   # The script will be started as client JSV and this will write the
   # passed job owner as job context variable in the job 
   set qsub_args "-h $ts_config(product_root)/examples/jobs/sleeper.sh 3"
   set qsub_user $CHECK_USER
   set qsub_host $ts_config(master_host)
   set qsub_exit_state 0
   set qsub_out [start_sge_bin qsub $qsub_args $qsub_host $qsub_user qsub_exit_state "60" $tmp_dir]
   set job_id [lindex $qsub_out 2]

   # submit jobs and store qstat -j output
   set qstat_out [start_sge_bin qstat "-j $job_id"]

   # remove the tmp file and dir
   file delete $tmp_file
   file delete $tmp_dir

   # read the job owner from the job context variables
   set qstat_user 0
   regexp "JSV_USER=(\[a-z0-9()\]*)" $qstat_out match qstat_user 

   # test
   if {$qstat_user != $qsub_user} {
      ts_log_severe "Job start user was not reported to JSV correctly. Got user $qstat_user but expected $qsub_user"
   }
}

proc submit_drmaa_job {host binary_path job_id_var} {
   global CHECK_USER 
   global ts_config CHECK_ACT_LEVEL

   upvar $job_id_var job_id
   set prg_exit_stat 0
   set drmaa_out [start_remote_prog $host $CHECK_USER "cd" ".\n$binary_path/test_drmaa_perf -jobs 1 -wait no -native \"-h\" $ts_config(product_root)/examples/jobs/sleeper.sh 1" prg_exit_state 500 0 "" "" 1 0 1]

   if {$prg_exit_state != 0} {
      ts_log_severe "Submitting drmaa job failed. Output of command was $drmaa_out and exit state is $prg_exit_stat"
   } else {
      set job_id 0
      regexp ".*\"(\[0-9\]*)\"" $drmaa_out match job_id 
   }
}

# CR 6806363 - IZ 2923
# DRMAA test_drmaa_perf produces segmentation fault when using user .sge_request file
# On some architectures there is no core produced instead the string "(null)" is
# set as job owner in the JSV script
proc jsv_issues_job_start_user_drmaa {} {
   global jsv_base_path
   global ts_config CHECK_ACT_LEVEL
   global CHECK_USER drmaa_binary_name level_host_list

   set host $ts_config(master_host) 
   set global_file $ts_config(product_root)/default/common/sge_request
   set saved_global_file $ts_config(product_root)/default/common/sge_request.jsv_issues_job_start_user_drmaa
   set did_copy 0

   # safe possibly existing file 
   if {[file exists $global_file]} {
      file copy -force $global_file $saved_global_file
      set did_copy 1
   }
   # create file used for this test 
   set fd [open $global_file "a+"]
   puts $fd "-jsv ${jsv_base_path}/jsv_get_owner.sh"
   close $fd

   drmaa_redirect_lib "1.0" $host
   set drmaa_binary_name "test_drmaa.1.0"
   set compile_arch_mt [resolve_build_arch_installed_libs $host]
   set binary_path "$ts_config(source_dir)/$compile_arch_mt"
   ts_log_fine "host is $host has arch $compile_arch_mt mt bin path $binary_path"

   # unset SGE_ROOT and try test_drmaa -h
   ts_log_fine "starting single threaded test $drmaa_binary_name -h without SGE_ROOT"

   # Submit a drmaa job
   # if the issue is present the binary might return (null) as user or die 
   submit_drmaa_job $host $binary_path job_id 

   # restore safed file
   if {$did_copy == 1} {
      file delete $global_file
      file copy $saved_global_file $global_file
   }

   # submit jobs and store qstat -j output
   set qstat_out [start_sge_bin qstat "-j $job_id"]

   # read the job reported job owner from the job context variables
   set qstat_user 0
   regexp "JSV_USER=(\[a-z0-9()\]*).*\n" $qstat_out match qstat_user 

   # test
   if {$qstat_user != $CHECK_USER} {
      ts_log_severe "Job start user was not reported to JSV correctly. Got user $qstat_user but expected $CHECK_USER"
   }
}

# CR 6806219: JSV -w param has wrong value inside script
# CR 6810493: Changing "w" job parameter to "n" in client JSV is not handled correctly
proc jsv_issues_wrong_w_flag {} {
   global CHECK_ACT_LEVEL
   global CHECK_USER
   global ts_config
   global jsv_base_path

   # Submit a job in that directory as a result the .sge_request file will be parsed and
   # the contained switch will be used 
   # The script will be started as client JSV and this will write the
   # passed -w flag as job context variable in the job 
   set qsub_flag "v"
   set qsub_args "-w $qsub_flag -h -jsv ${jsv_base_path}/jsv_get_w_flag.sh $ts_config(product_root)/examples/jobs/sleeper.sh 3"
   set qsub_host $ts_config(master_host)
   set qsub_exit_state 0
   set qsub_out [start_sge_bin qsub $qsub_args $qsub_host $CHECK_USER]
   set job_id [lindex $qsub_out 2]

   # store qstat -j output
   set qstat_out [start_sge_bin qstat "-j $job_id"]

   # read the flag from the job context variables
   set qstat_flag 0
   regexp "JSV_w=(\[a-z0-9()\]*)" $qstat_out match qstat_flag 

   # test
   if {$qstat_flag != $qsub_flag} {
      ts_log_severe "Job parameter \"w\" was not reported to JSV correctly. Got \"$qstat_flag\" but expected \"$qsub_flag\""
   }
}

proc jsv_issues_q_soft_selection {} {
   global CHECK_ACT_LEVEL
   global CHECK_USER
   global ts_config
   global jsv_base_path

   # Submit a job in that directory as a result the .sge_request file will be parsed and
   # the contained switch will be used 
   # The script will be started as client JSV and this will write the
   # passed -w flag as job context variable in the job 
   set qsub_flag "all.q"
   set qsub_args "-soft -q $qsub_flag -h -jsv ${jsv_base_path}/jsv_get_q_soft.sh $ts_config(product_root)/examples/jobs/sleeper.sh 3"
   set qsub_host $ts_config(master_host)
   set qsub_exit_state 0
   set qsub_out [start_sge_bin qsub $qsub_args $qsub_host $CHECK_USER]
   set job_id [lindex $qsub_out 2]

   # store qstat -j output
   set qstat_out [start_sge_bin qstat "-j $job_id"]

   # read the flag from the job context variables
   set qstat_flag 0
   regexp "JSV_q_soft=(\[a-z0-9()\\\.]*)" $qstat_out match qstat_flag 

   # test
   if {$qstat_flag != $qsub_flag} {
      ts_log_severe "Job parameter \"q\" was not reported to JSV correctly. Got \"$qstat_flag\" but expected \"$qsub_flag\""
   }
}

proc jsv_issues_q_hard_selection {} {
   global CHECK_ACT_LEVEL
   global CHECK_USER
   global ts_config
   global jsv_base_path

   # Submit a job in that directory as a result the .sge_request file will be parsed and
   # the contained switch will be used 
   # The script will be started as client JSV and this will write the
   # passed -w flag as job context variable in the job 
   set qsub_flag "all.q"
   set qsub_args "-hard -q $qsub_flag -h -jsv ${jsv_base_path}/jsv_get_q_hard.sh $ts_config(product_root)/examples/jobs/sleeper.sh 3"
   set qsub_host $ts_config(master_host)
   set qsub_exit_state 0
   set qsub_out [start_sge_bin qsub $qsub_args $qsub_host $CHECK_USER]
   set job_id [lindex $qsub_out 2]

   # store qstat -j output
   set qstat_out [start_sge_bin qstat "-j $job_id"]

   # read the flag from the job context variables
   set qstat_flag 0
   regexp "JSV_q_hard=(\[a-z0-9()\\\.]*)" $qstat_out match qstat_flag 

   # test
   if {$qstat_flag != $qsub_flag} {
      ts_log_severe "Job parameter \"q\" was not reported to JSV correctly. Got \"$qstat_flag\" but expected \"$qsub_flag\""
   }
}

# CR 6825376: CMDARGS should not be a read-only parameter
proc jsv_issues_cmdargs {} {
   global CHECK_ACT_LEVEL
   global CHECK_USER
   global ts_config
   global jsv_base_path

   # First case: Submit job with more options. Expect any more than 5 to be removed
   set qsub_args "-jsv ${jsv_base_path}/jsv_cmdargs.sh $ts_config(product_root)/examples/jobs/sleeper.sh 5 6 7 8 9 10 11"
   set qsub_host $ts_config(master_host)
   set qsub_out [start_sge_bin qsub $qsub_args $qsub_host $CHECK_USER]
   set job_id [lindex $qsub_out 2]

   set qstat_out [start_sge_bin qstat "-j $job_id"]

   plain_j_parse plain $job_id $qstat_out

   if {[string compare [string trim $plain(job_args)] "5,6,7,8,9"] != 0} {
      ts_log_severe "jsv_issues_cmdargs test failed. job_args should contain 5 elements, but instead contains:\n$plain(job_args)"
   } else {
      ts_log_fine "jsv_issues_cmdargs test: First case passed"
   }

   # Second case: Submit job with less options. Expect added parameters to be NONE
   set qsub_args "-jsv ${jsv_base_path}/jsv_cmdargs.sh $ts_config(product_root)/examples/jobs/sleeper.sh 5 6"
   set qsub_out [start_sge_bin qsub $qsub_args $qsub_host $CHECK_USER]
   set job_id [lindex $qsub_out 2]

   set qstat_out [start_sge_bin qstat "-j $job_id"]
   
   plain_j_parse plain $job_id $qstat_out

   if {[string compare [string trim $plain(job_args)] "5,6,NONE,NONE,NONE"] != 0} {
      ts_log_severe "jsv_issues_cmdargs test failed. job_args are:\n$plain(job_args)"
   } else {
      ts_log_fine "jsv_issues_cmdargs test: Second case passed"
   }

   # Third case: Submit job with exactly 5 options. Expect no change in parameters
   set qsub_args "-jsv ${jsv_base_path}/jsv_cmdargs.sh $ts_config(product_root)/examples/jobs/sleeper.sh 5 6 7 8 9"
   set qsub_out [start_sge_bin qsub $qsub_args $qsub_host $CHECK_USER]
   set job_id [lindex $qsub_out 2]

   set qstat_out [start_sge_bin qstat "-j $job_id"]
   
   plain_j_parse plain $job_id $qstat_out

   if {[string compare [string trim $plain(job_args)] "5,6,7,8,9"] != 0} {
      ts_log_severe "jsv_issues_cmdargs test failed. Expected exactly 5 arguments. Found job_args are:\n$plain(job_args)"
   } else {
      ts_log_fine "jsv_issues_cmdargs test: Third case passed"
   }

   # Fourth case: Submit job with 4 parameters, and change the value of the 3rd parameter
   set qsub_args "-jsv ${jsv_base_path}/jsv_cmdarg0.sh $ts_config(product_root)/examples/jobs/sleeper.sh 5 6 7 8"
   set qsub_out [start_sge_bin qsub $qsub_args $qsub_host $CHECK_USER]
   set job_id [lindex $qsub_out 2]

   set qstat_out [start_sge_bin qstat "-j $job_id"]
   
   plain_j_parse plain $job_id $qstat_out

   if {[string compare [string trim $plain(job_args)] "5,6,7,22"] != 0} {
      ts_log_severe "jsv_issues_cmdargs test failed. Expected value of 3rd arg to be 22. Found job_args are:\n$plain(job_args)"
   } else {
      ts_log_fine "jsv_issues_cmdargs test: Fourth case passed"
   }

   # Fifth case: Submit job with 2 parameters and change the 5th parameter. Additional parameters should be added
   set qsub_args "-jsv ${jsv_base_path}/jsv_cmdarg1.sh $ts_config(product_root)/examples/jobs/sleeper.sh 5 6"
   set qsub_out [start_sge_bin qsub $qsub_args $qsub_host $CHECK_USER]
   set job_id [lindex $qsub_out 2]

   set qstat_out [start_sge_bin qstat "-j $job_id"]
   
   plain_j_parse plain $job_id $qstat_out

   if {[string compare [string trim $plain(job_args)] "5,6,NONE,NONE,NONE,22"] != 0} {
      ts_log_severe "jsv_issues_cmdargs test failed. Expected 5,6,NONE,NONE,NONE,22. Found job_args are:\n$plain(job_args)"
   } else {
      ts_log_fine "jsv_issues_cmdargs test: Fifth case passed"
   }


}
