#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs

#set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "per_job_consumables_init_level"

# define test's name and run level descriptions
set check_name            "per_job_consumables"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "Test per job consumable functionality"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function per_job_consumables_setup
set check_cleanup_function per_job_consumables_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "per_job_consumables_global"
lappend check_functions "per_job_consumables_hosts"
lappend check_functions "per_job_consumables_queues"
lappend check_functions "per_job_consumables_rqs"
lappend check_functions "per_job_consumables_master_task"; # job consumable is only configured on master task but 
                                                           # other hosts should also be used as slave tasks.
lappend check_functions "per_job_consumables_master_task_rqs"

proc per_job_consumables_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc per_job_consumables_setup {} {
   global job_consumables_hosts 
   global global_backup host1_backup host2_backup
   global job_args ar_args
   
   set job_consumables_hosts [host_conf_get_suited_hosts 3]

   get_config global_backup
   get_config host1_backup [lindex $job_consumables_hosts 0]
   get_config host2_backup [lindex $job_consumables_hosts 1]

   set pe(slots)             "999"
   set pe(allocation_rule)   "\$round_robin"
   add_pe "round_robin" pe
   set pe(allocation_rule)   "\$fill_up"
   add_pe "fill_up" pe

   set queue_settings(slots) 10 
   set queue_settings(load_thresholds) "none"
   set queue_settings(pe_list)         "round_robin, fill_up"
   set queue_settings(seq_no)          "0,\[[lindex $job_consumables_hosts 0]=10\],\[[lindex $job_consumables_hosts 1]=20\],\[[lindex $job_consumables_hosts 2]=30\]"
   set qname "per_job_consumables.q"
   add_queue $qname $job_consumables_hosts queue_settings


   set test1_complex(jobs) "j INT <= YES JOB 0 1000"
   set_complex test1_complex

   set sched_conf(queue_sort_method) seqno
   set sched_conf(schedule_interval) "0:0:5"
   set sched_conf(flush_submit_sec)  "1"
   set_schedd_config sched_conf

   disable_queue "all.q"

   set job_args "-q per_job_consumables.q -l jobs=1 -o /dev/null -j y -b y /bin/sleep 10000"
   set ar_args  "-q per_job_consumables.q -d 10000"
}

proc per_job_consumables_cleanup {} {
   global global_backup host1_backup host2_backup
   global job_consumables_hosts
 
   delete_all_jobs
   wait_for_end_of_all_jobs

   set_config global_backup
   set_config host1_backup [lindex $job_consumables_hosts 0]
   set_config host2_backup [lindex $job_consumables_hosts 1]

   del_pe "round_robin"
   del_pe "fill_up"

   del_queue "per_job_consumables.q" "" 0 1

   if {[get_rqs_list rqs_names "" "" 0] == 0} {
      foreach elem $rqs_names {
         ts_log_fine "Removing resource quota sets $elem ...\n"
         del_rqs $elem
      }
   }

   set test1_complex(jobs) ""
   set_complex test1_complex

   enable_queue "all.q"

   reset_schedd_config
}

proc per_job_consumables_run_test {scenario max_jobs_running slots_per_job {add_job_args ""}} {
   global job_args

   set expected_used_slots [expr $slots_per_job * $max_jobs_running]
   set expected_avail_slots [expr 30 - $expected_used_slots]

   if {$scenario != "sequential"} {
      set add_job_args "$add_job_args $slots_per_job"
   }

   set submitted_jobs 0
   while {$submitted_jobs < $max_jobs_running} {
      set job_id [submit_job "$add_job_args $job_args"]
      incr submitted_jobs
   }
   wait_for_jobstart $job_id "sleep" 60 1 1

   set job_id [submit_job "$add_job_args $job_args"]
   if {[wait_for_jobstart $job_id "sleep" 15 0 1] == 0} {
      ts_log_severe "job consumable not enforced for $scenario"
   } else {
      # TODO: check output with qalter -w p (optional)

      # qstat_g_c_plain_output contains the plain qstat output in an assoc. array
      qstat_g_c_plain_parse qstat_g_c_result

      if {$qstat_g_c_result(per_job_consumables.q,used) != $expected_used_slots} {
         ts_log_severe "slot count in scenario $scenario does not match, expected $expected_used_slots, got $qstat_g_c_result(per_job_consumables.q,used)"
      }
      if {$qstat_g_c_result(per_job_consumables.q,avail) != $expected_avail_slots} {
         ts_log_severe "slot count in scenario $scenario does not match, expected $expected_avail_slots, got $qstat_g_c_result(per_job_consumables.q,avail)"
      }
   }

   delete_all_jobs
   wait_for_end_of_all_jobs
}

proc per_job_consumables_run_test_ar {scenario max_jobs_running slots_per_job {add_job_args ""}} {
   global job_args ar_args

   set expected_used_slots [expr $slots_per_job * $max_jobs_running]
   set expected_avail_slots [expr 30 - $expected_used_slots]

   if {$scenario == "sequential"} {
      set ar_args_used  "$ar_args -l jobs=1 $add_job_args"
      set expected_reserved_slots $expected_used_slots
   } else {
      set ar_args_used  "$ar_args -l jobs=1 $add_job_args $expected_used_slots"
      set add_job_args "$add_job_args $slots_per_job"
      set expected_reserved_slots [expr $expected_used_slots * $max_jobs_running]
   }
   # test if consumable limitis enforced for ars
   set submitted_ars 0
   while {$submitted_ars < $max_jobs_running} {
      set ar_id [submit_ar "$ar_args_used"]
      if {$ar_id <= 0} {
         ts_log_severe "advance reservation was wrongly rejected in $scenario, return $ar_id"
      }
      incr submitted_ars
   }
   if {[submit_ar "$ar_args_used" "" "" 0] > 0} {
      ts_log_severe "job consumable not enforced for ars in $scenario"
   }

   # test if consumable limit is enforced for non-ar jobs
   set job_id [submit_job "$add_job_args $job_args"]
   if {[wait_for_jobstart $job_id "sleep" 15 0 1] == 0} {
      ts_log_severe "job consumable not enforced for non-ar jobs in $scenario"
   } else {
      # TODO: check output with qalter -w p (optional)
   }

   # now test if consumable limit is enfoced inside the ar
   set add_job_args "-ar $ar_id $add_job_args"

   qstat_g_c_plain_parse qstat_g_c_result
   if {$qstat_g_c_result(per_job_consumables.q,resv) != $expected_reserved_slots} {
      ts_log_severe "reserved slot count in scenario $scenario does not match, expected $expected_reserved_slots, got $qstat_g_c_result(per_job_consumables.q,resv)"
   }
   
   set job_id [submit_job "$add_job_args $job_args"]
   wait_for_jobstart $job_id "sleep" 60 1 1

   set job_id [submit_job "$add_job_args $job_args"]
   if {[wait_for_jobstart $job_id "sleep" 15 0 1] == 0} {
      ts_log_severe "job consumable not enforced inside ar for $scenario"
   } else {
      # TODO: check output with qalter -w p (optional)
   }

   delete_all_jobs
   wait_for_end_of_all_jobs
   delete_all_ars
}

proc per_job_consumables_global {} {
   global job_consumables_hosts

   set global_host(complex_values) "jobs=2"
   set_exechost global_host "global"

   per_job_consumables_run_test "sequential" 2 1
   per_job_consumables_run_test "parallel jobs with round_robin" 2 2 "-pe round_robin"
   per_job_consumables_run_test "parallel jobs with fill_up" 2 2 "-pe fill_up"

   per_job_consumables_run_test_ar "sequential" 2 1
   per_job_consumables_run_test_ar "parallel jobs with round_robin" 2 2 "-pe round_robin"
   per_job_consumables_run_test_ar "parallel jobs with fill_up" 2 2 "-pe fill_up"

   set global_host(complex_values) "none"
   set_exechost global_host "global"
}

proc per_job_consumables_hosts {} {
   global job_consumables_hosts

   set test_host [lindex $job_consumables_hosts 0]

   set host_config(complex_values) "jobs=2"
   set_exechost host_config "$test_host"

   per_job_consumables_run_test "sequential" 2 1
   per_job_consumables_run_test "parallel jobs with round_robin" 2 2 "-pe round_robin"
   per_job_consumables_run_test "parallel jobs with fill_up" 2 2 "-pe fill_up"

   per_job_consumables_run_test_ar "sequential" 2 1
   per_job_consumables_run_test_ar "parallel jobs with round_robin" 2 2 "-pe round_robin"
   per_job_consumables_run_test_ar "parallel jobs with fill_up" 2 2 "-pe fill_up"

   set host_config(complex_values) "none"
   set_exechost host_config "$test_host"
}

proc per_job_consumables_queues {} {
   global job_consumables_hosts

   set queue_settings(complex_values) "jobs=1"
   set_queue "per_job_consumables.q" $job_consumables_hosts queue_settings

   per_job_consumables_run_test "sequential" 3 1
   per_job_consumables_run_test "parallel jobs with round_robin" 3 2 "-pe round_robin"
   per_job_consumables_run_test "parallel jobs with fill_up" 3 2 "-pe fill_up"

   per_job_consumables_run_test_ar "sequential" 3 1
   per_job_consumables_run_test_ar "parallel jobs with round_robin" 3 2 "-pe round_robin"
   per_job_consumables_run_test_ar "parallel jobs with fill_up" 3 2 "-pe fill_up"

   set queue_settings(complex_values) "none"
   set_queue "per_job_consumables.q" $job_consumables_hosts queue_settings
}

proc per_job_consumables_rqs {} {

   set global_host(complex_values) "jobs=10"
   set_exechost global_host "global"

   set rqs_name "jobs_limit"
   set rules {}
   lappend rules "to jobs=2"
   set rqs_charray($rqs_name,limit) "$rules"
   set rqs_charray($rqs_name,enabled) "true"
   add_rqs rqs_charray

   per_job_consumables_run_test "sequential" 2 1
   per_job_consumables_run_test "parallel jobs with round_robin" 2 2 "-pe round_robin"
   per_job_consumables_run_test "parallel jobs with fill_up" 2 2 "-pe fill_up"

   del_rqs $rqs_name

   set global_host(complex_values) "none"
   set_exechost global_host "global"
}

proc create_unique_list {list} {
   set new_list {}

   foreach elem $list {
      if {[lsearch $new_list $elem] < 0} {
         lappend new_list $elem
      }
   }
   return $new_list
}

proc per_job_consumables_master_task {} {
   global job_consumables_hosts job_args

   set first_host [lindex $job_consumables_hosts 0]
   set master_host [lindex $job_consumables_hosts 2]
   ts_log_fine "first_host $first_host"
   ts_log_fine "master_host $master_host"

   set host_config(complex_values) "jobs=1"
   set_exechost host_config $master_host

   # 1) try with fill_up. This job must run on the master host
   set job_id [submit_job "-pe fill_up 3 $job_args"]
   wait_for_jobstart $job_id "sleep" 60 1 1

   get_extended_job_info $job_id job_info 1 1

   set queue_list [create_unique_list $job_info(queue)]
   set gdil_count [llength $queue_list]
   if {$gdil_count != 2} {
      ts_log_severe "fill_up job was incorrect dispatched, expected to run on 2 qinstances, got $gdil_count"
   } else {
      foreach queue $queue_list {
         set host_name [lindex [split $queue "@"] 1]
         if {$host_name != $master_host && $host_name != $first_host} {
            ts_log_severe "fill_up job was scheduled on the wrong host expected $first_host or $master_host, got $host_name"
            break
         }
      }
   }
   delete_job $job_id 1

   # 2) try with round_robin. This job must run on the first host (because of seq_no)
   #    and on the master_host.
   set job_id [submit_job "-pe round_robin 3 $job_args"]
   wait_for_jobstart $job_id "sleep" 60 1 1

   get_extended_job_info $job_id job_info 1 1

   set queue_list [create_unique_list $job_info(queue)]
   set gdil_count [llength $queue_list]
   if {$gdil_count != 3} {
      ts_log_severe "round_robin job was incorrect dispatched, expected to run on 3 qinstances, got $gdil_count"
   } 
   delete_job $job_id 1

   set host_config(complex_values) "none"
   set_exechost host_config $master_host
}

proc per_job_consumables_master_task_rqs {} {
   global job_consumables_hosts job_args

   set first_host [lindex $job_consumables_hosts 0]
   set master_host [lindex $job_consumables_hosts 2]
   ts_log_fine "first_host $first_host"
   ts_log_fine "master_host $master_host"

   set host_config(complex_values) "jobs=10"
   set_exechost host_config $first_host
   set_exechost host_config $master_host

   set rqs_name "jobs_limit"
   set rules {}
   lappend rules "hosts $master_host to jobs=1"
   lappend rules "users * to jobs=0"
   set rqs_charray($rqs_name,limit) "$rules"
   set rqs_charray($rqs_name,enabled) "true"
   add_rqs rqs_charray

   # 1) try with fill_up. This job must run on the master host
   set job_id [submit_job "-pe fill_up 3 $job_args"]
   wait_for_jobstart $job_id "sleep" 60 1 1

   get_extended_job_info $job_id job_info 1 1

   set queue_list [create_unique_list $job_info(queue)]
   set gdil_count [llength $queue_list]
   if {$gdil_count != 2} {
      ts_log_severe "fill_up job was incorrect dispatched, expected to run on 2 qinstances, got $gdil_count"
   } else {
      foreach queue $queue_list {
         set host_name [lindex [split $queue "@"] 1]
         if {$host_name != $master_host && $host_name != $first_host} {
            ts_log_severe "fill_up job was scheduled on the wrong host expected $first_host and $master_host, got $host_name"
            break
         }
      }
   }
   delete_job $job_id 1

   # 2) try with round_robin. This job must run on the first host (because of seq_no)
   #    and on the master_host.
   set job_id [submit_job "-pe round_robin 3 $job_args"]
   wait_for_jobstart $job_id "sleep" 60 1 1

   get_extended_job_info $job_id job_info 1 1

   set queue_list [create_unique_list $job_info(queue)]
   set gdil_count [llength $queue_list]
   if {$gdil_count != 3} {
      ts_log_severe "round_robin job was incorrect dispatched, expected to run on 3 qinstances, got $gdil_count"
   } 
   delete_job $job_id 1

   del_rqs $rqs_name

   set host_config(complex_values) "none"
   set_exechost host_config "$first_host"
   set_exechost host_config "$master_host"
}
