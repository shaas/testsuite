#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

# set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_511_init_level"

# define test's name and run level descriptions
set check_name "issue_511"
set check_category "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_highest_level 0
set check_description(0) "maxujobs does not count jobs with certain state"

# define test's dependencies
set check_needs "init_core_system" 

# setup and cleanup functions
set check_setup_function "issue_511_setup"
set check_cleanup_function "issue_511_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "issue_511_check"

proc issue_511_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------

proc issue_511_setup  {} {

   # set maxujobs limit in schedd config
   set my_schedd_conf(maxujobs) "4"
   set my_schedd_conf(schedd_job_info) "true"
   set_schedd_config my_schedd_conf 
}


proc issue_511_check {} {
   global ts_config

   # TEST

   # submit 5 jobs
   ts_log_fine "Submitting 5 sleeper (3600s) ..."
   set arguments "$ts_config(product_root)/examples/jobs/sleeper.sh 3600"
   set job_id1 [ submit_job "$arguments" ]
   set job_id2 [ submit_job "$arguments" ]
   set job_id3 [ submit_job "$arguments" ]
   set job_id4 [ submit_job "$arguments" ]
   set job_id5 [ submit_job "$arguments" ]

   # wait for the start of 4 jobs
   ts_log_fine "Waiting job satrt of 4 jobs ..."
   wait_for_jobstart $job_id1 "Sleeper" 20 1 1
   wait_for_jobstart $job_id2 "Sleeper" 15 1 1
   wait_for_jobstart $job_id3 "Sleeper" 15 1 1
   wait_for_jobstart $job_id4 "Sleeper" 15 1 1


   # EB: TODO: handle also other languages
   # Is the last task still in qw state
   set output [start_sge_bin "qstat" "-j $job_id5"]
   set expected_output "job dropped because of user limitations"
   if {[string first $expected_output $output] < 0} {
      ts_log_severe "qstat -j output is not correct for last pending job: expected\n$expected_output\nbut received\n$output"
      return
   } 

   # qmod -s <1st_job_id>
   ts_log_fine "Change one job into suspended state"
   set output [start_sge_bin "qmod" "-s $job_id1"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qmod -s failed for first job:\n$output"
      return
   }

   # qhold <2nd_job_id>
   ts_log_fine "Change one job into hold state"
   set output [start_sge_bin "qhold" "$job_id2"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qhold failed for second job:\n$output"
      return
   }
   
   # qalter -a <starttime_in_future> <3nd_job_id>
   ts_log_fine "Attaching new start time for one job "
   set output [start_sge_bin "qalter" "-a 203001010000 $job_id3"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter -a failed for third job:\n$output"
      return
   }

   # qalter -hold_jid <5th_job_id> <4nd_job_id>
   ts_log_fine "Changing dependency of one job"
   set output [start_sge_bin "qalter" "-hold_jid $job_id5 $job_id4"]
   if {$prg_exit_state != 0} {
      ts_log_severe "qalter -a failed for third job:\n$output"
      return
   }

   # EB: TODO: handle also other languages
   # Is the last task still in qw state?
   set expected_output "job dropped because of user limitations"
   set output [start_sge_bin "qstat" "-j $job_id5"]
   if {[string first $expected_output $output] < 0} {
      ts_log_severe "qstat -j output is not correct for last pending job: expected\n$expected_output\nbut received\n$output"
      return
   }
}

proc issue_511_cleanup {} {
   # Terminate all jobs
   delete_all_jobs
   wait_for_end_of_all_jobs

   # Restore schedd config
   reset_schedd_config
}

