#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global issue_1760_fake_host
global issue_1760_qname
global issue_1760_group
global issue_1760_milestone

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_1760_init_level"

# define test's name and run level descriptions
set check_name            "issue_1760"
set check_category        "COMPATIBILITY SYSTEM"
set check_highest_level   0
set check_description(210)  "unable to delete a configuration of a non existing host"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
#set check_setup_function "issue_1760_setup"
set check_cleanup_function "issue_1760_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "issue_1760_check"

# this function is called each time before
# a new run level is started
proc issue_1760_init_level {} {
  global CHECK_ACT_LEVEL

  # returning -1 causes disabling a certain runlevel
  # here per run level settings can be prepared
  switch -- $CHECK_ACT_LEVEL {
     "0" { 
           return 0
     } 
  } 
  return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------

# here the actual test is done
proc issue_1760_check {} {
   global ts_config issue_1760_fake_host issue_1760_milestone issue_1760_group
   global CHECK_HOST CHECK_ARCH CHECK_USER CHECK_CORE_MASTER issue_1760_qname

   set pid [pid]
   set qconf "$ts_config(product_root)/bin/$CHECK_ARCH/qconf"
   set issue_1760_milestone 0

   set issue_1760_fake_host "issue1760_$pid"
   set envlist(SGE_COMMLIB_DEBUG_RESOLVE) "$issue_1760_fake_host"

   # Shutdown qmaster
   shutdown_qmaster $CHECK_CORE_MASTER [ get_qmaster_spool_dir ]

   # Restart qmaster with envlist set
   startup_qmaster 0 envlist

   # Add config for fake host
   set output [start_remote_prog $CHECK_HOST $CHECK_USER $qconf "-sconf $CHECK_HOST | tail +2 > /tmp/$issue_1760_fake_host" result]

   if {$result != 0} {
      set_error -1 "Unable to show configuration for $CHECK_HOST: $output"
      return -1
   }

   set output [start_remote_prog $CHECK_HOST $CHECK_USER $qconf "-Aconf /tmp/$issue_1760_fake_host" result]

   if {$result != 0} {
      set_error -1 "Unable to add configuration for fake host: $output"
      return -1
   }

   set issue_1760_milestone 1

   # Add hostgroup with fake host and local host
   set issue_1760_group "@hg_issue1760_$pid"
   set output [start_remote_prog $CHECK_HOST $CHECK_USER "echo" "\"group_name $issue_1760_group\nhostlist $CHECK_HOST $issue_1760_fake_host\n\" > /tmp/hg_issue1760.$pid" result]

   if {$result != 0} {
      set_error -1 "Unable to write hostgroup file: $output"
      return -1
   }

   set output [start_remote_prog $CHECK_HOST $CHECK_USER $qconf "-Ahgrp /tmp/hg_issue1760.$pid" result]

   if {$result != 0} {
      set_error -1 "Unable to add hostgroup: $output"
      return -1
   }

   set issue_1760_milestone 2

   # Add queue with fake host and local host
   set issue_1760_qname "q_issue1760_$pid"
   set qparam(qname)     "$issue_1760_qname"
   set qparam(hostlist)  "$issue_1760_group"

   # localize messages -- handle_vi_edit is executed on $CHECK_HOST
   # add a "*" to $CHECK_HOST because the host may resolve it's name long
   set VALID [translate $ts_config(master_host) 1 0 0 [sge_macro MSG_SGETEXT_ADDEDTOLIST_SSSS] $CHECK_USER "$CHECK_HOST*" $issue_1760_qname "cluster queue" ]

   # add by handling vi
   set vi_commands [build_vi_command qparam]

   handle_vi_edit "$ts_config(product_root)/bin/$CHECK_ARCH/qconf" "-aq" $vi_commands $VALID

   set issue_1760_milestone 3

   # Add queue slots entry for fake host
   set output [start_remote_prog $CHECK_HOST $CHECK_USER $qconf "-aattr queue slots \"\[$issue_1760_fake_host=1\]\" $issue_1760_qname" result]

   if {$result != 0} {
      set_error -1 "Unable to add 'slots' entry for fake host: $output"
      return -1
   }

   # Shutdown qmaster
   shutdown_qmaster $CHECK_CORE_MASTER [ get_qmaster_spool_dir ]
   # Restart qmaster without envlist set
   startup_qmaster 0

   # Remove queue
   set output [start_remote_prog $CHECK_HOST $CHECK_USER $qconf "-dq $issue_1760_qname" result]

   if {$result != 0} {
      set_error -1 "Unable to remove queue -- issue 1760 still exists: $output"
      return -1
   }

   set issue_1760_milestone 4

   # Remove hostgroup
   set output [start_remote_prog $CHECK_HOST $CHECK_USER $qconf "-dhgrp $issue_1760_group" result]

   if {$result != 0} {
      set_error -1 "Unable to remove hostgroup -- issue 1760 still exists: $output"
      return -1
   }

   set issue_1760_milestone 5

   # Remove configuration
   set output [start_remote_prog $CHECK_HOST $CHECK_USER $qconf "-dconf $issue_1760_fake_host" result]

   if {$result != 0} {
      set_error -1 "Unable to remove host configuration -- issue 1760 still exists: $output"
      return -1
   }

   set issue_1760_milestone 0
   set_error 0 "ok"
}

proc issue_1760_cleanup {} {
   global CHECK_HOST CHECK_ARCH CHECK_USER CHECK_CORE_MASTER
   global ts_config issue_1760_fake_host issue_1760_qname issue_1760_group
   global issue_1760_milestone

   set pid [pid]
   set qconf "$ts_config(product_root)/bin/$CHECK_ARCH/qconf"

   set envlist(SGE_COMMLIB_DEBUG_RESOLVE) "$issue_1760_fake_host"

   # Remove config files
   start_remote_prog $CHECK_HOST $CHECK_USER "rm" "/tmp/$issue_1760_fake_host" result
   start_remote_prog $CHECK_HOST $CHECK_USER "rm" "/tmp/hg_issue1760.$pid" result

   # Remove leftover objects
   if {($issue_1760_milestone >= 1) && ($issue_1760_milestone < 6)} {
      # Shutdown qmaster
      shutdown_qmaster $CHECK_CORE_MASTER [ get_qmaster_spool_dir ]

      # Restart qmaster with envlist set
      startup_qmaster 0 envlist

      # Remove queue
      start_remote_prog $CHECK_HOST $CHECK_USER $qconf "-dq $issue_1760_qname" result

      if {($issue_1760_milestone >= 2) && ($issue_1760_milestone < 5)} {
         # Remove hostgroup
         start_remote_prog $CHECK_HOST $CHECK_USER $qconf "-dhgrp $issue_1760_group" result

         if {($issue_1760_milestone >= 3) && ($issue_1760_milestone < 4)} {
            # Remove configuration
            start_remote_prog $CHECK_HOST $CHECK_USER $qconf "-dconf $issue_1760_fake_host" result
         }
      }

      # Shutdown qmaster
      shutdown_qmaster $CHECK_CORE_MASTER [ get_qmaster_spool_dir ]

      # Restart qmaster without envlist set
      startup_qmaster 0
   }

   set_error 0 "ok"
}
