#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_highest_level
global check_init_level_procedure
global check_root_access_needs

#set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_1081_init_level"

# define test's name and run level descriptions
set check_name            "issue_1081"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "Test of issue 1081"
set check_description(1)  ""

# define test's dependencies
set check_needs           "init_core_system"

# setup and cleanup functions
set check_setup_function issue_1081_setup
set check_cleanup_function issue_1081_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "issue_1081_test1"

proc issue_1081_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc issue_1081_setup {} {
   # nothing to do
}

proc issue_1081_cleanup {} {
   # nothing to do
}


proc issue_1081_test1 {} {
   global ts_config
   global CHECK_ACT_LEVEL

   if {$CHECK_ACT_LEVEL == 0} {
      ts_log_fine "this is the test for runlevel $CHECK_ACT_LEVEL"

      # execution "qconf -mattr exechost complex_values NONE <hostname>"
      ts_log_fine "executing qconf -mattr ..."
      set result [start_sge_bin "qconf" "-mattr exechost complex_values NONE $ts_config(master_host)"]

      # check if qconf has returned expected notification
      ts_log_fine "checking whether qconf has returned expected notification"
      if {$prg_exit_state == 0} {
         ts_log_severe "qconf should have failed:\n$result"
      } else {
         set expected_message [translate_macro MSG_QCONF_CANT_MODIFY_NONE]
         if {[string match "*$expected_message*" $result] == 0} {
            ts_log_severe "qconf should have failed with the error message\n$expected_message\nbut returned\n$result"
         } else {
            ts_log_fine "qconf has returned expected notification: $expected_message"
         }
      }

      # check whether qmaster is still alive
      ts_log_fine "checking whether qmaster is still alive"
      if {[is_qmaster_alive $ts_config(master_host) [get_qmaster_spool_dir]] == 0} {
         ts_log_severe "Qmaster is not running after qconf -mattr exechost complex_values NONE <hostname>"
         return -1
      }
   }
}
