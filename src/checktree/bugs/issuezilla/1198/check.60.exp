#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions check_highest_level
global check_init_level_procedure check_category
global check_root_access_needs

set check_init_level_procedure "issue_1198_init_level"

set check_category            "COMPATIBILITY SYSTEM VERIFIED"
set check_name                "issue_1198"
set check_description(0)      "qconf -sq queue@host shows slots in complex values"
set check_needs               "init_core_system"      ;# dependencies of this check (name of other check)
set check_root_access_needs   "no"

# setup and cleanup functions

# define test's procedure order
set check_functions           ""
lappend check_functions       "issue_1198_run"   ;# functions to call (in order)
set check_highest_level       0

proc issue_1198_init_level {} {
   global CHECK_ACT_LEVEL ts_config

   # setup levels 
   switch -- $CHECK_ACT_LEVEL {
      "0"  {
         return 0
      }
   }

   return -1
}

proc issue_1198_run  {} {
   global ts_config CHECK_USER

   set test_host [host_conf_get_suited_hosts]

   # Setup
   set result [start_sge_bin "qconf" "-sql"]
   if {[string first "no queue defined" $result] >= 0} {
      ts_log_severe "no queue defined"
      return
   } else {
      set queue [lindex $result 0]
   }

   set result [start_sge_bin "qconf" "-shgrpl"]
   if {[string first "no hostgroup defined" $result] >= 0} {
      ts_log_severe "no hostgroup defined"
      return
   } else {
      set hostgroup [lindex $result 0]
   }

   # Test
   ts_log_fine "Looking for slots in ${queue}@${test_host} complex values list"

   set result [start_sge_bin "qconf" "-sq ${queue}@${test_host} | grep complex_values | grep -v slots" $ts_config(master_host) $CHECK_USER]

   if {$prg_exit_state != 0} {
      ts_log_severe "qconf failed to hide slots for queue ${queue}@${test_host}: $result"
      return
   }

   ts_log_fine "Looking for slots in ${queue}@${hostgroup} complex values list"

   set result [start_sge_bin "qconf" "-sq ${queue}@${hostgroup} | grep complex_values | grep -v slots" $ts_config(master_host) $CHECK_USER]
   
   if {$prg_exit_state != 0} {
      ts_log_severe "qconf failed to hide slots for queue ${queue}@${hostgroup}: $result"
   }
}
