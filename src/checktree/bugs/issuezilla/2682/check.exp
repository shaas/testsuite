#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global check_need_running_system

set check_need_running_system "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_2682_init_level"

# define test's name and run level descriptions
set check_name            "issue_2682"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "The test verify that the qstat -r output has separated \
                           queue names by comma in Hard requested queues item."

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function issue_2682_setup
set check_cleanup_function issue_2682_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "issue_2682_test"

proc issue_2682_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc issue_2682_setup {} {
   global issue_2682_hosts
   global qname1 qname2

   set qname1 "A.q"
   set qname2 "B.q"

   # let's assume we need 2 test hosts
   set issue_2682_hosts [host_conf_get_suited_hosts 2]

   add_queue $qname1 [lindex $issue_2682_hosts 0]
   add_queue $qname2 [lindex $issue_2682_hosts 1]

}

proc issue_2682_cleanup {} {
   global issue_2682_hosts
   global qname1 qname2

   delete_all_jobs
   wait_for_end_of_all_jobs

   del_queue $qname1 [lindex $issue_2682_hosts 0] 1 1
   del_queue $qname2 [lindex $issue_2682_hosts 1] 1 1

   # unset our test's global variables
   foreach var "issue_2682_hosts issue_2682_backup" {
      if {[info exists $var]} {
         unset $var
      }
   }
}

proc issue_2682_test {} {
   global ts_config
   global issue_2682_hosts
   global qname1 qname2

   # submit the job with two hard requested queues
   set arguments "-q $qname1,$qname2"
   set job_id [submit_job "$arguments $ts_config(product_root)/examples/jobs/sleeper.sh"]

   # set expected output in Hard requested queues item
   set exp_hard_rq_queues "$qname1, $qname2"

   # get the qstat -r output
   qstat_r_plain_parse output
   set hard_rq_queues $output($job_id,hard_req_queue)

   # compare the expected and the obtained output
   if { [string compare $hard_rq_queues $exp_hard_rq_queues] != 0 } {
      ts_log_severe "Unexpected Hard requested queues output. Issue 2628 is still present."
   }

}
