#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env
global ts_config check_440_num_hosts

# set check_root_access_needs "yes"


# define a level initialization procedure:
set check_init_level_procedure "issue_440_init_level"

# define test's name and run level descriptions
set check_name            "issue_440"
set check_category        "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_highest_level   [expr [llength $ts_config(unique_arch_nodes)] -1]

set check_440_num_hosts [llength $ts_config(unique_arch_nodes)]
for {set i 0} {$i < $check_440_num_hosts} {incr i} {
   set check_description($i) "qsub / qrsh command lines crash qmaster with arg. lines > 10 K, check on host [lindex $ts_config(unique_arch_nodes) $i]"
}

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_cleanup_function "issue_440_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "issue_440_set_parameters"
lappend check_functions "issue_440_check_qsub"
lappend check_functions "issue_440_check_qrsh"

global issue_440_MAX_KBYTE

proc issue_440_init_level {} {
   global ts_config
   global CHECK_ACT_LEVEL
   global issue_440_MAX_KBYTE check_440_host check_440_num_hosts

   if {$CHECK_ACT_LEVEL < $check_440_num_hosts} {
      return 0
   }

   return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------

proc issue_440_set_parameters {} {
   global ts_config
   global CHECK_ACT_LEVEL CHECK_OUTPUT
   global issue_440_MAX_KBYTE check_440_host check_440_num_hosts

   if {$CHECK_ACT_LEVEL < $check_440_num_hosts} {
      set check_440_host [lindex $ts_config(unique_arch_nodes) $CHECK_ACT_LEVEL]
      switch -exact [resolve_arch $check_440_host] {
         irix65 {
            set issue_440_MAX_KBYTE 10
         }
         default {
            set issue_440_MAX_KBYTE 20
         }
      }
      puts $CHECK_OUTPUT "testing with MAX_KBYTE=$issue_440_MAX_KBYTE"
   }
   set_error 0 "ok"
}

proc issue_440_check_qsub {} {
   global ts_config
   global CHECK_OUTPUT CHECK_TESTSUITE_ROOT CHECK_SCRIPT_FILE_DIR 
   global CHECK_CORE_MASTER issue_440_MAX_KBYTE check_440_host

   set submit_script_path "$CHECK_TESTSUITE_ROOT/$CHECK_SCRIPT_FILE_DIR/cmd_line_output.sh" 
   set start_length 0
   set end_length [ expr ( 1024 * $issue_440_MAX_KBYTE ) ]
   set submit_queue [get_queue_instance "all.q" $check_440_host]

   # submit different command line length jobs
   while { $start_length <= $end_length } {
      
      # generate job output/error file names
      set output_file [get_tmp_file_name "" output] 
      set error_file  [get_tmp_file_name "" error]
 

      # generate command line with corrent length
      set arg_name "argument"
      set command_line "-q $submit_queue -S /bin/sh -o $output_file -e $error_file -N long_cmd $submit_script_path $arg_name" 
      set arg_length 0
      while { [string length $command_line] < $start_length } {
         incr arg_length 1
         if {$arg_length > 500 } {
            append arg_name " "
            set arg_length 0
         } else {
            append arg_name "_"
         }
         set command_line "-q $submit_queue -S /bin/sh -o $output_file -e $error_file -N long_cmd $submit_script_path $arg_name" 
      }
      puts $CHECK_OUTPUT "submitting job with command line length: [string length $command_line]"

      # submit job and wait for jobend
      set jobid [submit_job $command_line 1 60 $check_440_host "" "" 0]
      wait_for_jobstart  $jobid "long_cmd" 60 1 1
      wait_for_jobend $jobid "long_cmd" 60
      
      # read job output/error files
      # wait for the file to appear - this might take some time due to slow NFS
      read_file $output_file f_output 60
      read_file $error_file  f_error 60
   

      set nr_of_lines $f_output(0)
      set output ""
      set found_start 0
      for {set i 1 } { $i <= $nr_of_lines} {incr i 1} {
         if { [string match "*_GE_TESTSUITE_SCRIPT_OUTPUT_END_*" $$f_output($i)] } {
            set found_start 0
         }
 
         if { $found_start == 1 } {
            append output $f_output($i)
         }
         if { [string match "*_GE_TESTSUITE_SCRIPT_OUTPUT_BEGIN_*" $$f_output($i)] } {
            set found_start 1
         }
      }

      # compare argument with job output file content
      set output [string trim $output]   
      set arg_name [string trim $arg_name]
      if { [ string compare $output $arg_name ] != 0 } {
            add_proc_error "issue_440_check_qsub" -1 "job output not equal to commandline input:\nstrlen(cmd_line) = [string length $arg_name]\nstrlen(output) = [string length $output] on host $check_440_host"
      }


      # check for further errors
      set nr_of_lines $f_error(0)
      set got_output_error 0
      set output_errors ""
      for {set i 1 } { $i <= $nr_of_lines} {incr i 1} {
         puts $CHECK_OUTPUT $f_error($i)
         set got_output_error 1
         append output_errors "$f_error($i)\n"
      }
      if { $got_output_error != 0 } {
         add_proc_error "issue_440_check_qsub" -1 "got error output from job script:\n$output_errors on host $check_440_host"
      }

      # increment next argument length
      incr start_length 4096
   }

   puts $CHECK_OUTPUT "check if master and scheduler are running ..."
   set back [ are_master_and_scheduler_running $CHECK_CORE_MASTER [get_qmaster_spool_dir]]
   if { $back != 3 } {
      add_proc_error "issue_440_check_qsub" -1 "are_master_and_scheduler_running returns $backafter submit on host $check_440_host"
   }   

   set_error 0 "ok"
}

proc issue_440_check_qrsh {} {
   global ts_config
   global CHECK_OUTPUT CHECK_TESTSUITE_ROOT CHECK_SCRIPT_FILE_DIR
   global CHECK_CORE_MASTER CHECK_USER issue_440_MAX_KBYTE check_440_host

   # test script
   set submit_script_path "$CHECK_TESTSUITE_ROOT/$CHECK_SCRIPT_FILE_DIR/cmd_line_output.sh" 

   # set start and end command line size
   set start_length 0
   set end_length [ expr ( 1024 * $issue_440_MAX_KBYTE ) ]

   set submit_queue [get_queue_instance "all.q" $check_440_host]
   set qrsh_command "$ts_config(product_root)/bin/[resolve_arch $check_440_host]/qrsh"

   # submit qrsh jobs with different command line length
   while { $start_length <= $end_length } {
      set arg_name "argument"
      set command_line "-q $submit_queue $submit_script_path $arg_name" 


      # generate command line
      set arg_length 0
      while { [string length $command_line] < $start_length } {
         incr arg_length 1
         if {$arg_length > 500 } {
            append arg_name " "
            set arg_length 0
         } else {
            append arg_name "_"
         }
         set command_line "-q $submit_queue $submit_script_path $arg_name" 
      }
      puts $CHECK_OUTPUT "submitting qrsh job with command line length: [string length $command_line]"

      # start qrsh job
      set output [ start_remote_prog $check_440_host $CHECK_USER $qrsh_command "$command_line" ]
      puts $CHECK_OUTPUT "exit state: $prg_exit_state"


      # check for errors
      if { $prg_exit_state != 0 } {
         add_proc_error "issue_440_check_qrsh" -1 "error in qrsh job:\nqueue was $submit_queue\n$output on host $check_440_host"
         set start_length $end_length
      } else {
         set output [string trim $output]
         set output2 [split $output "\n"]
         set output ""
         set found_start 0
         foreach out_line $output2 {
            if { [string match "*_GE_TESTSUITE_SCRIPT_OUTPUT_END_*" $out_line ] } {
               set found_start 0
            }
 
            if { $found_start == 1 } {
               append output $out_line
            }
            if { [string match "*_GE_TESTSUITE_SCRIPT_OUTPUT_BEGIN_*" $out_line ] } {
               set found_start 1
            }
         }
         set output [string trim $output]
         set arg_name [string trim $arg_name]
         if { [ string compare $output $arg_name ] != 0 } {
            add_proc_error "issue_440_check_qrsh" -1 "job output not equal to commandline input:\nstrlen(cmd_line) = [string length $arg_name]\nstrlen(output) = [string length $output] on host $check_440_host"
         }
      }

      # increment next start_length
      incr start_length 4096 
   }

   puts $CHECK_OUTPUT "check if master and scheduler are running ..."
   set back [ are_master_and_scheduler_running $CHECK_CORE_MASTER [get_qmaster_spool_dir]]
   if { $back != 3 } {
      add_proc_error "issue_440_check_qrsh" -1 "are_master_and_scheduler_running returns $back after submit on host $check_440_host"
   }   

   set_error 0 "ok"
}

proc issue_440_cleanup  {} {
   global CHECK_OUTPUT CHECK_PRODUCT_ROOT CHECK_ARCH

   # check if system is running normal
   set command_line "-o /dev/null -e /dev/null $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 5"
   set jobid [ submit_job $command_line ]
   wait_for_jobstart  $jobid "leeper" 60 1 1
   wait_for_jobend $jobid "leeper" 60 
   delete_all_jobs
   wait_for_end_of_all_jobs 60
   set_error 0 "ok"
}



