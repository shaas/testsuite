#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__
## Issue 2050: still used usersets can be removed under certain conditions

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_2050_init_level"

# define test's name and run level descriptions
set check_name            "issue_2050"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "check setup qlogin_daemon rlogin_daemon paths"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function issue_2050_setup
set check_cleanup_function issue_2050_cleanup

# define variables used in test
global test_host
global test_queue
global act_time
# define test's procedure order
set check_functions ""
lappend check_functions "issue_2050_test"

proc issue_2050_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   } 

   return -1  ;# no other level 
}

# -------- local test procedures: initialization------------------------------


proc issue_2050_setup  {} {
   global CHECK_CORE_EXECD test_host
   global test_queue act_time 
#   set test_host [ lindex $CHECK_CORE_EXECD 0 ]
   set test_host [host_conf_get_suited_hosts]
   #define variable based on current time to create unique file/queue names
   set act_time [timestamp]

   set nonexistent_host "host.$act_time"
   set test_queue "testq.$act_time"

   #add new test queue
   add_queue $test_queue $test_host new_queue 0
   
}

proc issue_2050_cleanup  {} {
   global test_queue test_host
   # cleanup cluster
   del_queue $test_queue $test_host 0 1
}

# This is a test to check if objects, after being referenced in a queue are
# gettting deleted without error or not (see CR 6422335)
# The objects are deleted esp when they are referenced in queue instances of
# non-existant hosts 

proc issue_2050_test {} {
   global ts_config ts_user_config CHECK_OUTPUT CHECK_USER
   global test_queue act_time 
   set test_items {}
   set act_time [timestamp]
   set object_spec "queue"
   set error_mail_output ""
   set test_queueinst "$test_queue@host$act_time"

   #test_items - The objects are be tested
#  lappend test_items "ul"
#  lappend test_items "projects"
#  lappend test_items "pe"
   lappend test_items "complexes"
#  lappend test_items "calendars"
#  lappend test_items "ckpt"

   foreach item $test_items {
      switch -exact $item {

         "ul" {
	     puts $CHECK_OUTPUT "-------- Testing userlists --------"
	     set test_userlist "testul_$act_time"	 
 	     #create a userlist by adding a user to it
	     puts $CHECK_OUTPUT "Creating new userlist $test_userlist"
	     set result [add_access_list $CHECK_USER $test_userlist]
	     if {$result == 0} {
		     puts $CHECK_OUTPUT "New userlist $test_userlist created adding $CHECK_USER"
	     } else {
		     puts $CHECK_OUTPUT "unable to add userlist"
	     }
 	     #add the userlist to the queue
	     puts $CHECK_OUTPUT "Adding userlist $test_userlist to $test_queueinst"
	     set result [add_attr $object_spec "user_lists" $test_userlist $test_queueinst 0]
             if {$result == 0} {
                     puts $CHECK_OUTPUT "userlist $test_userlist added to $test_queueinst"
             } else {
                     puts $CHECK_OUTPUT "unable to add userlist($test_userlist) to $test_queueinst"
             }
	     #now try deleting the userlist, it should throw an error!
	     puts $CHECK_OUTPUT "Deleting userlist $test_userlist"
	     set result [del_access_list $test_userlist 0]
	     if {$result == 0} {
                     add_proc_error "issue_2050 failed:" -1 " the userlist should not have been deleted!!"
		     append error_mail_output "the userlist should not have been deleted, as it is still referenced in the queue!"
	     } else {
	        del_attr $object_spec "user_lists" $test_userlist $test_queueinst
	        del_access_list $test_userlist
	     }


	     #Do cleanup after error is shown
	     #remove the attr from the queue and the userlist
             if {$error_mail_output != ""} {
	        del_attr $object_spec "user_lists" $test_userlist $test_queueinst
   	     }
         }

         "projects" {
	     puts $CHECK_OUTPUT "-------- Testing projects --------"
	     set test_project "testprj_$act_time"	 
	     set new_project(name) "$test_project"
             set error_mail_output ""

 	     #create a project by adding a user to it
	     puts $CHECK_OUTPUT "Creating new project $test_project"
	     set result [add_prj new_project 0]
	     if {$result == 0} {
		     puts $CHECK_OUTPUT "New project $test_project created"
	     } else {
		     puts $CHECK_OUTPUT "unable to add project"
	     }
 	     #add the project to the queue
	     puts $CHECK_OUTPUT "Adding project $test_project to $test_queueinst"
	     set result [add_attr $object_spec "projects" $test_project $test_queueinst 0]
             if {$result == 0} {
                     puts $CHECK_OUTPUT "project $test_project added to $test_queueinst"
             } else {
                     puts $CHECK_OUTPUT "unable to add project($test_project) to $test_queueinst"
             }
	     
	     #now try deleting the project, it should throw an error!
	     puts $CHECK_OUTPUT "Deleting project $test_project"
	     set result [del_prj $test_project 0]
	     if {$result == 0} {
                     add_proc_error "issue_2050 failed:" -1 " the project should not have been deleted!!"
		     append error_mail_output "the project should not have been deleted, as it is still referenced in the queue!"
	     } else {
	        del_attr $object_spec "projects" $test_project $test_queueinst
	        del_prj $test_project
	     }


	     #Do cleanup after error is shown
	     #remove the attr from the queue and remove the added project
             if {$error_mail_output != ""} {
	        del_attr $object_spec "projects" $test_project $test_queueinst
   	     }
         }

         "pe" {
	     puts $CHECK_OUTPUT "-------- Testing pe --------"
	     set test_pe "testpe_$act_time"	 
	     set new_pe(pe_name) "$test_pe"
             set error_mail_output ""
 	     #create a pe 
	     puts $CHECK_OUTPUT "Creating new pe $test_pe"
	     set result [add_pe new_pe]
	     if {$result == 0} {
		     puts $CHECK_OUTPUT "New pe $test_pe created"
	     } else {
		     puts $CHECK_OUTPUT "unable to add pe"
	     }
 	     #add the pe to the queue
	     puts $CHECK_OUTPUT "Adding pe $test_pe to $test_queueinst"
	     set result [add_attr $object_spec "pe_list" $test_pe $test_queueinst 0]
             if {$result == 0} {
                     puts $CHECK_OUTPUT "pe $test_pe added to $test_queueinst"
             } else {
                     puts $CHECK_OUTPUT "unable to add pe($test_pe) to $test_queueinst"
             }
	     #now try deleting the pe, it should throw an error!
	     puts $CHECK_OUTPUT "Deleting pe $test_pe"
	     set result [del_pe $test_pe 0]
	     if {$result == 0} {
                     add_proc_error "issue_2050 failed:" -1 " the pe should not have been deleted!!"
		     append error_mail_output "the pe should not have been deleted, as it is still referenced in the queue!"
	     } else {
	        del_attr $object_spec "pe_list" $test_pe $test_queueinst
	        del_pe $test_pe
	     }

	     #Do cleanup after error is shown
	     #remove the attr from the queue and remove the added project
             if {$error_mail_output != ""} {
	        del_attr $object_spec "pe_list" $test_pe $test_queueinst
   	     }
         }

         "complexes" {
	     puts $CHECK_OUTPUT "-------- Testing complexes --------"
	     set test_complex "testcl_$act_time"	 
             set error_mail_output ""
 	     #create a complex
	     puts $CHECK_OUTPUT "Creating new complex $test_complex"
	     set new_complex($test_complex) "xxxs_$act_time INT <= YES YES 1 1000"
	     set result [set_complex new_complex]
	     if {$result == 0} {
		     puts $CHECK_OUTPUT "New complex $test_complex created adding $CHECK_USER"
	     } else {
		     puts $CHECK_OUTPUT "unable to add complex"
	     }
 	     #add the complex to the queue
	     puts $CHECK_OUTPUT "Adding complex $test_complex to $test_queueinst"
	     set result [mqattr "complex_values" "$test_complex=1" $test_queueinst]
             if {$result == 0} {
                     puts $CHECK_OUTPUT "complex $test_complex=1 added to $test_queueinst"
             } else {
                     puts $CHECK_OUTPUT "unable to add complex($test_complex=1) to $test_queueinst"
             }
	     #now try deleting the complex, it should throw an error!
	     puts $CHECK_OUTPUT "Deleting complex $test_complex"
	     set new_complex($test_complex) ""
	     set result [set_complex new_complex 0]
	     if {$result == 0} {
                     add_proc_error "issue_2050 failed:" -1 " the complex should not have been deleted!!"
		     append error_mail_output "the complex should not have been deleted, as it is still referenced in the queue!"
	     } else {
	        del_attr $object_spec "complex_values" "$test_complex=1" $test_queueinst
	        set_complex new_complex
	     }

	     #Do cleanup after error is shown
	     #remove the attr from the queue and remove the added project
             if {$error_mail_output != ""} {
	        del_attr $object_spec "complex_values" "$test_complex=1" $test_queueinst
   	     }
         }

         "calendars" {
	     puts $CHECK_OUTPUT "-------- Testing calendars --------"
	     set test_calendar "testcal_$act_time"     
	     set new_cal(calendar_name) "$test_calendar"
             set error_mail_output ""
 	     #create a new calendar
	     puts $CHECK_OUTPUT "Creating new calendar $test_calendar"
	     set result [add_calendar new_cal]
	     if {$result == 0} {
		     puts $CHECK_OUTPUT "New calendar $test_calendar"
	     } else {
		     puts $CHECK_OUTPUT "unable to add calendar"
	     }

 	     #add the userlist to the queue
	     puts $CHECK_OUTPUT "Adding calendar $test_calendar to $test_queueinst"
	     set result [add_attr $object_spec "calendar" $test_calendar $test_queueinst 0]
             if {$result == 0} {
                     puts $CHECK_OUTPUT "calendar $test_calendar added to $test_queue"
             } else {
                     puts $CHECK_OUTPUT "unable to add calendar($test_calendar) to $test_queue"
             }
	     #now try deleting the calendar, it should throw an error!
	     puts $CHECK_OUTPUT "Deleting calendar $test_calendar"
	     set result [del_calendar $test_calendar "" "" 0]
	     if {$result == 0} {
                     add_proc_error "issue_2050 failed:" -1 " the calendar should not have been deleted!!"
		     append error_mail_output "the calendar should not have been deleted, as it is still referenced in the queue!"
	     } else {
		mqattr "calendar" "NONE" $test_queueinst
		del_calendar $test_calendar
	     }

	     #Do cleanup after error is shown
	     #remove the attr from the queue and remove the added calendar
             if {$error_mail_output != ""} {
	        del_attr $object_spec "calendar" $test_calendar $test_queueinst
   	     }

         }

         "ckpt" {
	     puts $CHECK_OUTPUT "-------- Testing checkpoints --------"
	     set test_checkpoint "testckpt_$act_time"     
	     set new_ckpt(ckpt_name) "$test_checkpoint"
 	     #create a new checkpoint
	     puts $CHECK_OUTPUT "Creating new checkpoint $test_checkpoint"
	     set result [add_checkpointobj new_ckpt]
	     if {$result == 0} {
		     puts $CHECK_OUTPUT "New checkpoint $test_checkpoint"
	     } else {
		     puts $CHECK_OUTPUT "unable to add checkpoint"
	     }

 	     #add the userlist to the queue
	     puts $CHECK_OUTPUT "Adding checkpoint $test_checkpoint to $test_queueinst"
	     set result [add_attr $object_spec "ckpt_list" $test_checkpoint $test_queueinst 0]
             if {$result == 0} {
                     puts $CHECK_OUTPUT "checkpoint $test_checkpoint added to $test_queueinst"
             } else {
                     puts $CHECK_OUTPUT "unable to add checkpoint($test_checkpoint) to $test_queueinst"
             }
	     #now try deleting the checkpoint, it should throw an error!
	     puts $CHECK_OUTPUT "Deleting checkpoint $test_checkpoint"
	     set result [del_checkpointobj $test_checkpoint 0]
	     if {$result == 0} {
                     add_proc_error "issue_2050 failed:" -1 " the checkpoint should not have been deleted!!"
		     append error_mail_output "the checkpoint should not have been deleted, as it is still referenced in the queue!"
	     } else {
	        puts $CHECK_OUTPUT "removing checkpoint $test_checkpoint from q"
                del_attr $object_spec "ckpt_list" $test_checkpoint $test_queueinst
	        puts $CHECK_OUTPUT "Deleting checkpoint $test_checkpoint"
		del_checkpointobj $test_checkpoint
	     }

	     #Do cleanup after error is shown
	     #remove the attr from the queue and remove the added checkpoint
             if {$error_mail_output != ""} {
                del_attr $object_spec "ckpt_list" $test_checkpoint $test_queueinst
   	     }
         }
      }
   }
}
