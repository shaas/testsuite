#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions check_highest_level
global check_init_level_procedure check_category
global check_root_access_needs

# setup and cleanup functions
set check_cleanup_function issue_1806_cleanup

set check_init_level_procedure "issue_1806_init_level"

set check_category            "COMPATIBILITY SYSTEM VERIFIED"
set check_name                "issue_1806"
set check_description(0)      "job finish although terminate method is still running"
set check_needs               "init_core_system"      ;# dependencies of this check (name of other check)
set check_root_access_needs   "no"

# setup and cleanup functions
set check_setup_function "issue_1806_setup"
set check_cleanup_function "issue_1806_cleanup"

# define test's procedure order
set check_functions           ""
lappend check_functions       "issue_1806_run"   ;# functions to call (in order)

set check_highest_level       0

#
# Scenario:
#     setup:
#
#     run:
#        submit a bunch of sleepers with 0 seconds duration 
#        check log file if following warning is present:
#        "" 
#
#     cleanup:
#        delete all jobs
#

proc issue_1806_init_level {} {
   global CHECK_ACT_LEVEL
   global ts_config 

   # setup levels
   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }
   return -1  ;# no other level else
}

proc issue_1806_setup {} {
   global ts_config
}

proc issue_1806_cleanup {} {
   global ts_config
}

proc issue_1806_run {} {
   global ts_config

   # search for this pattern in messages file from execution client 
   set pattern [translate_macro MSG_JOB_REAPINGJOBXPTFCOMPLAINSY_US "*" "*"] 

   # get an valid execution host 
   set exechost [host_conf_get_suited_hosts]

   # tail -f the file
   set spooldir [ get_execd_spool_dir $exechost ]
   set spooldir $spooldir/$exechost
   set logfile "$spooldir/messages"
   
   init_logfile_wait $exechost $logfile 

   # submit a bunch of short jobs (sleeper with 0 seconds)
   
   set arguments "-l h=$exechost $ts_config(product_root)/examples/jobs/sleeper.sh 0"

   ts_log_info "Submit 0 sec. sleepers on host: $exechost"

   for {set x 0} {$x<10} {incr x} {
      set job_id($x) [ submit_job "$arguments" ] 
   }

   for {set x 0} {$x<10} {incr x} {
      wait_for_jobend $job_id($x) "leeper" 60 0 1 
   }
   
   # wait and check logfile for pattern 
   issue_1806_check_log_file_for_pattern $pattern 

   # close logfile 
   close_logfile_wait

   # delete the jobs
   delete_all_jobs 

}


#****** check.60/issue_1806_check_log_file_for_pattern() ***********************
#  NAME
#     issue_1806_check_log_file_for_pattern() -- ??? 
#
#  SYNOPSIS
#     issue_1806_check_log_file_for_pattern { pattern {timeout 30} } 
#
#  FUNCTION
#     Checks if a certain pattern (given through the pattern parameter) 
#     occurs in th client messages file. If the pattern occurs the test 
#     will fail.
#
#  INPUTS
#     pattern      - pattern to wait for  
#     {timeout 20} - max. amount of time to wait for the pattern 
#
#*******************************************************************************
proc issue_1806_check_log_file_for_pattern { pattern {timeout 60} } {

   # wait for pattern in logfile 30 seconds - if it does not occur abort
   set output [logfile_wait $pattern $timeout 0 0]

   # if error flag is 0 then the pattern was found in the logfile
   if {$logfile_wait_error == 0} {
      # found pattern which should not appear in logfile 
      ts_log_severe "Found pattern $pattern in logfile! Bug 1806 seems to be present!\n$output\n" 
   }

}

