#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global env

# define a level initialization procedure:
set check_init_level_procedure "issue_1933_init_level"

# define test's name and run level descriptions
set check_name            "issue_1933"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "check for double qstat queue error messages"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function issue_1933_setup
set check_cleanup_function issue_1933_cleanup

# define test's procedure order
set check_functions ""
lappend check_functions "issue_1933_test"

global queue_name

proc issue_1933_init_level {} {
   global CHECK_ACT_LEVEL queue_name
   set queue_name "1933.q"

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level else
}

proc issue_1933_setup  {} {
   global CHECK_OUTPUT ts_config queue_name

   puts $CHECK_OUTPUT "add $queue_name"
   set q_param(prolog) "invalid_prolog"
   add_queue $queue_name "@allhosts" q_param

   set_error 0 "ok"
}

proc issue_1933_cleanup  {} {
   global CHECK_OUTPUT CHECK_USER ts_config queue_name

   set host [lindex $ts_config(execd_nodes) 0]

   puts $CHECK_OUTPUT "delete $queue_name"
   del_queue $queue_name "@allhosts" 1 1
   start_remote_prog $host $CHECK_USER qmod "-cq all.q" exit_state 30

   set_error 0 "ok"
}


proc issue_1933_test {} {
   global 1933_test_hosts check_description queue_name
   global CHECK_OUTPUT ts_config CHECK_PRODUCT_ROOT CHECK_ACT_LEVEL
   global CHECK_HOST CHECK_USER

   set host [lindex $ts_config(execd_nodes) 0]

   puts $CHECK_OUTPUT $check_description($CHECK_ACT_LEVEL)

   # submit testjob to set the queue in error
   set job_id [ submit_job "-o /dev/null -e /dev/null -q ${queue_name}@$host $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 15" ]

   # wait for queue to get in error state
   set time [timestamp]
   while {1} {
      set state [ get_queue_state "$queue_name@$host" ] 
      if { [ string first "E" $state ] >=  0  } {
         break
      }

      set runtime [expr ( [timestamp] - $time) ]
      if { $runtime >= 60 } {
         add_proc_error "issue_1933_test" -1 "timeout waiting for queue ${queue_name}@$host to get in error state"
         break;
      }
      sleep 1
   }

   delete_job $job_id
   set output [start_remote_prog $host $CHECK_USER qstat "-q ${queue_name} -explain E" exit_state 30] 

   puts $CHECK_OUTPUT $output

   if { [ string first "QERROR" $output ] <= 0  } {
      add_proc_error "issue_1933_test" -1 "qstat printed QERROR never"
   } else {
      if { [ string first "QERROR" $output ] != [ string last "QERROR" $output ] } {
         set message "Issue 1933 present: qstat printed QERROR for one queue instance multiple times"
         if {$ts_config(gridengine_version) == 60} {
            add_proc_error "issue_1933_test" -3 "$message\nnot fixed for 6.0"
         } else {
            add_proc_error "issue_1933_test" -1 $message
         }
      }
   }

   set_error 0 "ok"
}


