#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__



# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_3172_init_level"

# define test's name and run level descriptions
set check_name            "issue_3172"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "testing behaviour of fstype binary with different directories on different archs"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function issue_3172_setup
set check_cleanup_function issue_3172_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "issue_3172_test1"

proc issue_3172_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 -
      1 {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc issue_3172_setup {} {
   global ts_config
   global issue_3172_hosts issue_3172_archs issue_3172_nfsdir issue_3172_backup

   # we fetch all cluster hosts 
   set issue_3172_hosts [host_conf_get_cluster_hosts]
   
   # we fetch all available archs 
   set issue_3172_archs [host_conf_get_archs $issue_3172_hosts]

   set issue_3172_nfsdir [fs_config_get_filesystemlist_by_fstype nfs4]
   set issue_3172_nfsdir [lindex $issue_3172_nfsdir 0]

   # we want to modify the global config - make a backup
   get_config issue_3172_backup

}

proc issue_3172_cleanup {} {
   global ts_config
   global issue_3172_hosts issue_3172_archs issue_3172_nfsdir issue_3172_backup

   delete_all_jobs
   wait_for_end_of_all_jobs

   # restore config
   reset_config issue_3172_backup

   # unset our test's global variables
   foreach var "issue_3172_hosts issue_3172_archs issue_3172_nfsdir issue_3172_backup" {
      if {[info exists $var]} {
         unset $var
      }
   }
}


proc issue_3172_test1 {} {
   global ts_config CHECK_USER
   global issue_3172_hosts issue_3172_archs issue_3172_nfsdir ts_fs_config
   global CHECK_ACT_LEVEL

   foreach host $issue_3172_hosts {
      set output [start_remote_prog $host $CHECK_USER "mount" "" prg_exit_state 60 0 "" "" 1 0 0 1 1]
      foreach line [split $output "\n"] {
         set words [split $line " \t"]
         if {[string match [lindex $words 2] $issue_3172_nfsdir] == 1 && [string match [lindex $words 4] "nfs4"] == 1} {

            set binout [start_sge_utilbin "fstype" "$issue_3172_nfsdir" $host $CHECK_USER prg_exit_state 60 ""]

            ts_log_fine " "
            switch -glob $binout {
               nfs4* {
                  ts_log_fine "found a nfs4 for dir:$issue_3172_nfsdir on host: $host"
               }

               nfs* {
                  ts_log_severe "found a nfs for dir:$issue_3172_nfsdir on host: $host -> fstype bug is back again"
               }

               * {
                 if {$prg_exit_state != 0} {
                    ts_log_warning "fstype binary exited with error: $binout on host: $host"
                    ts_log_warning "fs config might be wrong! Please, check dir: $issue_3172_nfsdir on host: $host"
                 } else {
                    ts_log_warning "something went wrong on host: $host!\ndirectory $issue_3172_nfsdir is available but neither nfs nor nfs4!"
                    ts_log_warning "fstype returned: $binout\ncheck if this directory is mounted"
                 }
               }
            }
            break 
         }
      }
   }
}

