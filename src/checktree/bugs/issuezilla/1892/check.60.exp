#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions check_errno check_errstr check_highest_level
global check_init_level_procedure check_category
global check_root_access_needs

# setup and cleanup functions
set check_cleanup_function issue_1892_cleanup

set check_init_level_procedure "issue_1892_init_level"

set check_category            "COMPATIBILITY SYSTEM VERIFIED"
set check_name                "issue_1892"
set check_description(0)      "DRMAA crashes during some operations on bulk jobs"
set check_needs               "init_core_system"      ;# dependencies of this check (name of other check)
set check_root_access_needs   "no"

# define test's procedure order
set check_functions           ""
lappend check_functions       "issue_1892_run"   ;# functions to call (in order)
set check_highest_level       0

proc issue_1892_init_level {} {
   global CHECK_ACT_LEVEL ts_config

   # setup levels 
   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1
}

proc issue_1892_run  {} {
   global ts_config CHECK_USER CHECK_HOST CHECK_PRODUCT_ROOT

   # Run test binary
   set failed 0
   set pid [pid]

   foreach host $ts_config(unique_arch_nodes) {
      set up_arch [resolve_build_arch_installed_libs $host]

      set client_binary "$ts_config(source_dir)/$up_arch/test_drmaa_issue1892"

      if {[wait_for_remote_file $host $CHECK_USER $client_binary 1 0] != 0} {
         add_proc_error "issue_1892_run" -3 "test binary $client_binary doesn't exist on host $host"
         continue
      } else {
         set output [start_remote_prog $host $CHECK_USER $client_binary "/bin/date"]
         # If we segfault on any architecture, the bug still exists.
         if {$prg_exit_state != 0} {
             add_proc_error "issue_1892_run" -1 "test binary $client_binary failed on host $host: issue 1892 still exists"
         }
      }   
   }

   set_error 0 "ok"
}

proc issue_1892_cleanup {} {
   delete_all_jobs
   set_error 0 "ok"
}
