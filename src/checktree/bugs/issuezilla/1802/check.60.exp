#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_1802_init_level"

# define test's name and run level descriptions
set check_name            "issue_1802"
set check_category        "COMPATIBILITY SYSTEM VERIFIED CSP"
set check_highest_level   0
set check_description(0)  "check csp error messages by using sge_ca -renew_ca option"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_cleanup_function issue_1802_cleanup

# define test's procedure order
set check_functions ""
lappend check_functions "issue_1802_test"

proc issue_1802_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level
}




# -------- local test procedures: initialization------------------------------


proc issue_1802_cleanup  {} {
   global ts_config CHECK_USER

   if {[string match "*csp*" $ts_config(product_feature)] == 1} {
      ts_log_fine "cleanup ..."

      ts_log_fine "starting qstat -f ..."
      set output [start_sge_bin "qstat" "-f" $ts_config(master_host)]
      ts_log_fine "exit state of qstat: $prg_exit_state"
      if {$prg_exit_state != 0} {
         set sge_ca_bin "$ts_config(product_root)/util/sgeCA/sge_ca"
         set command_options "-days 365 -renew $CHECK_USER"

         ts_log_fine "now make user certificate for user $CHECK_USER valid again for 365 days ..."
         ts_log_fine "starting sge_ca $command_options as root user ..."
            
         set output [start_remote_prog $ts_config(master_host) "root" $sge_ca_bin $command_options ]
         if {$prg_exit_state != 0} {
            ts_log_severe "sge_ca $command_options exit state is $prg_exit_state\n$output"
         }
         ts_log_fine "starting qstat -f ..."
         set output [start_sge_bin "qstat" "-f" $ts_config(master_host)]
         ts_log_fine "exit state of qstat: $prg_exit_state"
         if {$prg_exit_state != 0} {
            ts_log_severe "can't re-create user certificate for user $CHECK_USER again"
         }
      }
   }
}


proc issue_1802_test {} {
   global ts_config CHECK_USER

   # This test is only working for csp systems, so only act if the csp feature
   # is enabled ...
   if {[string match "*csp*" $ts_config(product_feature)] != 1} {
      ts_log_config "This test only works for csp gridengine systems - break"
   } else {
      set sge_ca_bin "$ts_config(product_root)/util/sgeCA/sge_ca"
      set USER_CERT_EXPIRED [translate_macro MSG_CL_COMMLIB_SSL_ERROR_336151573]
      set SSL_HS_ERROR [translate_macro MSG_CL_COMMLIB_SSL_HANDSHAKE_ERROR]
      set UNABLE_CONNECT [translate_macro MSG_GDI_UNABLE_TO_CONNECT_SUS "qmaster" $ts_config(commd_port) "*" ]

      ts_log_fine "starting qstat -f ..."
      set output [start_sge_bin "qstat" "-f" $ts_config(master_host)]
      ts_log_fine "exit state of qstat: $prg_exit_state"
      if {$prg_exit_state != 0} {
         ts_log_severe "qstat exit state is $prg_exit_state, expected 0\n$output"
      }

      ts_log_fine ""
      set command_options "-days -1 -renew $CHECK_USER"
      ts_log_fine "now make user certificate for user $CHECK_USER invalid ..."
      ts_log_fine "starting sge_ca $command_options as root user ..."
      
      set output [start_remote_prog $ts_config(master_host) "root" $sge_ca_bin $command_options]
      if {$prg_exit_state != 0} {
         ts_log_severe "sge_ca $command_options exit state is $prg_exit_state, expected 0\n$output"
      }

      ts_log_fine "starting qstat -f ..."
      set output [start_sge_bin "qstat" "-f" $ts_config(master_host)]
      ts_log_fine "exit state of qstat: $prg_exit_state"
      if {$prg_exit_state == 0} {
         ts_log_severe "qstat exit state is $prg_exit_state, should be != 0\n$output"
         return 
      }

      set nr_of_lines 0
      set nr_of_matches 0
      foreach line [split [string trim $output] "\n"] {
         set line [string trim $line]
         incr nr_of_lines 1
         ts_log_fine $line
         if {[string match "*$UNABLE_CONNECT*" $line] == 1} {
            ts_log_fine "   ==> found \"$UNABLE_CONNECT\" output"
            incr nr_of_matches 1
         }
         if {[string match "*$USER_CERT_EXPIRED*" $line] == 1} {
            ts_log_fine "   ==> found \"$USER_CERT_EXPIRED\" output"
            incr nr_of_matches 1
         }
         if {[string match "*$SSL_HS_ERROR*" $line] == 1} {
            ts_log_fine "   ==> found \"$SSL_HS_ERROR\" output"
            incr nr_of_matches 1
         }
      }
      ts_log_fine "found $nr_of_lines lines with $nr_of_matches matches!"

      if {$nr_of_matches != 3} {
         ts_log_severe "qstat -f output doesn't hit 3 expected matches:\n$output"
      }
      if {$nr_of_lines != 3} {
         ts_log_severe "qstat -f output is longer than 3 lines:\n$output"
      }
   }
}


