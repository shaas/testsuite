#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_1802_init_level"

# define test's name and run level descriptions
set check_name            "issue_1802"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "check csp error messages by using sge_ca -renew_ca option"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function issue_1802_setup
set check_cleanup_function issue_1802_cleanup



# define test's procedure order
set check_functions ""
lappend check_functions "issue_1802_test"


proc issue_1802_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0
      } 
   } 

   return -1  ;# no other level 
}




# -------- local test procedures: initialization------------------------------


proc issue_1802_setup  {} {
   global CHECK_OUTPUT ts_config

#   This test is only working for csp systems, so only act if the csp feature
#   is enabled ...
#
#   if {[string match "*csp*" $ts_config(product_feature)] == 1 } {
#      puts $CHECK_OUTPUT "setup ..."
#   }

   set_error 0 "ok"
}

proc issue_1802_cleanup  {} {
   global CHECK_OUTPUT ts_config CHECK_USER CHECK_HOST CHECK_ARCH


#   This test is only working for csp systems, so only act if the csp feature
#   is enabled ...
#

   if {[string match "*csp*" $ts_config(product_feature)] == 1 } {
      puts $CHECK_OUTPUT "cleanup ..."
      puts $CHECK_OUTPUT ""
      set qstat_bin  "$ts_config(product_root)/bin/$CHECK_ARCH/qstat"

      puts $CHECK_OUTPUT "starting qstat -f ..."
      set output [start_remote_prog $CHECK_HOST $CHECK_USER $qstat_bin "-f" ]
      puts $CHECK_OUTPUT "exit state of qstat: $prg_exit_state"
      if { $prg_exit_state != 0 } {
         set sge_ca_bin "$ts_config(product_root)/util/sgeCA/sge_ca"
         set command_options "-days 365 -renew $CHECK_USER"

         puts $CHECK_OUTPUT "now make user certificate for user $CHECK_USER valid again for 365 days ..."
         puts $CHECK_OUTPUT "starting sge_ca $command_options as root user ..."
            
         set output [start_remote_prog $CHECK_HOST "root" $sge_ca_bin $command_options ]
         if { $prg_exit_state != 0 } {
            add_proc_error "issue_1802_cleanup" -1 "sge_ca $command_options exit state is $prg_exit_state\n$output"
         }
         puts $CHECK_OUTPUT "starting qstat -f ..."
         set output [start_remote_prog $CHECK_HOST $CHECK_USER $qstat_bin "-f" ]
         puts $CHECK_OUTPUT "exit state of qstat: $prg_exit_state"
         if { $prg_exit_state != 0 } {
            add_proc_error "issue_1802_cleanup" -1 "can't re-create user certificate for user $CHECK_USER again"
         }
      }
   }
   set_error 0 "ok"
}


proc issue_1802_test {} {
   global issue_1802_test_hosts check_description CHECK_ARCH CHECK_HOST
   global CHECK_OUTPUT ts_config CHECK_ACT_LEVEL CHECK_USER


#   This test is only working for csp systems, so only act if the csp feature
#   is enabled ...
#

   if {[string match "*csp*" $ts_config(product_feature)] != 1 } {
      add_proc_error "issue_1802_test" -3 "This test only works for csp gridengine systems - break"
   } else {
      puts $CHECK_OUTPUT $check_description($CHECK_ACT_LEVEL)
      set sge_ca_bin "$ts_config(product_root)/util/sgeCA/sge_ca"
      set qstat_bin  "$ts_config(product_root)/bin/$CHECK_ARCH/qstat"
      if { $CHECK_ACT_LEVEL == 0 } {
         set UNABLE_CONNECT [translate $ts_config(master_host) 0 1 0 [sge_macro MSG_GDI_UNABLE_TO_CONNECT_SUS] "qmaster" $ts_config(commd_port) "*" ]
         set USER_CERT_EXPIRED [translate $ts_config(master_host) 0 1 0 [sge_macro MSG_CL_COMMLIB_SSL_ERROR_336151573]]
         set SSL_HS_ERROR [translate $ts_config(master_host) 0 1 0 [sge_macro MSG_CL_COMMLIB_SSL_HANDSHAKE_ERROR]]

         puts $CHECK_OUTPUT "starting qstat -f ..."
         set output [start_remote_prog $CHECK_HOST $CHECK_USER $qstat_bin "-f" ]
         puts $CHECK_OUTPUT "exit state of qstat: $prg_exit_state"
         if { $prg_exit_state != 0 } {
            add_proc_error "issue_1802_test" -1 "qstat exit state is $prg_exit_state, expected 0\n$output"
         }

         puts $CHECK_OUTPUT ""
         set command_options "-days -1 -renew $CHECK_USER"
         puts $CHECK_OUTPUT "now make user certificate for user $CHECK_USER invalid ..."
         puts $CHECK_OUTPUT "starting sge_ca $command_options as root user ..."
         
         set output [start_remote_prog $CHECK_HOST "root" $sge_ca_bin $command_options ]
         if { $prg_exit_state != 0 } {
            add_proc_error "issue_1802_test" -1 "sge_ca $command_options exit state is $prg_exit_state, expected 0\n$output"
         }

         puts $CHECK_OUTPUT "starting qstat -f ..."
         set output [start_remote_prog $CHECK_HOST $CHECK_USER $qstat_bin "-f" ]
         puts $CHECK_OUTPUT "exit state of qstat: $prg_exit_state"
         if { $prg_exit_state == 0 } {
            add_proc_error "issue_1802_test" -1 "qstat exit state is $prg_exit_state, should be != 0\n$output"
            set_error 0 "ok"
            return 
         }

         set nr_of_lines 0
         set nr_of_matches 0
         foreach line [split [string trim $output] "\n"] {
            set line [string trim $line]
            incr nr_of_lines 1
            puts $CHECK_OUTPUT $line
            if { [string match "*$UNABLE_CONNECT*" $line ] == 1 } {
               puts $CHECK_OUTPUT "   ==> found \"$UNABLE_CONNECT\" output"
               incr nr_of_matches 1
            }
            if { [string match "*$USER_CERT_EXPIRED*" $line ] == 1 } {
               puts $CHECK_OUTPUT "   ==> found \"$USER_CERT_EXPIRED\" output"
               incr nr_of_matches 1
            }
            if { [string match "*$SSL_HS_ERROR*" $line ] == 1 } {
               puts $CHECK_OUTPUT "   ==> found \"$SSL_HS_ERROR\" output"
               incr nr_of_matches 1
            }
         }
         puts $CHECK_OUTPUT "found $nr_of_lines lines with $nr_of_matches matches!"

         if { $nr_of_matches != 3 } {
            add_proc_error "issue_1802_test" -1 "qstat -f output doesn't hit 3 expected matches:\n$output"
         }
         if { $nr_of_lines != 3 } {
            add_proc_error "issue_1802_test" -1 "qstat -f output is longer than 3 lines:\n$output"
         }
      }
   }
   set_error 0 "ok"
}


