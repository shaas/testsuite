#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__



# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_functions 
global check_highest_level
global check_init_level_procedure

# define a level initialization procedure:
set check_init_level_procedure "issue_1977_init_level"

# define test's name and run level descriptions
set check_name            "issue_1977"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "Check for Issue 1977 - resource filtering in qselect broken"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function issue_1977_setup
set check_cleanup_function issue_1977_cleanup

# define test's procedure order
set check_functions ""
lappend check_functions "issue_1977"


proc issue_1977_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0
      } 
    } 

   return -1  ;# no other level 
}

# -------- local test procedures: initialization------------------------------

proc issue_1977_setup  {} {
   global CHECK_OUTPUT ts_config
   global consumable_complex_backup

   set test_host [lindex $ts_config(execd_nodes) 0]

   # backup complex - we will modify it during the test
   get_complex consumable_complex_backup

   # create test complex
   set test_complex(t) "t BOOL == YES NO 0 0"
   set_complex test_complex

   # modify complex values of test_host
   set host_config(complex_values) "t=false"
   set_exechost host_config $test_host

   # modify complex values of all.q
   set queue_settings(complex_values) "t=true"
   mod_queue "all.q" "" queue_settings

   set_error 0 "ok"
}

proc issue_1977_cleanup  {} {
   global CHECK_OUTPUT ts_config
   global consumable_complex_backup

   set test_host [lindex $ts_config(execd_nodes) 0]

   # modify complex values of test_host
   set host_config(complex_values) "none"
   set_exechost host_config $test_host

   # modify complex values of all.q
   set queue_settings(complex_values) "none"
   mod_queue "all.q" "" queue_settings

   # restore complex
   set_complex consumable_complex_backup

   set_error 0 "ok"
}

proc issue_1977 {} {
   global CHECK_HOST
   global CHECK_OUTPUT ts_config

   set test_host [lindex $ts_config(execd_nodes) 0]
   set qinstance [ get_queue_instance all.q $test_host ]
   set NO_QUEUES_AFTER_SELECTION [translate $CHECK_HOST 1 0 0 [sge_macro MSG_QSTAT_NOQUEUESREMAININGAFTERSELECTION]]

   set output [start_sge_bin qselect "-l t=false" ]
   if { [ string compare $output $NO_QUEUES_AFTER_SELECTION ] == 0 } {
      add_proc_error "issue_1977" -1 "qselect -l broken"
   } 

   set output [start_sge_bin qselect "-l t=true" ]
   puts $CHECK_OUTPUT $output
   if { [ string match "*$qinstance*" $output ] == 1 } {
      add_proc_error "issue_1977" -1 "qselect -l broken"
   } 

   set_error 0 "ok"
}
