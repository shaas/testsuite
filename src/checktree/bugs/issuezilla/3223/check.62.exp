#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global check_need_running_system

set check_root_access_needs "yes"
set check_need_running_system "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_3223_init_level"

# define test's name and run level descriptions
set check_name            "issue_3223"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "execd does not verify the pe task start user in non CSP mode"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function issue_3223_setup
set check_cleanup_function issue_3223_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "issue_3223_test"

proc issue_3223_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc issue_3223_setup {} {
   global ts_config
   global issue_3223_hosts

   # we need 2 test hosts
   set issue_3223_hosts [host_conf_get_suited_hosts 2]

   # create a tightly integrated pe
   set pe_conf(slots)               4
   set pe_conf(start_proc_args)     "NONE"
   set pe_conf(stop_proc_args)      "NONE"
   set pe_conf(allocation_rule)     "\$round_robin"
   set pe_conf(control_slaves)      "TRUE"
   set pe_conf(job_is_first_task)   "FALSE"
   add_pe "tight" pe_conf

   # create a queue
   set queue_conf(load_thresholds) "NONE"
   set queue_conf(pe_list)         "tight"
   add_queue "tight" $issue_3223_hosts queue_conf
}

proc issue_3223_cleanup {} {
   global ts_config
   global issue_3223_hosts

   delete_all_jobs
   wait_for_end_of_all_jobs

   # delete queue and pe
   del_queue "tight" "" 1 1
   del_pe "tight"

   # unset our test's global variables
   foreach var "issue_3223_hosts" {
      if {[info exists $var]} {
         unset $var
      }
   }
}


proc issue_3223_test {} {
   global ts_config CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER
   global issue_3223_hosts

   # where the master tasks is running
   set master_host [lindex $issue_3223_hosts 0]

   # submit a tightly integrated parallel job (as CHECK_USER)
   set submit_args "-o /dev/null -j y -pe tight 4 -masterq tight@$master_host"
   set job_script "$ts_config(product_root)/examples/jobs/sleeper.sh"
   set job_args "300"
   set job_id [submit_job "$submit_args $job_script $job_args"]
   if {$job_id <= 0} {
      return
   }
   wait_for_jobstart $job_id "" 60

   # try to start a task as different user on both hosts (master host and slave host)
   set job_env(JOB_ID) $job_id
   set job_env(SGE_TASK_ID) "undefined"

   foreach host $issue_3223_hosts {
      # first as CHECK_USER, must be OK
      set output [start_remote_prog $master_host $CHECK_USER "qrsh" "-inherit $host echo OK" prg_exit_state 60 0 "" job_env]
      if {$prg_exit_state != 0 || [string first "OK" $output] < 0} {
         ts_log_severe "qrsh -inherit as job user failed on host $host: $prg_exit_state:\n$output"
      }
      # as other user must fail
      set output [start_remote_prog $master_host $CHECK_FIRST_FOREIGN_SYSTEM_USER "qrsh" "-inherit $host echo FAILING" prg_exit_state 60 0 "" job_env]
      if {$prg_exit_state == 0 || [string first "FAILING" $output] >= 0} {
         ts_log_severe "qrsh -inherit as non job user succeeded on host $host: $prg_exit_state:\n$output"
      }
   }

   # cleanup
   delete_job $job_id 1
}
