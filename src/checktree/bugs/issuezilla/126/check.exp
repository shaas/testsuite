#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"


# define a level initialization procedure:
set check_init_level_procedure "issue_126_init_level"

# define test's name and run level descriptions
set check_name            "issue_126"
set check_category        "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_highest_level   201
set check_description(0)  "check iz 126 on all hosts with 5 test loops with prolog"
set check_description(1)  "check iz 126 on all hosts with 5 test loops without prolog"
set check_description(200)  "check iz 126 on all hosts with 200 test loops with prolog"
set check_description(201)  "check iz 126 on all hosts with 200 test loops without prolog"


# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_level_function "issue_126_setup"
set check_cleanup_level_function "issue_126_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "issue_126_check"

proc issue_126_init_level {} {
   global CHECK_ACT_LEVEL
   global check_126_config
   switch -exact $CHECK_ACT_LEVEL {
      0 {
         set check_126_config(loops)  5
         set check_126_config(prolog) 1
         return 0
      }
      1 {
         set check_126_config(loops)  5
         set check_126_config(prolog) 0
         return 0
      }
      200 {
         set check_126_config(loops)  200
         set check_126_config(prolog) 1
         return 0
      }
      201 {
         set check_126_config(loops)  200
         set check_126_config(prolog) 0
         return 0
      }
   }
   return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------

proc issue_126_setup {} {
   global ts_config
   global CHECK_ACTUAL_TEST_PATH
   global check_126_host

   global check_126_config
   set check_126_config(host_list) [host_conf_get_unique_arch_nodes $ts_config(execd_hosts)]

   foreach check_126_host $check_126_config(host_list) {
      set q1 [get_requestable_queue "q1_$check_126_host" $check_126_host]
      set q2 [get_requestable_queue "q2_$check_126_host" $check_126_host]
      set queue1(slots) "1"
      set queue1(seq_no) "1"
      set queue1(load_thresholds)    "np_load_avg=7.00"
      set queue1(suspend_thresholds) "np_load_avg=7"
      if {$check_126_config(prolog) == 1} {
         ts_log_fine "setting prolog of queue $q1 to 8 seconds sleeper ..."
         set queue1(prolog) "${CHECK_ACTUAL_TEST_PATH}/sleep.sh"
      }
      set result [ add_queue "q1_$check_126_host" $check_126_host queue1]

      set queue2(slots) "1"
      set queue2(seq_no) "2"
      set queue2(load_thresholds)    "np_load_avg=7.00"
      set queue2(suspend_thresholds) "np_load_avg=7"
      set queue2(subordinate_list) $q1
      set result [add_queue "q2_$check_126_host" $check_126_host queue2]
   }
}

proc issue_126_cleanup {} {
   global check_126_config

   delete_all_jobs
   wait_for_end_of_all_jobs
   foreach check_126_host $check_126_config(host_list) {
      del_queue [get_requestable_queue "q2_$check_126_host" $check_126_host] "" 1 1
      del_queue [get_requestable_queue "q1_$check_126_host" $check_126_host] "" 1 1
   }
   unset check_126_config
}
# 
# Scenario
# 1 create two queues q1 and q2 each
#   - each with 1 slot
#   - q1 has lower seqno than q2
#   - q1 is subordinated by q2
#   - use a prolog like /usr/bin/sleep 8 in q1 to delay actual job startup
# 2 disable both queues
# 3 submit two jobs 
#   - the first (j1) one must queue for q1
#   - the second (j2) one must queue for q2
# 4 enable both queues
# 5 wait until both jobs are started
#   - suspend on subordinate should suspend j1
# 6 wait until prolog of j1 has finied
#   - check process state in ps output
#   - j1 ps output hat to be "T" 
#     => bug #126 is present if output is "S"
# 7 cleanup
#   - delete the jobs
# 8 cleanup
#   - remove queues
#


# TODO: This test might be a candidate for parallelism
# TODO: SPEEDUP
proc issue_126_check {} {
   global ts_config
   global check_126_config

   set work_script "$ts_config(testsuite_root_dir)/scripts/work_pid.sh 360"
   set sleep_script "$ts_config(product_root)/examples/jobs/sleeper.sh 360"
   set job_name1 "IZ126_1"
   set job_name2 "IZ126_2"

   foreach check_126_host $check_126_config(host_list)  {
      set error_output ""

      # ps command is broken on darwin.
      # It shows suspended jobs as running!
      set arch [resolve_arch $check_126_host]
      if {[string match "darwin*" $arch]} {
         ts_log_config "ps command doesn't report suspend state on architecture $arch\nskipping host $check_126_host"
         continue
      }
      ts_log_fine "running $check_126_config(loops) loops on host $check_126_host (arch=$arch)"

      setup_qping_dump dump_handle
      set q1 [get_requestable_queue "q1_$check_126_host" $check_126_host]
      set q2 [get_requestable_queue "q2_$check_126_host" $check_126_host]

      set runs_failed 0
      set printed_line 0

      for {set i 0} {$i < $check_126_config(loops)} {incr i} {
         append error_output "\n======================================================================\n"
         append error_output "[clock format [clock seconds]] starting test run $i\n"

         set output [start_sge_bin "qmod" "-d $q1 $q2"]
         append error_output "[clock format [clock seconds]] disabled queue $q1 and $q2\n"

         set job1_args "-o /dev/null -j y -N $job_name1 -l q=$q1 "
         set job1_id [submit_job "$job1_args $work_script"]
         append error_output "[clock format [clock seconds]] submitted job $job1_id ($job1_args $work_script)\n"

         set job2_args "-o /dev/null -j y -N $job_name2 -l q=$q2 "
         set job2_id [submit_job "$job2_args $sleep_script"]
         append error_output "[clock format [clock seconds]] submitted job $job2_id ($job2_args $sleep_script)\n"

         enable_queue "$q1 $q2"
         append error_output "[clock format [clock seconds]] enabled queue $q1 and $q2\n"

         wait_for_jobstart $job1_id $job_name1 300 1 1
         append error_output "[clock format [clock seconds]] job $job1_id started\n"
         wait_for_jobstart $job2_id $job_name2 300 1 1
         append error_output "[clock format [clock seconds]] job $job2_id started\n"

         wait_for_end_of_transfer $job1_id 300
         append error_output "[clock format [clock seconds]] job $job1_id: end of transfer\n"
         wait_for_end_of_transfer $job2_id 300
         append error_output "[clock format [clock seconds]] job $job2_id: end of transfer\n"
        

         ts_log_fine "find out pid of job $job1_id ..."
         # wait until prolog of j1 has finished (prolog sleeps 5s)
         set my_timeout [timestamp]
         incr my_timeout 40

         while {1} {
            append error_output "[clock format [clock seconds]] try to get suspend state of job $job1_id ...\n"
            set state1 [get_suspend_state_of_job $job1_id $check_126_host "pid_list" 0]
            append error_output "[clock format [clock seconds]] job $job1_id has suspend state \"$state1\"\n"
            append error_output "[clock format [clock seconds]] process group info from ps output:\n$process_group_info"
            if {[string match "*T*" $state1] == 1} {
               ts_log_fine "suspend state is \"$state1\" - fine"
               while {[get_qping_dump_output dump_handle] == 0} {
               }
               break
            } 
            ts_log_fine "suspend state is \"$state1\"! Waiting for job $job1_id to get ps state \"T\" ..."
            if { $my_timeout < [timestamp] } {
               append error_output "[clock format [clock seconds]] job $job1_id has state \"$state1\", but should have state \"T\" - bug #126 is present\n"
               #
               # Bug #126 is present
               #   
               incr runs_failed 1
               append error_output "[clock format [clock seconds]] Test host was \"$check_126_host\"!\n"
               break
            }
            while {[get_qping_dump_output dump_handle] == 0} {
            }
         }
         append error_output "[clock format [clock seconds]] deleting jobs $job1_id and $job2_id\n"
         set output [start_sge_bin "qdel" "$job1_id $job2_id"]
      }

      while {[get_qping_dump_output dump_handle] == 0} {
      }
      ts_log_fine "try to print qping output"
      while {$printed_line < $dump_handle(actual_line)} {
         set time      $dump_handle(line,1,$printed_line)
         set local     $dump_handle(line,2,$printed_line)
         set direction $dump_handle(line,3,$printed_line)
         set remote    $dump_handle(line,4,$printed_line)
         set df        $dump_handle(line,5,$printed_line)
         set ack       $dump_handle(line,6,$printed_line)
         set msg_tag   $dump_handle(line,7,$printed_line)
         set msg_id    $dump_handle(line,8,$printed_line)
         set msg_rid   $dump_handle(line,9,$printed_line)
         set msg_len   $dump_handle(line,10,$printed_line)
         set msg_time  $dump_handle(line,11,$printed_line)
         append error_output "$time $direction $remote $df $ack $msg_tag $msg_id $msg_rid $msg_time\n"
           
         if {[string match "*TAG_SIGQUEUE*" $msg_tag] != 0 || 
             [string match "*TAG_SIGJOB*" $msg_tag] != 0 ||
             [string match "*TAG_ACK_REQUEST*" $msg_tag] != 0 ||
             [string match "*TAG_CHANGE_TICKET*" $msg_tag] != 0} {
            ts_log_fine "dumping out message tag $msg_tag"
            append error_output "dumping out message tag $msg_tag:"
            append error_output "$dump_handle(block,$printed_line)\n"
         }
         incr printed_line 1
      }
      cleanup_qping_dump_output dump_handle
      if {$runs_failed > 0} {
         ts_log_severe "Bug #126 is present - processes weren't suspended in $runs_failed of $check_126_config(loops) test runs on host $check_126_host:\n$error_output"
      }
   }
}


