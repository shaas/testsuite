#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions check_highest_level
global check_init_level_procedure check_category
global check_root_access_needs check_need_running_system

set check_init_level_procedure "issue_2895_init_level"

set check_category            "COMPATIBILITY SYSTEM VERIFIED COMMLIB"
set check_name                "issue_2895"
set check_description(0)      "check that execd does not stop on access denied error from qmaster"
set check_description(1)      "check that never ever connected execd does not stop on access denied error from qmaster"
set check_needs               "init_core_system"      ;# dependencies of this check (name of other check)
set check_root_access_needs   "yes"
set check_need_running_system "no" 

# setup and cleanup functions
set check_setup_level_function "issue_2895_setup"
set check_cleanup_level_function "issue_2895_cleanup"

# define test's procedure order
set check_functions           ""
lappend check_functions       "issue_2895_run"
set check_highest_level       1

proc issue_2895_init_level {} {
   global CHECK_ACT_LEVEL ts_config

   # setup levels 
   switch -- $CHECK_ACT_LEVEL {
      "0"  { 
         return 0
      }
      "1"  { 
         return 0
      }

   }
   return -1
}

proc issue_2895_setup {} {
   global CHECK_USER
   global orig_aliases_file
   global host_aliases_test_host
   global host_aliases_test_ip
   global must_correct_aliases_file
   global must_restart_qmaster_and_scheduler

   get_current_cluster_config_array ts_config

   set host_aliases_test_ip "unknown"

   if {[info exists orig_aliases_file]} {
      unset orig_aliases_file
   }

   set host_aliases_test_host [host_conf_get_suited_hosts 1 {} {} {} 1]

   ts_log_fine "test host is $host_aliases_test_host"

   set output [start_sge_bin "gethostname" "-all" $host_aliases_test_host "" prg_exit_state 60 "" "utilbin"]
   set lines [split $output "\n"]
   set ip ""
   foreach line $lines {
      ts_log_fine $line
      if {[string match "*Host*Address*:*" $line]} {
         set help [split $line ":"]
         set help2 [lindex $help 1]
         set ip [lindex $help2 0]
         break
      }
   }

   if {$ip == ""} {
      ts_log_severe "cannot get ip of host $host_aliases_test_host"
   }
   set host_aliases_test_ip $ip

   set cur_nr 1
   
   set long_name "$host_aliases_test_host.$ts_config(dns_domain)"
   set my_alias_file($cur_nr) "$host_aliases_test_ip $host_aliases_test_host $long_name"

   ts_log_fine "ip of host $host_aliases_test_host is $host_aliases_test_ip"

   if {[is_remote_file $host_aliases_test_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases"]} {
      ts_log_fine "saving original host_aliases file ..."
      get_file_content $host_aliases_test_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases" orig_aliases_file
      # append original mappings
      for {set i 1} {$i <= $orig_aliases_file(0)} {incr i 1} {
         incr cur_nr 1
         set my_alias_file($cur_nr) $orig_aliases_file($i)
      }
   }
   set my_alias_file(0) $cur_nr
   write_remote_file $host_aliases_test_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases" my_alias_file

   set must_correct_aliases_file 1
   set must_restart_qmaster_and_scheduler 1
}

proc issue_2895_cleanup {} {
   global CHECK_USER
   global orig_aliases_file
   global host_aliases_test_host
   global host_aliases_test_ip
   global must_correct_aliases_file
   global must_restart_qmaster_and_scheduler

   get_current_cluster_config_array ts_config

   if {$must_correct_aliases_file != 0} {
      if {[info exists orig_aliases_file]} {
         ts_log_fine "restoring original host_aliases file ..."
         write_remote_file $host_aliases_test_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases" orig_aliases_file
         unset orig_aliases_file
      } else {
         delete_remote_file $host_aliases_test_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases"
      }
   }

   if {$must_restart_qmaster_and_scheduler != 0} {
      shutdown_system_daemon $ts_config(master_host) "sched"
      shutdown_system_daemon $ts_config(master_host) "qmaster"
      startup_qmaster
   }

   if {[is_daemon_running $host_aliases_test_host "execd"] == 0} {
      ts_log_fine "execd on test host \"$host_aliases_test_host\" is not running anymore, restarting ..."
      startup_execd $host_aliases_test_host
   }

   # Wait for load from all queues
   wait_for_load_from_all_queues 60

   unset host_aliases_test_host
   unset host_aliases_test_ip
}


#****** check.60/issue_2895_run() ****************************************
#  NAME
#     issue_2895_run() -- test host alias file
#
#  SYNOPSIS
#     issue_2895_run { } 
#
#  FUNCTION
#     Scenario 1: qmaster using host alias file resolves execd host different
#                 which results in access denied error when execd wants to connect
#                 (execd already connected)
#     1) setup creates host_aliases file for a execd
#     2) shutdown qmaster
#     3) restart qmaster
#     4) check that execd gets access denied error
#     5) fix host aliases file
#     6) shutdown qmaster
#     7) restart qmaster
#     8) execd should reconnect
#*******************************************************************************
proc issue_2895_run {} {
   global CHECK_USER
   global CHECK_ACT_LEVEL
   global host_aliases_test_host
   global host_aliases_test_ip
   global orig_aliases_file
   global must_correct_aliases_file
   global must_restart_qmaster_and_scheduler

   get_current_cluster_config_array ts_config

   set error_text ""

   set output [start_sge_bin "gethostbyname" "-all $host_aliases_test_host" $host_aliases_test_host "" prg_exit_state 10 "" "utilbin" output_lines my_env]
   set help [split $output "\n"]
   foreach line $help {
      ts_log_fine $line
      if {[string match "SGE name:*" $line]} {
         if {[string match "*$host_aliases_test_ip*" $line ]} {
            ts_log_fine "found expected SGE name set to ip address!"
         } else {
            append error_text "host aliasing seems not to work correctly, SGE name is not \"$host_aliases_test_ip\" or issue 2897 found!\n"
         }
      }
   }

   if {$error_text == ""} {
      if {$ts_config(gridengine_version) >= 62} {
         set possible_error_text_2 [translate_macro MSG_COM_CANTREGISTER_SS "*" "*"]
         set possible_error_text_3 [translate_macro MSG_SHADOWD_CONTROLLEDSHUTDOWN_SU "*" "*"]
      } elseif {$ts_config(gridengine_version) <= 60} {
         set possible_error_text_2 [translate_macro MSG_COM_CANTREGISTER_S "*"]
         set possible_error_text_3 [translate_macro MSG_SHADOWD_CONTROLLEDSHUTDOWN_SSSU "*" "*" "*" "*"]
      } else {
         set possible_error_text_2 [translate_macro MSG_COM_CANTREGISTER_S "*"]
         set possible_error_text_3 [translate_macro MSG_SHADOWD_CONTROLLEDSHUTDOWN_SU "*" "*"]
      }
      set reconnect_message_text [translate_macro MSG_EXECD_REGISTERED_AT_QMASTER_S "*"]

      set master_spool_dir [get_qmaster_spool_dir]
      set execd_messages_file [get_spool_dir $host_aliases_test_host "execd"]
      append execd_messages_file "/messages"

      if {![is_remote_file $host_aliases_test_host $CHECK_USER $execd_messages_file]} {
         append error_text "file \"$execd_messages_file\" not found on host $host_aliases_test_host\n"
         ts_log_fine "file \"$execd_messages_file\" not found on host $host_aliases_test_host"
         ts_log_severe $error_text
         return
      } else {
         ts_log_fine "execd spool dir for host \"$host_aliases_test_host\" is \"$execd_messages_file\""
      }
      init_logfile_wait $host_aliases_test_host $execd_messages_file

      # Shutdown the qmaster
      shutdown_system_daemon $ts_config(master_host) "sched"
      shutdown_system_daemon $ts_config(master_host) "qmaster"
      ts_log_fine "qmaster should be down now"

      if {$CHECK_ACT_LEVEL == 1} {
         # shutdown execd
         shutdown_system_daemon $host_aliases_test_host "execd"
         ts_log_fine "execd $host_aliases_test_host should be down now"
                  
         # move host_aliases file
         set move_away_cmd "$ts_config(product_root)/$ts_config(cell)/common/host_aliases $ts_config(product_root)/$ts_config(cell)/common/host_aliases.tmp"
         set move_back_cmd "$ts_config(product_root)/$ts_config(cell)/common/host_aliases.tmp $ts_config(product_root)/$ts_config(cell)/common/host_aliases"

         start_remote_prog $host_aliases_test_host $CHECK_USER "mv" "$move_away_cmd"
         wait_for_remote_file $ts_config(master_host) $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases.tmp"
         wait_for_remote_file $ts_config(master_host) $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases" 60 1 1

         # restart execd
         startup_execd $host_aliases_test_host

         # re-move host_aliases file
         start_remote_prog $host_aliases_test_host $CHECK_USER "mv" "$move_back_cmd"
         wait_for_remote_file $ts_config(master_host) $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases"
         wait_for_remote_file $ts_config(master_host) $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases.tmp" 60 1 1

         # close old logfile tail and re-init new one      
         close_logfile_wait
         init_logfile_wait $host_aliases_test_host $execd_messages_file

         # Restart qmaster (now the host_aliases file is used)
         startup_qmaster

         # Here we have to wait for 120 seconds to give execd time to get access denied
         # and do a exit to detect the issue
         ts_log_fine "sleeping for 120 seconds ..."
         after 120000
         ts_log_fine "continue"
      }

      if {$CHECK_ACT_LEVEL == 0} {

         # Restart qmaster (now the host_aliases file is used)
         startup_qmaster

         set wait_list {}
         lappend wait_list $possible_error_text_2
         set log_text [logfile_wait $possible_error_text_3 180 0 1 "logfile_wait_error" $wait_list]

         if {[string match "*$possible_error_text_3*" $log_text] == 1} {
            close_logfile_wait
            append error_text "found shutdown logging in execd messages file!\n"
            ts_log_severe $error_text
            return
         }

         # We have to check this 2 times to find the error !!!
         # This is to be sure that execd get's it's time to shutdown. If we get no execd shutdown
         # message during this time execd will not shutdown and issue is fixed
         set log_text [logfile_wait $possible_error_text_3 120 0 0 "logfile_wait_error" $wait_list]
         if {[string match "*$possible_error_text_3*" $log_text] == 1} {
            close_logfile_wait
            append error_text "found shutdown logging in execd messages file!\n"
            ts_log_severe $error_text
            return
         }
      }

      ts_log_fine "now shutdown the master again ..."
      # Shutdown master again
      shutdown_system_daemon $ts_config(master_host) "sched"
      shutdown_system_daemon $ts_config(master_host) "qmaster"
      
      # Fix alias file 
      if {[info exists orig_aliases_file]} {
         ts_log_fine "restoring original host_aliases file ..."
         write_remote_file $host_aliases_test_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases" orig_aliases_file
         unset orig_aliases_file
      } else {
         delete_remote_file $host_aliases_test_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases"
      }
      set must_correct_aliases_file 0

      # Restart master and scheduler
      startup_qmaster
      set must_restart_qmaster_and_scheduler 0

      # Check that execd is still running
      if {[is_daemon_running $host_aliases_test_host "execd"] == 0} {
         append error_text "found issue #2895\n"
         append error_text "execd on $host_aliases_test_host is not running anymore!\n"
      }

      # Check that we got reconnect message
      ts_log_fine "check for reconnect message: \"$reconnect_message_text\" ..."
      logfile_wait $reconnect_message_text 120 0

      close_logfile_wait
      
   }

   if {$error_text != ""} {
      ts_log_severe $error_text
   }
}










