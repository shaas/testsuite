#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

# define test's name and run level descriptions
set check_name            "issue_2864"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "check issue 2864 is fixed"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function issue_2864_setup
set check_cleanup_function issue_2864_cleanup

# define a level initialization procedure:
set check_init_level_procedure "issue_2864_init_level"

# define test's procedure order
set check_functions ""
lappend check_functions "issue_2864_check"

proc issue_2864_init_level {} {
   global CHECK_ACT_LEVEL
   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0
      } 
   } 
   return -1  ;# no other level 
}

# -------- local test procedures: initialization ------------------------------

proc issue_2864_setup {} {
   global ts_config
   global global_host_backup

   ts_log_fine "issue_2864_setup" 

   if {[llength $ts_config(execd_nodes)] < 2} {
      ts_log_config "Need at least 2 hosts for this test. We only have $ts_config(execd_hosts)"
      return 99
   }

   

   set pe(slots)             "2"
   set pe(allocation_rule)   "\$round_robin"
   add_pe "round_robin" pe

   set pe(slots)             "2"
   set pe(allocation_rule)   "\$fill_up"
   add_pe "fill_up" pe

   set first [lindex $ts_config(execd_nodes) 0]
   set second [lindex $ts_config(execd_nodes) 1]

   # setup queues A and B each with two slots on a single host
   set queue_conf(seq_no)           "10,\[$first=1\]"
   set queue_conf(slots)            "2"
   set queue_conf(pe_list)          "round_robin fill_up"
   set queue_conf(load_thresholds)  "NONE"
   add_queue "A" "$first $second" queue_conf 1
   set queue_conf(seq_no)           "10,\[$second=1\]"
   add_queue "B" "$first $second" queue_conf 1

   # enable resource reservation etc.
   set schedconf(schedule_interval)          "0:0:05"
   set schedconf(weight_urgency)             "0.000000"
   set schedconf(weight_ticket)              "0.000000"
   set schedconf(weight_priority)            "1.000000"
   set schedconf(max_reservation)            "10"
   set schedconf(flush_submit_sec)             1
   set schedconf(flush_finish_sec)             1
   set schedconf(job_load_adjustments)       "NONE"
   set schedconf(load_adjustment_decay_time) "0:0:00"
   set schedconf(params)                     "MONITOR=true"
   set result [set_schedd_config schedconf]

   # ensure schedule file exists
   trigger_scheduling
}


proc issue_2864_wait_for_pattern {case_name pattern {timeout 10}} {
   set output [logfile_wait $pattern $timeout 0]
   if {$logfile_wait_error != 0} {
      ts_log_severe "case '$case_name': there was no pattern '$pattern' in the reporting file, got only\n$output"
      return 1
   }
   return 0
}

proc issue_2864_cleanup {  } {

   global global_host_backup
   global ts_config

   # reset the scheduler configuration
   reset_schedd_config

   # remove the cqueues
   del_queue "A" "" 1 1
   del_queue "B" "" 1 1

   del_pe        "round_robin"
   del_pe        "fill_up"
}


# -------- local test procedures: initialization ------------------------------


proc issue_2864_check { } {
   global ts_config
   set first [lindex $ts_config(execd_nodes) 0]
   set second [lindex $ts_config(execd_nodes) 1]

   ts_log_fine "testing contradicting host preferences in queues A and B"

   # master task to go into A@first when submitted with -q A
   if { [ issue_2864_single_check "-pe round_robin 1 -q A" "wait for master in A@$first" "1:STARTING:*:*:Q:A@$first:slots:1.0*"] != 0 } { return }
   if { [ issue_2864_single_check "-pe fill_up 1 -q A"     "wait for master in A@$first" "1:STARTING:*:*:Q:A@$first:slots:1.0*"] != 0 } { return }
   # master task to go into B@second when submitted with -q B 
   if { [ issue_2864_single_check "-pe round_robin 1 -q B" "wait for master in B@$second" "1:STARTING:*:*:Q:B@$second:slots:1.0*"] != 0 } { return }
   if { [ issue_2864_single_check "-pe fill_up 1 -q B"     "wait for master in B@$second" "1:STARTING:*:*:Q:B@$second:slots:1.0*"] != 0 } { return }
}

proc issue_2864_single_check { submission diagnosis dispatching } {
   global ts_config

   set SGE_ROOT $ts_config(product_root)
   set SGE_CELL $ts_config(cell)
   set schedule "$SGE_ROOT/$SGE_CELL/common/schedule"

   # tail -f scheduling file
   init_logfile_wait $ts_config(master_host) $schedule

   set jobid [submit_job "$submission $ts_config(product_root)/examples/jobs/sleeper.sh 180"]
   set ret [issue_2864_wait_for_pattern "$diagnosis" "${jobid}:${dispatching}"]

   ts_log_fine "got job assignment as expected"

   close_logfile_wait

   delete_all_jobs
   wait_for_end_of_all_jobs 60
   return $ret
}
