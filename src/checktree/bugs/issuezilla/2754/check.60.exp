#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace

# define a level initialization procedure:
set check_init_level_procedure "issue2754_init_level"

# define test's name and run level descriptions
set check_name            "issue2754_test"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "Tests, if user enters the same port for master and execd, which is not allowed"

# define test's procedure order
set check_fuctions ""
lappend check_functions "issue2754_test"
set check_highest_level 0

proc issue2754_init_level {} {
   global ts_config
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0"  {
         return 0
      }
   }
   return -1
}

# This test starts a simple installation of qmaster. 
# After entering the qmaster port the execd port has to entered. 
# The installer checks if testsuite enters the same port number for execd. 
# If this is the case, the install script should check this and ask again. 
# If the question is not recognized, testsuite throws an error.

proc issue2754_test {} {
   global ts_config CHECK_USER

   # start a simple installation 
   set id [open_remote_spawn_process $ts_config(master_host) $CHECK_USER "./inst_sge" "-m" 0 $ts_config(product_root)]
   set sp_id [lindex $id 1]

   log_user 1
   set msg_hit 0
   set found_darwin_more 1
   while {1} {
      set timeout 30
      expect {
         # This is for More license output on proper UNIX
         -i $sp_id "More" {
            ts_log_fine "--> testsuite: sending >space<<"
            ts_send $sp_id " "
            continue
         }
         # Agree license, sending "y"
         -i $sp_id "Do you agree with that license?*" {
            ts_log_fine "--> testsuite: sending y<"
            ts_send $sp_id "y\n"
            continue
         }
         #  This is for More license output on darwin
         -i $sp_id "LICENSE ??%" {
            set found_darwin_more 1
            ts_log_fine "\n -->testsuite: sending >space< (darwin)"
            ts_send $sp_id " "
            continue
         }

         # Also for darwin: First "more" will print file name, second only percentage of file
         -i $sp_id "\[0-9\]%" {
          if { $found_darwin_more } {
             ts_log_fine "\n -->testsuite: sending >space< (darwin)"
             ts_send $sp_id " "
          }
          continue
         }
         -i $sp_id "Hit <RETURN> to continue >> " {
            ts_log_fine "--> testsuite: sending >RETURN<"
            ts_send $sp_id "\n"
            continue
         }
         -i $sp_id "Do you want to install Grid Engine as admin user*" {
            ts_log_fine "--> testsuite: sending >RETURN<"
            ts_send $sp_id "\n"
            continue;
         }
         -i $sp_id "to use default*" {
            ts_log_fine "--> testsuite: sending >RETURN<"
            ts_send $sp_id "\n"
            continue
         }
         -i $sp_id "(default: 1) >> " {
            ts_log_fine "--> testsuite: sending >RETURN<"
            ts_send $sp_id "\n"
            continue
         }
         -i $sp_id "Please enter an unused port number >> " {
            ts_log_fine "--> testsuite: sending 10500"
            ts_send $sp_id "10500\n"
            incr msg_hit
            if {$msg_hit == 3} {
               break
            } else {
               continue
            }
         }
         -i $sp_id "Hit <RETURN> if this is ok or stop the installation with Ctrl-C >> " {
            ts_log_fine "--> testsuite: sending >RETURN<"
            ts_send $sp_id "\n"
            continue
         }
         -i $sp_id "Do you want to change the port number?*" {
            ts_log_fine "--> testsuite: sending y<"
            ts_send $sp_id "y\n"
            continue
         }
         -i $sp_id "Enter cell name*" {
            ts_log_severe "\nThe install script accepts duplicate port numbers!\nUsing the same port number for qmaster and execd may not be allowed!"
            break
         }
         # Errors
         -i $sp_id timeout {
            ts_log_severe "Timeout occurred! (Timeout was 30 seconds)"
            close_spawn_process $id;
            return
         }
         -i $sp_id "ommand failed*\n" {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id;
            return
         }
        -i $sp_id "No such file or directory*\n" {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id;
            return
         }
         -i $sp_id "error:\n" {
            ts_log_severe "$expect_out(0,string)"
            close_spawn_process $id
            return
         }
        
      }
   }
   # close the connection to inst_sge
   close_spawn_process $id

}
