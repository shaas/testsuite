#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global check_need_running_system

set check_root_access_needs "no"
set check_need_running_system "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_2967_init_level"

# define test's name and run level descriptions
set check_name            "issue_2967"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "qrsub should reject non existing checkpoint object"

# define test's dependencies
set check_needs           "init_core_system"

# setup and cleanup functions
set check_setup_function issue_2967_setup
set check_cleanup_function issue_2967_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "issue_2967_test"

proc issue_2967_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 -
      1 {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc issue_2967_setup {} {
   global ts_config
   global issue_2967_hosts issue_2967_backup
   global CKPT_NAME CKPT_NAME_NO_REF NON_CKPT_NAME
   global QUEUE_NO_CKPT_NAME QUEUE_WITH_CKPT_NAME

   # let's assume we need 2 test hosts
   set issue_2967_hosts [host_conf_get_suited_hosts 2]

   # we want to modify the global config - make a backup
   get_config issue_2967_backup

   set ckpt(ckpt_name) "my_ckpt"
   set CKPT_NAME $ckpt(ckpt_name)
   set CKPT_NAME_NO_REF "my_ckpt_no_ref"
   set NON_CKPT_NAME "fake_ckpt"
   set QUEUE_NO_CKPT_NAME "test.q"
   set QUEUE_WITH_CKPT_NAME "ckpt.q"

   # add checkpoint interface
   add_ckpt $CKPT_NAME
   add_ckpt $CKPT_NAME_NO_REF
   # add queue which reference the checkpoint object
   set chgar(ckpt_list) $CKPT_NAME
   add_queue $QUEUE_WITH_CKPT_NAME $issue_2967_hosts chgar
   # add queue which doesn't reference any checkpoint object
   add_queue $QUEUE_NO_CKPT_NAME $issue_2967_hosts
}

proc issue_2967_cleanup {} {
   global ts_config
   global issue_2967_hosts issue_2967_backup
   global CKPT_NAME CKPT_NAME_NO_REF
   global QUEUE_NO_CKPT_NAME QUEUE_WITH_CKPT_NAME

   delete_all_ars

   del_ckpt $CKPT_NAME
   del_ckpt $CKPT_NAME_NO_REF
   del_queue $QUEUE_NO_CKPT_NAME $issue_2967_hosts 1 1
   del_queue $QUEUE_WITH_CKPT_NAME $issue_2967_hosts 1 1

   # restore config
   set_config issue_2967_backup

   # unset our test's global variables
   foreach var "issue_2967_hosts issue_2967_backup" {
      if {[info exists $var]} {
         unset $var
      }
   }
}


proc issue_2967_test {} {
   global ts_config CHECK_USER
   global issue_2967_hosts
   global CKPT_NAME CKPT_NAME_NO_REF NON_CKPT_NAME
   global QUEUE_WITH_CKPT_NAME

   # submit AR with non existing checkpoint object
   set ret_code [submit_ar "-ckpt $NON_CKPT_NAME -d 3600" "" "" 0]
   if {$ret_code != -59} {
      ts_log_severe "Unexpected error. AR should be rejected due to non existing ckpt."
   }

   # submit AR with existing checkpoint object but not referenced in any queue
   set ret_code [submit_ar "-ckpt $CKPT_NAME_NO_REF -d 3600" "" "" 0]
   if {$ret_code != -60} {
      ts_log_severe "Unexpected error. AR should be rejected due to no suitable queue."
   }

   # submit AR with existing checkpoint object referencing in a queue
   set ret_code [submit_ar "-ckpt $CKPT_NAME -d 3600" "" "" 0]
   if {$ret_code <= 0} {
      ts_log_severe "Unexpected error. AR should be granted."
   }

   # try to delete checkpoint object
   set ret_code [del_ckpt $CKPT_NAME "" "" 0]
   if {$ret_code != -2} {
      ts_log_severe "Unexpected error. Checkpoint interface could't be removed due to reference in queue."
   }

   # try to modify queue which references checkpoint
   set arr(ckpt_list) "NONE"
   set ret_code [mod_queue $QUEUE_WITH_CKPT_NAME $issue_2967_hosts arr 1 "" "" 0]
   if {$ret_code != -8} {
      ts_log_severe "Unexpected error. Checkpoint interface could't be removed from the ckpt_list of queue."
   }

   # try to delete queue
   set ret_code [del_queue $QUEUE_WITH_CKPT_NAME $issue_2967_hosts 1 1 "" "" 0]
   if {$ret_code != -2} {
      ts_log_severe "Unexpected error. Queue couldn't be deleted due to existing AR."
   }

}
