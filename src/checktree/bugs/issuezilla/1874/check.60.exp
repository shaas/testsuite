#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions check_errno check_errstr check_highest_level
global check_init_level_procedure check_category
global check_root_access_needs
global stree tmp_name

# setup and cleanup functions
set check_cleanup_function issue_1874_cleanup

set check_init_level_procedure "issue_1874_init_level"

set check_category            "COMPATIBILITY SYSTEM VERIFIED"
set check_name                "issue_1874"
set check_description(0)      "qconf -mstree aborts"
set check_needs               "init_core_system"      ;# dependencies of this check (name of other check)
set check_root_access_needs   "no"

# setup and cleanup functions
set check_setup_function "issue_1874_setup"
set check_cleanup_function "issue_1874_cleanup"

# define test's procedure order
set check_functions           ""
lappend check_functions       "issue_1874_run"   ;# functions to call (in order)

set check_highest_level       0

#
set my_pid [pid]
set tmp_name "/tmp/tmp1874.$my_pid"

#
# Scenario:
#     setup:
#        create prj 1874_prj
#        create usr 1874_usr1
#        create usr 1874_usr2
#        create sharetree with a root node for prj 1874_prj
#
#     run:
#        create a sharetree (using qconf -mstree) with the root node 1874_prj
#           and two subnodes for 1874_usr1 and 1874_usr2
#        => if this failes the bug is still present
#
#     cleanup:
#        destroy sharetree
#        destroy prj 1874_prj
#        destroy user 1874_usr2
#        destroy user 1874_usr1
#

proc issue_1874_init_level {} {
   global CHECK_ACT_LEVEL ts_config

   # setup levels 
   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }
   return -1  ;# no other level else
}

proc issue_1874_setup  {} {
   global ts_config CHECK_OUTPUT CHECK_PRODUCT_ROOT CHECK_ARCH CHECK_USER
   global stree tmp_name

   # add project
   set object(name) "1874_prj1"
   set result [ add_prj object ]

   # add user
   set object(name) "1874_usr1"
   set result [ add_user object ]
   set object(name) "1874_usr2"
   set result [ add_user object ]

   # create file containing sharetree
   create_stree1_1874
   set f [ open "$tmp_name" w ]
   puts $f $stree
   close $f
   # create sharetree
   set output [start_remote_prog "$ts_config(master_host)" "$CHECK_USER" "qconf" "-Mstree $tmp_name"]

   set_error 0 "ok"
}

proc issue_1874_cleanup  {} {
   global ts_config CHECK_OUTPUT CHECK_PRODUCT_ROOT CHECK_ARCH CHECK_USER
   global stree tmp_name

   # delete sharetree
   del_sharetree
   # add user
   set result [ del_user "1874_usr1" ]
   set result [ del_user "1874_usr2" ]
   # remove project 
   set result [ del_prj "1874_prj1" ]

   set_error 0 "ok"
}

proc create_stree1_1874 {} {
   global stree

   set stree ""
   set stree "${stree}id=0\n"
   set stree "${stree}name=1874_prj1\n"
   set stree "${stree}type=0\n"
   set stree "${stree}shares=1\n"
   set stree "${stree}childnodes=NONE\n"
}

proc create_stree2_1874 {} {
   global stree

   set stree ""
   set stree "${stree}id=0\n"
   set stree "${stree}name=1874_prj1\n"
   set stree "${stree}type=0\n"
   set stree "${stree}shares=1\n"
   set stree "${stree}childnodes=1,2\n"
   set stree "${stree}id=1\n"
   set stree "${stree}name=1874_usr1\n"
   set stree "${stree}type=0\n"
   set stree "${stree}shares=1\n"
   set stree "${stree}childnodes=NONE\n"
   set stree "${stree}id=2\n"
   set stree "${stree}name=1874_usr2\n"
   set stree "${stree}type=0\n"
   set stree "${stree}shares=1\n"
   set stree "${stree}childnodes=NONE\n"
}

proc issue_1874_run  {} {
   global ts_config CHECK_USER CHECK_HOST CHECK_PRODUCT_ROOT CHECK_OUTPUT
   global CHECK_ARCH
   global stree tmp_name


   # create file containing sharetree
   create_stree2_1874

   # build vi commands for the qconf -mstree
   set vi_commands ""

   foreach line $stree {
      lappend vi_commands "GA${line}[format "%c" 27]"
   }
   lappend vi_commands "1Gdddddddddd"
   set CHANGED_SHARETREE [translate $CHECK_HOST 1 0 0 [sge_macro MSG_TREE_CHANGEDSHARETREE]]
   set CAN_T_READ [translate $CHECK_HOST 1 0 0 [sge_macro MSG_QCONF_CANTREADSHARETREEX_S] "*"]

   set result [ handle_vi_edit "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf" "-mstree" $vi_commands $CHANGED_SHARETREE ]
   
   if { $result != 0 } {
      add_proc_error "issue_1874_run" -1 "qconf failed: issue might 1874 exists"
   }

   set_error 0 "ok"
}
