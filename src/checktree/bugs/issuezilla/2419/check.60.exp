#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs

#set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_2419_init_level"

# define test's name and run level descriptions
set check_name            "issue_2419"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "compare usage output of qstat -ext, qstat -ext -g t, qstat -j"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function issue_2419_setup
set check_cleanup_function issue_2419_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "issue_2419_test"

proc issue_2419_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc issue_2419_setup {} {
   global ts_config
   global issue_2419_backup issue_2419_hosts

   # our test host - exclude all archs where we don't get online usage
   set excluded "aix43 hp11 hp11-64 win32-x86"
   if {$ts_config(gridengine_version) < 61} {
      lappend excluded "darwin"
   }
   set issue_2419_hosts [host_conf_get_suited_hosts 1 "" "" $excluded]

   # we want to modify the global config - make a backup
   get_config issue_2419_backup

   # set SHARETREE_RESERVED_USAGE
   set config(execd_params) "SHARETREE_RESERVED_USAGE=1"
   set_config_and_propagate config

   # create a tight pe
   set pe(slots)              4
   set pe(user_lists)         none
   set pe(xuser_lists)        none
   set pe(start_proc_args)    none
   set pe(stop_proc_args)     none
   set pe(allocation_rule)    "\$round_robin"
   set pe(control_slaves)     TRUE
   set pe(job_is_first_task)  FALSE
   add_pe "tight" pe

   # create a queue referencing the tight pe
   set queue(pe_list)         "tight"
   set queue(slots)           5
   add_queue "tight" $issue_2419_hosts queue
}

proc issue_2419_cleanup {} {
   global ts_config
   global issue_2419_backup issue_2419_hosts

   delete_all_jobs
   wait_for_end_of_all_jobs

   # restore config
   reset_config_and_propagate issue_2419_backup

   # delete queue and pe
   del_queue "tight" "" 1 1
   del_pe "tight"

   # unset our test's global variables
   foreach var "issue_2419_backup issue_2419_hosts"  {
      if {[info exists $var]} {
         unset $var
      }
   }
}


proc issue_2419_test {} {
   global ts_config CHECK_USER

   # start a tightly integrated parallel job
   set options "-pe tight 4 -o /dev/null -j y"
   set args "$ts_config(testsuite_root_dir)/scripts/pe_job.sh $ts_config(testsuite_root_dir)/scripts/pe_task.sh 1 120"
   set job_id [submit_job "$options $args"]

   if {$job_id <= 0} {
      # submission failed - error has been raised in submit_job
      return
   }

   # wait for some substantial usage to show up
   trigger_scheduling
   set job_ok 0
   set timeout [expr [timestamp]  + 60]
   while {[timestamp] < $timeout} {
      get_extended_job_info $job_id
      if {$job_info(cpu) > 60} {
         set job_ok 1
         break
      }
      after 1000
   }

   if {!$job_ok} {
      ts_log_severe "didn't get usage information for the test job within one minute runtime"
      delete_job $job_id 1
      return
   }

   # now call qstat -j and qstat -ext -g t
   # we should get the data from the same job report
   get_extended_job_info $job_id job_info_grouped 1 1
   get_qstat_j_info $job_id

   set cpu_ext $job_info(cpu)
   set cpu_ext_gt $job_info_grouped(cpu)

   # parse qstat -j usage string
   # cpu=00:01:33, mem=0.00000 GBs, io=0.00000, vmem=N/A, maxvmem=56.980M
   set usage $qstat_j_info(usage    1)
   set usage_split [split $usage ","]
   set cpu_raw [string trim [lindex $usage_split 0]]
   set cpu_split [split $cpu_raw "="]
   set cpu_j [transform_cpu [lindex $cpu_split 1]]

   # compare usage information shown by different flavors of qstat
   if {$cpu_ext != $cpu_ext_gt || $cpu_ext != $cpu_j} {
      ts_log_severe "got different usage information from qstat:\n\
                            qstat -ext:      $cpu_ext\n\
                            qstat -ext -g t: $cpu_ext_gt\n\
                            qstat -j       : $cpu_j"
   }

   # cleanup
   delete_job $job_id 1
}

