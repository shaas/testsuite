#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env
global ts_user_config

# we need root access 
set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_193_init_level"

# define test's name and run level descriptions
set check_name            "issue_193"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "qmod -r should be allowed for operators also"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function "issue193_setup"
set check_cleanup_function "issue193_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "issue193_submit_jobs"
lappend check_functions "issue193_checkpointing"
lappend check_functions "issue193_checkpointing_forced"
lappend check_functions "issue193_pe_jobs"
lappend check_functions "issue193_deleted_job"

# -------- local test procedures -----------------------------------------------
global rerun_queue rerun_queue2
set rerun_queue    "re_true.q"
set rerun_queue2   "re_true2.q"

global no_rerun_queue
set no_rerun_queue "resch_false.q"

global rerun_host no_rerun_host
global stored_configuration
global pe_names pe_alloc_rule
set pe_names      ""
set pe_alloc_rule ""
lappend pe_names      "reschpe_1" 
lappend pe_alloc_rule "1"
lappend pe_names      "reschpe_2" 
lappend pe_alloc_rule "2"
lappend pe_names      "reschpe_rr" 
lappend pe_alloc_rule "\$round_robin"
lappend pe_names      "reschpe_fill" 
lappend pe_alloc_rule "\$fill_up"


proc issue_193_init_level {} {
   global ts_config CHECK_OUTPUT check_name
   global CHECK_ACT_LEVEL hold_state pending_state queue
   global rerun_host no_rerun_host

   if {$CHECK_ACT_LEVEL == 0} {
      if {[llength $ts_config(execd_nodes)] < 2} {
         puts $CHECK_OUTPUT "need at least 2 execd hosts for check $check_name"
         return -1
      }

      set rerun_host    [ lindex $ts_config(execd_nodes) 0  ]
      set no_rerun_host [ lindex $ts_config(execd_nodes) 1  ]

      return 0
   }

   return -1  ;# no other level else
}

proc issue193_setup {} {
   global ts_config pe_names pe_alloc_rule ts_user_config
   global rerun_queue no_rerun_queue CHECK_OUTPUT rerun_host no_rerun_host
   global stored_configuration rerun_queue2

   set schedd_config(schedule_interval) "0:0:4"
   set_schedd_config schedd_config

   if { [info exists stored_configuration] } {
      unset stored_configuration
   }
   get_config stored_configuration
   set myconfig(load_report_time) "00:00:6"
   set_config myconfig

   puts $CHECK_OUTPUT "disabling all cluster queues"
   foreach host $ts_config(execd_nodes) {
      disable_queue [get_queue_instance "all.q" $host]
   }

   puts $CHECK_OUTPUT "adding $ts_user_config(first_foreign_user) as operator"
   if {[add_operator $ts_user_config(first_foreign_user)] != 0} {
      add_proc_error "issue193_setup" -2 "Unable to add operator $ts_user_config(first_foreign_user)"
   }

   puts $CHECK_OUTPUT "using host \"$rerun_host\" for queue with rerun=TRUE"
   puts $CHECK_OUTPUT "using host \"$no_rerun_host\" for queue with rerun=FALSE"

   set new_queue(rerun)    "TRUE"
   set new_queue(qtype)    "BATCH INTERACTIVE PARALLEL CHECKPOINTING"
   set new_queue(load_thresholds) "np_load_avg=8.00"
   set new_queue(slots)    "100"

   add_queue $rerun_queue $rerun_host new_queue
 
   add_queue $rerun_queue2 $no_rerun_host new_queue

   set new_queue(rerun)    "FALSE"

   add_queue $no_rerun_queue  $no_rerun_host new_queue

   # add checkpointobject for test
   puts $CHECK_OUTPUT "creating checkpointobjects ..."
   set new_checkpointobj(ckpt_name)  "qmod_with_r"
   set new_checkpointobj(interface)  "userdefined"
   set new_checkpointobj(when) "r"
   add_checkpointobj "new_checkpointobj"
   assign_queues_with_ckpt_object $rerun_queue $rerun_host qmod_with_r

   set new_checkpointobj(ckpt_name)  "qmod_without_r"
   set new_checkpointobj(when) "s"
   add_checkpointobj "new_checkpointobj"
   assign_queues_with_ckpt_object $rerun_queue $rerun_host qmod_without_r

   # add pe_object for test
   puts $CHECK_OUTPUT "creating pe object ..."
   set new_peobj(slots)            "5"
   set index 0
   foreach elem $pe_names { 
      set new_peobj(pe_name) $elem
      set new_peobj(allocation_rule) [lindex $pe_alloc_rule $index]
      incr index 1
      add_pe new_peobj
      assign_queues_with_pe_object $rerun_queue2 $no_rerun_host $new_peobj(pe_name)
      assign_queues_with_pe_object $rerun_queue $rerun_host $new_peobj(pe_name)
   } 

   set_error 0 "ok"
}


proc issue193_submit_jobs {} {
   global rerun_queue no_rerun_queue CHECK_OUTPUT rerun_host no_rerun_host
   global CHECK_PRODUCT_ROOT CHECK_ARCH
   global CHECK_HOST ts_user_config
  
   set jobs ""
   set my_outputs "-o /dev/null -e /dev/null"
   set arguments "$my_outputs -q [get_queue_instance $rerun_queue $rerun_host] -r y $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]
   
   set arguments "$my_outputs -q [get_queue_instance $rerun_queue $rerun_host] -r n $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [ submit_job $arguments ]

   set arguments "$my_outputs -q [get_queue_instance $rerun_queue $rerun_host] $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [ submit_job $arguments ]

   set arguments "$my_outputs -q [get_queue_instance $no_rerun_queue $no_rerun_host] -r n $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [ submit_job $arguments ]

   set arguments "$my_outputs -q [get_queue_instance $no_rerun_queue $no_rerun_host] -r y $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [ submit_job $arguments ]
 
   set arguments "$my_outputs -q [get_queue_instance $no_rerun_queue $no_rerun_host] $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [ submit_job $arguments ]

   set jobs_string ""
   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 30
      wait_for_end_of_transfer $elem 30
      append jobs_string "$elem "
   }
   # JG: TODO: here should be some error handling, in case not all jobs start running

   puts $CHECK_OUTPUT "running jobs: $jobs_string"

   puts $CHECK_OUTPUT "disabling queues $no_rerun_queue and $rerun_queue"
   disable_queue [get_queue_instance $no_rerun_queue $no_rerun_host]
   disable_queue [get_queue_instance $rerun_queue $rerun_host]

   # send qmod -r to each job
   puts $CHECK_OUTPUT "sending qmod -r to jobs $jobs_string"   
   set result [start_sge_bin "qmod" "-r $jobs_string" "" $ts_user_config(first_foreign_user)]
   puts $CHECK_OUTPUT "qmod -r output: $result"

   set sched_jobs    "[lindex $jobs 0] [lindex $jobs 2] [lindex $jobs 4 ]"
   set no_sched_jobs "[lindex $jobs 1] [lindex $jobs 3] [lindex $jobs 5 ]"
   puts $CHECK_OUTPUT "jobs $sched_jobs should be pending ..."
   foreach elem $sched_jobs {
      wait_for_jobpending $elem "Sleeper" 60
   }
   
   puts $CHECK_OUTPUT "jobs $no_sched_jobs should still run ..."
   foreach elem $no_sched_jobs {
      wait_for_jobstart $elem "Sleeper" 60
   }

   set qmod_arg [lindex $jobs 1]
   puts $CHECK_OUTPUT "using force flag for job $qmod_arg ..."
   set result [start_sge_bin "qmod" "-f -r $qmod_arg" "" $ts_user_config(first_foreign_user)]
   puts $CHECK_OUTPUT $result
   puts $CHECK_OUTPUT "waiting for job $qmod_arg to get in pending state ..."
   wait_for_jobpending $qmod_arg "Sleeper" 300

   enable_queue [get_queue_instance $no_rerun_queue $no_rerun_host]
   enable_queue [get_queue_instance $rerun_queue $rerun_host]

   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 60
      wait_for_end_of_transfer $elem 60
   }

   
   puts $CHECK_OUTPUT "disabling queues $no_rerun_queue and $rerun_queue"
   disable_queue [get_queue_instance $no_rerun_queue $no_rerun_host]
   disable_queue [get_queue_instance $rerun_queue $rerun_host]

   # send qmod -r to each job in queue 
   puts $CHECK_OUTPUT "sending qmod -r to queues $no_rerun_queue and $rerun_queue"   
   set result [start_sge_bin "qmod" "-r [get_queue_instance $no_rerun_queue $no_rerun_host] [get_queue_instance $rerun_queue $rerun_host]" "" $ts_user_config(first_foreign_user)]
   puts $CHECK_OUTPUT $result

   puts $CHECK_OUTPUT "jobs $sched_jobs should be pending ..."
   foreach elem $sched_jobs {
      wait_for_jobpending $elem "Sleeper" 60
   }
   
   puts $CHECK_OUTPUT "jobs $no_sched_jobs should still run ..."
   foreach elem $no_sched_jobs {
      wait_for_jobstart $elem "Sleeper" 60
   }

   set qmod_arg [lindex $jobs 1]
   puts $CHECK_OUTPUT "using force flag for job $qmod_arg ..."
   set result [start_sge_bin "qmod" "-f -r $qmod_arg" "" $ts_user_config(first_foreign_user)]
   puts $CHECK_OUTPUT $result
   puts $CHECK_OUTPUT "waiting for job $qmod_arg to get in pending state ..."
   wait_for_jobpending $qmod_arg "Sleeper" 60
   
   enable_queue [get_queue_instance $no_rerun_queue $no_rerun_host]
   enable_queue [get_queue_instance $rerun_queue $rerun_host]

   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 60
      wait_for_end_of_transfer $elem 60
   }

   # cleanup jobs
   foreach elem $jobs {
      delete_job $elem
      wait_for_jobend $elem "Sleeper" 60 0
   }
   set_error 0 "ok"
}


proc issue193_checkpointing {} {
   global rerun_queue no_rerun_queue CHECK_OUTPUT rerun_host no_rerun_host
   global CHECK_PRODUCT_ROOT CHECK_ARCH
   global CHECK_HOST ts_user_config
   
   set jobs ""
   set my_outputs "-o /dev/null -e /dev/null"
   set arguments "$my_outputs -ckpt qmod_with_r $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]
   
   set arguments "$my_outputs -ckpt qmod_without_r $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [ submit_job $arguments ]

   set arguments "$my_outputs -ckpt qmod_with_r -r n $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]
   
   set arguments "$my_outputs -ckpt qmod_without_r -r y $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [ submit_job $arguments ]

   set jobs_string ""
   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 80
      wait_for_end_of_transfer $elem 80
      append jobs_string "$elem "
   }

   puts $CHECK_OUTPUT "running jobs: $jobs_string"

   puts $CHECK_OUTPUT "disabling queue $rerun_queue"
   disable_queue [get_queue_instance $rerun_queue $rerun_host]
   
   # send qmod -r to each job
   puts $CHECK_OUTPUT "sending qmod -r to jobs $jobs_string"   
   set result [start_sge_bin "qmod" "-r $jobs_string" "" $ts_user_config(first_foreign_user)]
   puts $CHECK_OUTPUT $result
  
   set sched_jobs    "[lindex $jobs 0]"
   set no_sched_jobs "[lindex $jobs 1] [lindex $jobs 2] [lindex $jobs 3]"
   puts $CHECK_OUTPUT "jobs $sched_jobs should be pending ..."
   foreach elem $sched_jobs {
      wait_for_jobpending $elem "Sleeper" 80
   }
   
   puts $CHECK_OUTPUT "jobs $no_sched_jobs should still run ..."
   foreach elem $no_sched_jobs {
      wait_for_jobstart $elem "Sleeper" 80
   }

   enable_queue [get_queue_instance $rerun_queue $rerun_host]
   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 80
      wait_for_end_of_transfer $elem 80
   }
   
   puts $CHECK_OUTPUT "disabling queue $rerun_queue"
   disable_queue [get_queue_instance $rerun_queue $rerun_host]

   # send qmod -r to each job in queue 
   puts $CHECK_OUTPUT "sending qmod -r to queue $rerun_queue"   
   set result [start_sge_bin "qmod" "-r [get_queue_instance $rerun_queue $rerun_host]" "" $ts_user_config(first_foreign_user)]
   puts $CHECK_OUTPUT $result

   puts $CHECK_OUTPUT "jobs $sched_jobs should be pending ..."
   foreach elem $sched_jobs {
      wait_for_jobpending $elem "Sleeper" 80
   }
   
   puts $CHECK_OUTPUT "jobs $no_sched_jobs should still run ..."
   foreach elem $no_sched_jobs {
      wait_for_jobstart $elem "Sleeper" 80
   }

   enable_queue [get_queue_instance $rerun_queue $rerun_host]

   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 80
      wait_for_end_of_transfer $elem 80
   }

   # cleanup jobs
   foreach elem $jobs {
      delete_job $elem
      wait_for_jobend $elem "Sleeper" 80 0
   }
 
   set_error 0 "ok"
}


proc issue193_checkpointing_forced {} {
   global rerun_queue no_rerun_queue CHECK_OUTPUT rerun_host no_rerun_host
   global CHECK_PRODUCT_ROOT CHECK_ARCH
   global CHECK_HOST ts_user_config
 
   set jobs ""
   set my_outputs "-o /dev/null -e /dev/null"
   set arguments "$my_outputs -ckpt qmod_with_r $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]
   
   set arguments "$my_outputs -ckpt qmod_without_r $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [ submit_job $arguments ]

   set arguments "$my_outputs -ckpt qmod_with_r -r n $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]
   
   set arguments "$my_outputs -ckpt qmod_without_r -r y $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1000"
   lappend jobs [ submit_job $arguments ]

   set jobs_string ""
   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 80
      wait_for_end_of_transfer $elem 80
      append jobs_string "$elem "
   }

   puts $CHECK_OUTPUT "running jobs: $jobs_string"

   puts $CHECK_OUTPUT "disabling queue $rerun_queue"
   disable_queue [get_queue_instance $rerun_queue $rerun_host]
   
   # send qmod -r to each job
   puts $CHECK_OUTPUT "sending qmod -f -r to jobs $jobs_string"   
   set result [start_sge_bin "qmod" "-f -r $jobs_string" "" $ts_user_config(first_foreign_user)]
   puts $CHECK_OUTPUT $result
  
   set sched_jobs    "[lindex $jobs 0] [lindex $jobs 1] [lindex $jobs 2] [lindex $jobs 3]"
   set no_sched_jobs ""
   puts $CHECK_OUTPUT "jobs $sched_jobs should be pending ..."
   foreach elem $sched_jobs {
      wait_for_jobpending $elem "Sleeper" 80
   }
   
   puts $CHECK_OUTPUT "jobs $no_sched_jobs should still run ..."
   foreach elem $no_sched_jobs {
      wait_for_jobstart $elem "Sleeper" 80
   }

   enable_queue [get_queue_instance $rerun_queue $rerun_host]
   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 80
      wait_for_end_of_transfer $elem 80
   }
   
   puts $CHECK_OUTPUT "disabling queue $rerun_queue"
   disable_queue [get_queue_instance $rerun_queue $rerun_host]

   # send qmod -r to each job in queue 
   puts $CHECK_OUTPUT "sending qmod -f -r to queue $rerun_queue"   
   set result [start_sge_bin "qmod" "-f -r [get_queue_instance $rerun_queue $rerun_host]" "" $ts_user_config(first_foreign_user)]
   puts $CHECK_OUTPUT $result

   puts $CHECK_OUTPUT "jobs $sched_jobs should be pending ..."
   foreach elem $sched_jobs {
      wait_for_jobpending $elem "Sleeper" 80
   }
   
   puts $CHECK_OUTPUT "jobs $no_sched_jobs should still run ..."
   foreach elem $no_sched_jobs {
      wait_for_jobstart $elem "Sleeper" 80
   }

   enable_queue [get_queue_instance $rerun_queue $rerun_host]

   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 80
      wait_for_end_of_transfer $elem 80
   }

   # cleanup jobs
   foreach elem $jobs {
      delete_job $elem
      wait_for_jobend $elem "Sleeper" 80 0
   }
 
   set_error 0 "ok"
}

proc issue193_get_queue_instance { queue } {
   global rerun_queue no_rerun_queue rerun_queue2
   global rerun_host no_rerun_host

   if {[string first $rerun_queue $queue] >= 0} {
      return [get_queue_instance $rerun_queue $rerun_host]
   } else { 
      if {[string first $rerun_queue2 $queue] >= 0} {
         return [get_queue_instance $rerun_queue2 $no_rerun_host]
      } else {
         if {[string first $no_rerun_queue $queue] >= 0} {
            return [get_queue_instance $no_rerun_queue $no_rerun_host]
         } else {
            return "unknown"
         }
      }   
   }
}

proc issue193_pe_jobs {} {
   global rerun_queue no_rerun_queue CHECK_OUTPUT rerun_host no_rerun_host
   global stored_configuration rerun_queue2 pe_names
   global CHECK_PRODUCT_ROOT CHECK_ARCH
   global CHECK_HOST ts_user_config

   foreach pe $pe_names {
       puts $CHECK_OUTPUT "submitting job to pe $pe ..."
       set my_outputs "-o /dev/null -e /dev/null"
       set my_job "$CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 5000"
       set arguments "$my_outputs -pe $pe 2 -masterq [get_queue_instance $rerun_queue $rerun_host] $my_job"
       set job [submit_job $arguments]
       puts $CHECK_OUTPUT "job $job submitted"

       wait_for_jobstart $job "Sleeper" 100
       
       set mytime [ expr ( [timestamp] + 100 ) ]
       set run 1
       while { $run == 1 } {
          set master_queue ""
          set master_queue_instance ""
          set slave_queue ""
          set slave_queue_instance ""
          set job_info [get_standard_job_info $job 1 1]
          foreach elem $job_info {
             puts $CHECK_OUTPUT $elem
             if { [string first "MASTER" $elem ] >= 0 } {
                set master_queue [lindex $elem 7]
                set master_queue_instance [issue193_get_queue_instance $master_queue]
                puts $CHECK_OUTPUT "master runs on queue $master_queue"
             }
             if { [string first "SLAVE" $elem ] >= 0 } {
                set slave_queue [lindex $elem 7]
                # if MASTER and SLAVE are on same queue, the queue will not be 
                # output for the SLAVE
                if { $slave_queue == ""} {
                  set slave_queue $master_queue
                }
                set slave_queue_instance [issue193_get_queue_instance $slave_queue]
                puts $CHECK_OUTPUT "slave runs on queue $slave_queue"
             }
          }
          puts $CHECK_OUTPUT "-----------" 
          if { $master_queue != "" && $slave_queue != "" } {
             puts $CHECK_OUTPUT "MASTER and SLAVE task are running!"
             set run 0
          }
          set nowtime [timestamp]
          if { $nowtime > $mytime } {
             set run 0
             add_proc_error "reschedule_pe_jobs" -1 "timeout waiting for MASTER and SLAVE task of job $job, pe $pe"
          } 
          sleep 1
       }

       if { [string first $rerun_queue $master_queue] == -1 } {
          puts $CHECK_OUTPUT "\"$master_queue\"\n\"$rerun_queue\""
          add_proc_error "reschedule_pe_jobs" "-1" "job $job: master task is not on queue $rerun_queue, pe $pe"
       }
      
       if { [string compare $pe "reschpe_1"] == 0 } {
          if { [string first $rerun_queue2 $slave_queue] == -1 } {
             puts $CHECK_OUTPUT "\"$slave_queue\"\n\"$rerun_queue2\""
             add_proc_error "reschedule_pe_jobs" "-1" "job $job: slave task is not on queue $rerun_queue2, pe $pe"
          }
       }

       # ok jobs are running and we now his running queues now
       puts $CHECK_OUTPUT "disabling queue $rerun_queue and $rerun_queue2"
       disable_queue [get_queue_instance $rerun_queue $rerun_host]
       disable_queue [get_queue_instance $rerun_queue2 $no_rerun_host]

       if { [ string compare $slave_queue $master_queue ] != 0 } {
          puts $CHECK_OUTPUT "rescheduling SLAVE task queue \"$slave_queue\""     
          set result [start_sge_bin "qmod" "-r $slave_queue_instance" "" $ts_user_config(first_foreign_user)]
          puts $CHECK_OUTPUT $result

          sleep 10          

          puts $CHECK_OUTPUT "job $job should still run ..."
          wait_for_jobstart $job "Sleeper" 100
       } 
 
       puts $CHECK_OUTPUT "rescheduling MASTER task queue \"$master_queue\""     
       set result [start_sge_bin "qmod" "-r $master_queue_instance" "" $ts_user_config(first_foreign_user)]
       puts $CHECK_OUTPUT $result

       wait_for_jobpending $job "Sleeper" 100
       set run 1
       set job_info [get_standard_job_info $job 1 1]
       foreach elem $job_info {
          puts $CHECK_OUTPUT $elem
          if { [string first "MASTER" $elem ] >= 0 } {
             add_proc_error "reschedule_pe_jobs" -1 "no MASTER task should run, pe $pe"
          }
          if { [string first "SLAVE" $elem ] >= 0 } {
             add_proc_error "reschedule_pe_jobs" -1 "no SLAVE task should run, pe $pe"
          }
       } 

       puts $CHECK_OUTPUT "enable queue $rerun_queue and $rerun_queue2"
       enable_queue [get_queue_instance $rerun_queue $rerun_host]
       enable_queue [get_queue_instance $rerun_queue2 $no_rerun_host]
 
       if { [wait_for_jobstart $job "Sleeper" 45] == 0 } {
          set mytime [ expr ( [timestamp] + 45 ) ]
          set run 1
          set master_queue ""
          set slave_queue ""
          while { $run == 1 } {
             set job_info [get_standard_job_info $job 1 1]
             foreach elem $job_info {
                puts $CHECK_OUTPUT $elem
                if { [string first "MASTER" $elem ] >= 0 } {
                   set master_queue [lindex $elem 7]
                   puts $CHECK_OUTPUT "master runs on queue $master_queue"
                }
                if { [string first "SLAVE" $elem ] >= 0 } {
                   set slave_queue [lindex $elem 7]
                   # if MASTER and SLAVE are on same queue, the queue will not be 
                   # output for the SLAVE
                   if { $slave_queue == ""} {
                     set slave_queue $master_queue
                   }
                   puts $CHECK_OUTPUT "slave runs on queue $slave_queue"
                }
             } 
             if { $master_queue != "" && $slave_queue != "" } {
                puts $CHECK_OUTPUT "MASTER and SLAVE task are running!"
                set run 0
             }
             set nowtime [timestamp]
             if { $nowtime > $mytime } {
                set run 0
                add_proc_error "reschedule_pe_jobs" -1 "timeout waiting for MASTER and SLAVE task of job $job, pe $pe"
             } 
             sleep 1
          }
       } else {
          add_proc_error "reschedule_pe_jobs" -1 "job $job does not start, pe $pe"
       } 
       if { [is_job_running $job "Sleeper"] != 1 } {
          add_proc_error "issue193_pe_jobs" -1 "job $job is not running!!"
       }

       delete_job $job
       # wait for job without check if he is already running
       # ==> when job is faster deleted, wait_for_jobend will not find the job and
       #     report an error
       wait_for_jobend $job "Sleeper" 100 0
   }
   set_error 0 "ok"
}


proc issue193_deleted_job {} {
   global rerun_queue no_rerun_queue CHECK_OUTPUT rerun_host no_rerun_host
   global stored_configuration rerun_queue2
   global pe_names pe_alloc_rule CHECK_ADMIN_USER_SYSTEM
   global CHECK_PRODUCT_ROOT CHECK_PRODUCT_TYPE CHECK_ARCH
   global CHECK_ADMIN_USER_SYSTEM
   global CHECK_HOST ts_user_config

   if { [have_root_passwd] == -1 } {
      set_error -3 "root access required"
      return -3
   }
 
   puts $CHECK_OUTPUT "submitting job to queue $no_rerun_queue ..."
   set my_outputs "-o /dev/null -e /dev/null"
   set arguments "$my_outputs -q [get_queue_instance $no_rerun_queue $no_rerun_host] -r y $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 10000"
   set job_id [ submit_job $arguments ]

   wait_for_jobstart $job_id "Sleeper" 100
   wait_for_end_of_transfer $job_id 100

   # shutdown execd
   puts $CHECK_OUTPUT "shutdown execd on host $no_rerun_host ..."
   catch {exec $CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf -ke $no_rerun_host} output
   puts $output

   shutdown_system_daemon $no_rerun_host execd


   puts $CHECK_OUTPUT "deleting job $job_id ..."
   delete_job $job_id

   puts $CHECK_OUTPUT "job should still be in queue, but in delete state ..."
   if { [is_job_running $job_id "Sleeper"] != 1 } {
      add_proc_error "reschedule_deleted_job" -1 "job $job_id is not running!! (queue: $no_rerun_queue)"
   }

   # JG: TODO: this check must fail. We need more info here.
   # Write a function rerun_job, that deliveres a status (true, false) and an
   # error message.
   puts $CHECK_OUTPUT "reschedule of job $job_id ..."
   set result [start_sge_bin "qmod" "-r $job_id" "" $ts_user_config(first_foreign_user)]
   puts $CHECK_OUTPUT $result
 
   # restart execd
   puts $CHECK_OUTPUT "restarting execd on host $no_rerun_host ..."
   startup_execd $no_rerun_host
   wait_for_load_from_all_queues 200 

   wait_for_jobend $job_id "Sleeper" 300 0
   
   set_error 0 "ok"
}


proc issue193_cleanup {} {
   global ts_config
   global rerun_queue no_rerun_queue CHECK_OUTPUT rerun_host no_rerun_host
   global stored_configuration rerun_queue2
   global pe_names pe_alloc_rule ts_user_config

   delete_all_jobs

   reset_schedd_config
   set_config stored_configuration

   puts $CHECK_OUTPUT "removing checkpointobjects ..."
   del_checkpointobj "qmod_with_r"
   del_checkpointobj "qmod_without_r"

   foreach elem $pe_names { 
      del_pe $elem
   } 

   puts $CHECK_OUTPUT "removing queues ..."
   del_queue $rerun_queue $rerun_host 0 1
   del_queue $no_rerun_queue $no_rerun_host 0 1
   del_queue $rerun_queue2 $no_rerun_host 0 1

   puts $CHECK_OUTPUT "enabling queues ..."
   foreach host $ts_config(execd_nodes) {
      enable_queue [get_queue_instance "all.q" $host]
   }

   if {[delete_operator $ts_user_config(first_foreign_user)] != 0} {
      set_error -3 "Unable to delete operator $ts_user_config(first_foreign_user)"
   }

   set_error 0 "ok"
}
