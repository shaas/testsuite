#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global check_need_running_system

# define a level initialization procedure:
set check_init_level_procedure "issue_3094_init_level"

# define test's name and run level descriptions
set check_name            "issue_3094"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   3
set check_description(0)  "check cpu accounting without RESERVED_USAGE settings"
set check_description(1)  "check cpu accounting with only ACCT_RESERVED_USAGE set"
set check_description(2)  "check cpu accounting with only SHARETREE_RESERVED_USAGE set"
set check_description(3)  "check cpu accounting with both ACCT_RESERVED_USAGE and SHARETREE_RESERVED_USAGE set"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_level_function issue_3094_setup
set check_cleanup_level_function issue_3094_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "issue_3094_test"

proc issue_3094_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 -
      1 -
      2 -
      3 {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc issue_3094_setup {} {
   global ts_config
   global issue_3094_backup issue_3094_host
   global CHECK_ACT_LEVEL

   set issue_3094_host [host_conf_get_suited_hosts]

   # we want to modify the global config - make a backup
   get_config issue_3094_backup $issue_3094_host

   # depending on the runlevel, set execd_params
   set new_conf(load_report_time) "0:0:1"
   set execd_params ""
   if {[info exists issue_3094_backup(execd_params)] && 
       [string compare -nocase $issue_3094_backup(execd_params) "none"] != 0} {
      set execd_params "$issue_3094_backup(execd_params),"
   }
   switch -exact -- $CHECK_ACT_LEVEL {
      0 {
         ;# noop
      }
      1 {
         set new_conf(execd_params) "${execd_params}ACCT_RESERVED_USAGE=1"
      }
      2 {
         set new_conf(execd_params) "${execd_params}SHARETREE_RESERVED_USAGE=1"
      }
      3 {
         set new_conf(execd_params) "${execd_params}ACCT_RESERVED_USAGE=1,SHARETREE_RESERVED_USAGE=1"
      }
   }
   set_config_and_propagate new_conf $issue_3094_host
}

proc issue_3094_cleanup {} {
   global ts_config
   global issue_3094_backup issue_3094_host

   delete_all_jobs
   wait_for_end_of_all_jobs

   # standard reset config
   reset_config_and_propagate issue_3094_backup $issue_3094_host

   # unset our test's global variables
   foreach var "issue_3094_backup issue_3094_host" {
      if {[info exists $var]} {
         unset $var
      }
   }
}


proc issue_3094_test {} {
   global ts_config
   global CHECK_ACT_LEVEL
   global issue_3094_host

   # submit a sleeper job
   set run_time 30
   set job_args "-o /dev/null -j y -l h=$issue_3094_host"
   append job_args " $ts_config(product_root)/examples/jobs/sleeper.sh $run_time"
   set job_id [submit_job $job_args]
   if {$job_id <= 0} {
      # couldn't submit a job
      # error has already been reported in submit_job
      return
   }

   # wait for the job to be running
   trigger_scheduling
   if {[wait_for_jobstart $job_id "" 30] != 0} {
      # job doesn't start
      # error has been reported in wait_for_jobstart
      return
   }

   # get online cpu usage after 20 secs (> load report interval
   after 20000
   get_extended_job_info $job_id
   set online_cpu $job_info(cpu)

   # wait for job_end
   wait_for_jobend $job_id "" $run_time 0

   # get accounting
   get_qacct $job_id
   set acct_cpu $qacct_info(cpu)

   # check online/accounting cpu depending on runlevel
   switch -exact -- $CHECK_ACT_LEVEL {
      0 {
         set expected_online 0
         set expected_acct 0
      }
      1 {
         set expected_online 0
         set expected_acct $run_time
      }
      2 {
         set expected_online 15
         set expected_acct 0
      }
      3 {
         set expected_online 15
         set expected_acct $run_time
      }
   }

   if {$expected_online == 0} {
      if {$online_cpu > 1} {
         ts_log_severe "expected no significant online usage, but online usage was $online_cpu"
      }
   } else {
      if {$online_cpu < $expected_online} {
         ts_log_severe "expected an online cpu usage of at least $expected_online, but online cpu usage was $online_cpu"
      }
   }
   if {$expected_acct == 0} {
      if {$acct_cpu > 1} {
         ts_log_severe "expected no significant accounting cpu usage, but accounting cpu usage was $acct_cpu"
      }
   } else {
      if {$acct_cpu < $expected_acct} {
         ts_log_severe "expected an accounting cpu usage of at least $expected_acct, but accounting cpu usage was $acct_cpu"
      }
   }
}
