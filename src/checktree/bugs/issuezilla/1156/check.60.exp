#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global script_name
global report_name
global proc_id

#set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_1156_init_level"

# define test's name and run level descriptions
set check_name            "issue_1156"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "Test of issue 1156"
set check_description(1)  ""

# define test's dependencies
set check_needs           "init_core_system"

# setup and cleanup functions
set check_setup_function issue_1156_setup
set check_cleanup_function issue_1156_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "issue_1156_test1"

proc issue_1156_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc issue_1156_setup {} {
   global ts_config
   global CHECK_USER
   global CHECK_JOB_OUTPUT_DIR
   global script_name
   global report_name

   # create a script file to be executed by qsh -S <script>
   ts_log_fine "creating a script file to be executed by qsh -S <script>"
   set script_name "$CHECK_JOB_OUTPUT_DIR/issue_1156_qsh.csh"
   set report_name "$CHECK_JOB_OUTPUT_DIR/issue_1156_report.txt"
   set csh_path [get_binary_path $ts_config(master_host) "csh"]
   set f [open $script_name "w" "0755"]
   puts $f "#!$csh_path"
   puts $f "env >! $report_name"
   close $f

   # wait for host to appear on the remote host
   set result [wait_for_remote_file $ts_config(master_host) $CHECK_USER $script_name]
   if { $result != 0 } {
      ts_log_severe "script file doesnt exist"
      return -1
   }

   return 0
}

proc issue_1156_cleanup {} {
   global script_name
   global report_name
   global proc_id

   # cleanup
   ts_log_fine "cleaning up temporary files"
   file delete $script_name
   file delete $report_name
   close_spawn_process $proc_id

   # delete jobs
   delete_all_jobs
   wait_for_end_of_all_jobs
}

#****** issue_1156/check_env_output() ******
#
#  NAME
#     check_env_output -- check env output
#
#  SYNOPSIS
#     check_env_output { env_output }
#
#  FUNCTION
#     This procedure checks whether the output of env contains variable
#     hello=my=world and please=look=behind
#
#  INPUTS
#     env_output   - output of env command
#
#  RESULT
#     -1 error
#      0 ok
#
#  SEE ALSO
#*******************************
proc check_env_output { env_output } {
   # check whether the output of env contains variable hello=my=world
   ts_log_fine "checking whether the output of env contains variable hello=my=world"
   if {[string match "*hello=my=world*" $env_output] == 0} {
      ts_log_severe "output of env does not contain variable hello=my=world"
      return -1
   }

   # check whether the output of env contains variable please=look=behind
   ts_log_fine "checking whether the output of env contains variable please=look=behind"
   if {[string match "*please=look=behind*" $env_output] == 0} {
      ts_log_severe "output of env does not contain variable please=look=behind"
      return -1
   }

   return 0
}

proc issue_1156_test1 {} {
   global ts_config
   global CHECK_ACT_LEVEL
   global CHECK_DISPLAY_OUTPUT
   global CHECK_USER
   global script_name
   global report_name
   global proc_id

   if {$CHECK_ACT_LEVEL == 0} {
      ts_log_fine "this is the test for runlevel $CHECK_ACT_LEVEL"

      # execute "qrsh -v hello=my=world,please=look=behind env"
      ts_log_fine "executing qrsh -v hello=my=world,please=look=behind env"
      set report [start_sge_bin "qrsh" "-v hello=my=world,please=look=behind env"]
      if {$prg_exit_state != 0} {
         ts_log_severe "qrsh have failed:\n$result"
         return -1
      }

      # check whether the output of env contains variable hello=my=world and please=look=behind
      set result [check_env_output $report]
      if { $result != 0 } {
         return -1
      }

      # execute "qsh -v hello=my=world,please=look=behind -display $CHECK_DISPLAY_OUTPUT -S $script_name"
      ts_log_fine "starting qsh with display $CHECK_DISPLAY_OUTPUT script $script_name"
      set proc_id [open_remote_spawn_process $ts_config(master_host) $CHECK_USER qsh "-v hello=my=world,please=look=behind -display $CHECK_DISPLAY_OUTPUT -S $script_name"]
      set sp_id [ lindex $proc_id 1 ]

      # wait for host to appear on the remote host
      set result [wait_for_remote_file $ts_config(master_host) $CHECK_USER $report_name]
      if { $result != 0 } {
         ts_log_severe "script report file doesnt exist probably qsh failed (bad DISPLAY value, ...)"
         return -1
      }

      # read env report file
      ts_log_fine "reading env report file"
      set report ""
      set f [open $report_name "r"]
      while {[gets $f line] >= 0} {
         set report "$report\n$line"
      }
      close $f

      # check whether the output of env contains variable hello=my=world and please=look=behind
      set result [check_env_output $report]
      if { $result != 0 } {
         return -1
      }

      return 0
   }
}
