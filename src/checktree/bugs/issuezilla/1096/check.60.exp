#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions check_errno check_errstr check_highest_level
global check_init_level_procedure check_category
global check_root_access_needs

set check_init_level_procedure "issue_1096_init_level"

set check_category            "COMPATIBILITY SYSTEM VERIFIED"
set check_name                "issue_1096"
set check_description(0)      "qmaster cannot bind port below 1024 on Linux"
set check_needs               "init_core_system"      ;# dependencies of this check (name of other check)
set check_root_access_needs   "yes"
set check_functions           ""



# setup and cleanup functions
set check_cleanup_function "issue_1096_cleanup"

set check_functions           ""
lappend check_functions       "issue_1096_shutdown_master"
lappend check_functions       "issue_1096_run"
set check_highest_level       0

proc issue_1096_init_level {} {
   global CHECK_ACT_LEVEL ts_config

   switch -- $CHECK_ACT_LEVEL {
      "0"  {
         return 0
      }
   }

   return -1
}






proc issue_1096_shutdown_master {} {
   global ts_config CHECK_OUTPUT
   if { $ts_config(product_feature) == "csp" } {
      puts $CHECK_OUTPUT "this is csp system skipping shutdown of core system ..."
   } else {
      shutdown_core_system
   }
   set_error 0 "ok"
}
proc issue_1096_run {} {
   global ts_config  CHECK_OUTPUT CHECK_USER

   if { $ts_config(product_feature) == "csp" } {
      add_proc_error "issue_1096_run" -3 "This test does not work on csp systems"
   } else {
      puts $CHECK_OUTPUT "try to start qmaster on port $ts_config(reserved_port) ..."

      for { set i 0 } { $i < [llength $ts_config(unique_arch_nodes) ]  } { incr i 1 } {
         set act_host [lindex  $ts_config(unique_arch_nodes) $i]
         set arch [resolve_arch $act_host]

         if { $arch == "win32-x86" } {
            add_proc_error "issue_1096_run" -3 "Skipping win32-x86 architecture!" 
            continue
         }

         set qmaster_binary $ts_config(product_root)/bin/${arch}/sge_qmaster
         set qping_binary $ts_config(product_root)/bin/${arch}/qping

         puts $CHECK_OUTPUT "host $act_host: qmaster binary: \"$qmaster_binary\""
         set envlist(SGE_QMASTER_PORT) $ts_config(reserved_port)
         set envlist(SGE_TEST_SOCKET_BIND) "1"
         set output [start_remote_prog $act_host "root" $qmaster_binary "\nsleep 2" prg_exit_state 60 0 envlist 1 0 1]
         puts $CHECK_OUTPUT $output
         puts $CHECK_OUTPUT "exit state: $prg_exit_state"

         puts $CHECK_OUTPUT "try to qping qmaster ..."
         set tries 0
         while { 1 } {
            set output [start_remote_prog $act_host $CHECK_USER $qping_binary "-info $act_host $ts_config(reserved_port) qmaster 1" prg_exit_state 60 0 envlist 1 0 1]
            puts $CHECK_OUTPUT $output
            puts $CHECK_OUTPUT "exit state: $prg_exit_state"
            incr tries 1
            if { $prg_exit_state == 0 || $tries > 10 } {
               puts $CHECK_OUTPUT "ok"
               break
            } else {
               sleep 1
            }
         }

         if { $prg_exit_state != 0 } {
            add_proc_error "issue_1096_run" -1 "error starting qmaster with port $ts_config(reserved_port) on host $act_host"
         }

         shutdown_system_daemon $act_host qmaster 0
      }
   }
   set_error 0 "ok"
}


proc issue_1096_cleanup {} {
   global ts_config CHECK_OUTPUT
   if { $ts_config(product_feature) == "csp" } {
      puts $CHECK_OUTPUT "nothing to cleanup"
   } else {
      startup_core_system
   }
   set_error 0 "ok"
}
