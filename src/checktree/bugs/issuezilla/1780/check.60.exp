#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions check_highest_level
global check_init_level_procedure check_category
global check_root_access_needs
set check_init_level_procedure "issue_1780_init_level"

set check_category            "COMPATIBILITY SYSTEM VERIFIED"
set check_name                "issue_1780"
set check_description(0)      "qconf -mq disallows 2057 hostspecific profiles in slots configuration"
set check_needs               "init_core_system"      ;# dependencies of this check (name of other check)
set check_root_access_needs   "no"

set check_cleanup_function "issue_1780_cleanup"

# define test's procedure order
set check_functions           ""
lappend check_functions       "issue_1780_run"   ;# functions to call (in order)
set check_highest_level       0

proc issue_1780_init_level {} {
   global CHECK_ACT_LEVEL

   # setup levels 
   switch -- $CHECK_ACT_LEVEL {
      "0"  {
         return 0
      }
   }

   return -1
}

proc issue_1780_run  {} {
   global ts_config CHECK_OUTPUT CHECK_USER

   set tmp_file [get_tmp_file_name]
   set arch [resolve_arch $ts_config(master_host)]


   puts $CHECK_OUTPUT "retrieving hosts via ypcat"
   set output [start_remote_prog $ts_config(master_host) $CHECK_USER "ypcat" "hosts" result]
   if {$result != 0} {
      add_proc_error "issue_1780_run" -3 "couldn't call ypcat - skipping this test:\n$output"
      return
   }

   set hostlist [split $output "\n"]
   set max_count 3000
   set count 0

   # skip hosts we already have in our cluster to avoid duplicate entries
   foreach host $ts_config(execd_nodes) {
      set valid_hosts($host) 0
   }

   # write queue config to temporary file
   puts $CHECK_OUTPUT "creating queue config file"
   set f [open "$tmp_file" w]

   puts $f "qname\t3000_hosts.q"
   puts $f "slots\t10,\\"
   foreach host $hostlist {
      if {[regexp {^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}[ \t]+([a-zA-Z0-9.-]+)} $host match hostname] == 1} {
         if {[info exists valid_hosts($hostname)] != 1} {
            incr count

            if {$count == $max_count} {
               puts $f "\[$hostname=1\]"
            } else {
               puts $f "\[$hostname=1\],\\"
            }

            set valid_hosts($hostname) 1

            if {$count >= $max_count} {
               break
            }
         }
      }
   }

   close $f

   if {$count < $max_count} {
      add_proc_error "issue_1780" -3 "unable to add enough hosts to test issue 1780"
      return
   }

   puts $CHECK_OUTPUT "Adding $count hosts via \"qconf -Aq $tmp_file\""
   # Test that the queue can be modified.  We're not actually testing
   # whether the modification works.  We're just looking for seg faults in
   # qconf.
   set result [start_remote_prog $ts_config(master_host) $CHECK_USER "$ts_config(product_root)/bin/$arch/qconf" "-sq all.q | grep -v slots | grep -v qname >> $tmp_file" exit_code]
   
   # Time how long the addition of the queues takes.
   set start_time [timestamp]
   
   set result [start_remote_prog $ts_config(master_host) $CHECK_USER "$ts_config(product_root)/bin/$arch/qconf" "-Aq $tmp_file" exit_code 610]
   
   set total_time [expr [timestamp]- $start_time]
   puts $CHECK_OUTPUT "the time qconf took to add 3000 hosts was $total_time seconds "
   
   if {$exit_code != 0} {
      add_proc_error "issue_1780_run" -1 "qconf -Mconf with huge amout of host entries broken:\n$result"
   }
   
   sleep 5
   
   set qstat_timeout 10
   # Start now qstat with a qstat_timeout seconds timeout
   set qstat_result [start_sge_bin "qstat" "" "" $CHECK_USER "" $qstat_timeout]
   if {$qstat_result != ""} {
      add_proc_error "issue_1780_run" -1 "qstat failed for queue with huge amount of host entries: \n$result"
   } else {
      puts $CHECK_OUTPUT "qstat was OK"
   }
      
   # Now submit a sleeper job, with "-q all.q" request,
   # and call wait_for_jobstart with a short timeout
   # and trigger scheduling
   
   set job_args "-o /dev/null -e /dev/null -j y -q  all.q $ts_config(product_root)/examples/jobs/sleeper.sh 20"
      
   set job_id [submit_job "$job_args"]
   set job_timeout 10
   wait_for_jobstart $job_id "leeper" $job_timeout 1 1
   
   delete_all_jobs
   wait_for_end_of_all_jobs 20

}

proc issue_1780_cleanup {} {
   del_queue 3000_hosts.q "" 0 1
}
