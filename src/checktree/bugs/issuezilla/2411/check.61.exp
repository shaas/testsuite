#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "no"

# define a level initialization procedure:
set check_init_level_procedure "issue_2411_init_level"

# define test's name and run level descriptions
set check_name            "issue_2411"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   1
set check_description(0)  "test case for IZ 2411 - 80 cluster queues"
set check_description(1)  "test case for IZ 2411 - 800 cluster queues"
set check_description(2)  "test case for IZ 2411 - 8000 cluster queues" ; # Do  not use this one until CR6638556 is fixed


# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function issue_2411_setup
set check_cleanup_function issue_2411_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "issue_2411" ;# Test case for IZ 2411


proc issue_2411_init_level {} {
   global CHECK_ACT_LEVEL max_count
   
   switch -- $CHECK_ACT_LEVEL {
      "0" {
         set max_count 80
         return 0 
      }
      "1" {
         set max_count 800
         return 0
      }
      "2" {
         set max_count 8000
         return -1
      }
      default {
         return -1
      }

   }
   
   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc issue_2411_setup {} {
   global CHECK_ACT_LEVEL
   global max_count
   
   # Add $max_count queues
   
   set count 1
   while { $count <= $max_count } {
      set queue_name "queue$count.q"
      set queue_conf(slots) 10 
      add_queue $queue_name "@allhosts" queue_conf 1
      incr   count 
   }
     
}

proc issue_2411_cleanup {} {
   global tcl_total_time
   global CHECK_ACT_LEVEL max_count  
   
   # Delete now  $max_count queues 
   
   set count 1
   while { $count <= $max_count } {
      set queue_name "queue$count.q"
      del_queue "$queue_name"  "" 1 1
      incr     count 
   }
      
   ts_log_fine "The tcl time qhost took to display $max_count hosts was\n$tcl_total_time seconds"
}

proc issue_2411  {} {
   global ts_config CHECK_USER tcl_total_time
   global max_count CHECK_ACTUAL_TEST_PATH  
   
   set arch [resolve_arch $ts_config(master_host)]  

   # Make  sure qhost does not time out
   set qhost_timeout 200
   
   set tcl_time 0.0
   
   # Start now qhost with a qhost_timeout seconds timeout 
   set tcl_start_time [timestamp]
   set qhost_result [start_sge_bin "qhost" "" "" $CHECK_USER "" $qhost_timeout]

   set tcl_total_time [expr [timestamp] - $tcl_start_time ]
   
   if { $qhost_result == "" } {
      ts_log_severe "qhost failed for a huge amount of cluster queues: \n$qhost_result"
      return
   } else {
     ts_log_fine "qhost was OK; it took $tcl_total_time seconds"
   }


}   
