#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions check_errno check_errstr check_highest_level
global check_init_level_procedure check_category
global check_root_access_needs
set check_init_level_procedure "issue_1359_init_level"

set check_category            "COMPATIBILITY SYSTEM VERIFIED"
set check_name                "issue_1359"
set check_description(0)      "qconf -\[MmAa\]stree crashes qmaster with dangling child references"
set check_needs               "init_core_system"      ;# dependencies of this check (name of other check)
set check_root_access_needs   "no"

# setup and cleanup functions

# define test's procedure order
set check_functions           ""
lappend check_functions       "issue_1359_run"
set check_highest_level       0

proc issue_1359_init_level {} {
   global CHECK_ACT_LEVEL ts_config

   # setup levels 
   switch -- $CHECK_ACT_LEVEL {
      "0"  { 
         return 0
      }
   }

   return -1
}

proc issue_1359_run  {} {
   global ts_config CHECK_ARCH CHECK_OUTPUT CHECK_USER
   global CHECK_PRODUCT_ROOT

   # prepare operation with file
   set tmp_file [get_tmp_file_name]
   # JG: TODO: are the tmp_files deleted automagically?
   set f [ open "$tmp_file" w ]
   puts $f "id=0"
   puts $f "name=Root"
   puts $f "type=0"
   puts $f "shares=0"
   puts $f "childnodes=1"
   close $f

   # localize messages
   set INVALID [translate $ts_config(master_host) 1 0 0 [sge_macro MSG_STREE_NOVALIDNODEREF_U] 1 ]

   # add by handling vi
   set vi_commands ""
   lappend vi_commands "/NONE\ncw1[format "%c" 27]"

   del_sharetree

   puts $CHECK_OUTPUT "Creating dangling child reference in sharetree with -astree"

   handle_vi_edit "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf" "-astree" $vi_commands $INVALID

   del_sharetree

   puts $CHECK_OUTPUT "Creating dangling child reference in sharetree with -mstree"

   handle_vi_edit "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf" "-mstree" $vi_commands $INVALID

   del_sharetree

   puts $CHECK_OUTPUT "Creating dangling child reference in sharetree with -Astree"

   set catch_result [catch { eval exec "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf -Astree $tmp_file" } result]
#   set result [ string trim $result ]

   if { [ string compare $result $INVALID ] == 0 } {
      set_error 0 "ok"
   } else {
      add_proc_error "issue_1359_run" "-1" "qconf allowed dangling child reference in sharetree: $result"
      set_error -1 "Issue 1359: qconf allowed dangling child reference in sharetree"
   }

   del_sharetree

   puts $CHECK_OUTPUT "Creating dangling child reference in sharetree with -Mstree"

   set catch_result [catch { eval exec "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf -Mstree $tmp_file" } result]
#   set result [ string trim $result ]

   if { [ string compare $result $INVALID ] == 0 } {
      set_error 0 "ok"
   } else {
      add_proc_error "issue_1359_run" "-1" "qconf allowed dangling child reference in sharetree: $result"
      set_error -1 "Issue 1359: qconf allowed dangling child reference in sharetree"
   }

   set_error 0 "ok"
}
