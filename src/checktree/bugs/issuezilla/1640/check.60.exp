#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

# set check_root_access_needs "yes"


# define a level initialization procedure:
set check_init_level_procedure "issue_1640_init_level"

# define test's name and run level descriptions
set check_name            "issue_1640"
set check_category        "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_highest_level   0
set check_description(0)  "check if qconf gets confused by shortcuts"

# define test's dependencies
set check_needs           "init_core_system" 


# setup and cleanup functions
set check_setup_function "issue_1640_setup"
set check_cleanup_function "issue_1640_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "issue_1640_test"

proc issue_1640_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------

proc issue_1640_setup  {} {
   global backup_global_host

   # backup the global host - we are going to modify it
   get_exechost backup_global_host "global"
}

proc issue_1640_cleanup  {} {
   global backup_global_host

   # restore global host
   set_exechost backup_global_host "global"
}

proc issue_1640_test {} {
   global ts_config

   #
   # Scenario:
   #     qconf -mattr exechost complex_values re=false global
   #     qconf -mattr exechost complex_values re=true global
   #
   # Bug exists if complex_values has the value 
   #     rerun=false,rerun=true
   #
   set result [start_sge_bin "qconf" "-mattr exechost complex_values re=false global"]
   if {$prg_exit_state != 0} {
      ts_log_severe "error: qconf -mattr exechost complex_values re=false global:\n$result"
      return
   }

   set result [start_sge_bin "qconf" "-mattr exechost complex_values re=true global"]
   if {$prg_exit_state != 0} {
      ts_log_severe "error: qconf -mattr exechost complex_values re=true global:\n$result"
      return
   }

   get_exechost global_host "global"
   set expected_output "rerun=true"
   if {$global_host(complex_values) != $expected_output} {
      ts_log_severe "IZ 1640 is present: qconf gets confused by shortcuts\ngot $global_host(complex_values)\nexpected $expected_output"
      return
   }
}

