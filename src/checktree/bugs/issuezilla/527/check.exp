#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

# set check_root_access_needs "yes"


# define a level initialization procedure:
set check_init_level_procedure "issue_527_init_level"

# define test's name and run level descriptions
set check_name "issue_527"
set check_category "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_highest_level 0
set check_description(0) "cannot qalter/qhold/qrls several tasks of same job"

# define test's dependencies
set check_needs "init_core_system" 

# setup and cleanup functions
set check_cleanup_function "issue_527_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "issue_527_check"

proc issue_527_init_level {} {
   global CHECK_ACT_LEVEL
   global CHECK_PRODUCT_TYPE
   global test_array_jobs 

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0    
      } 
   }

   return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------

proc issue_527_check {} {
   global CHECK_OUTPUT CHECK_PRODUCT_ROOT CHECK_ARCH CHECK_USER

   # submit one array task (hold) 
   set arguments "-h -t 1-3 $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 5"
   set job_id1 [ submit_job "$arguments" ]

   # remove hold from all tasks
   set command "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qrls ${job_id1}.1 ${job_id1}.2 ${job_id1}.3"
   set result [ catch { eval exec "$command" } qstatoutput ]
   if { ( $result == 1 ) } {
      add_proc_error "issue_527_check" "-1" "qrls failed => found bug #526"
      return
   } 

   # wait for the start of all tasks 
   puts $CHECK_OUTPUT "Waiting job start of all tasks ..."
   wait_for_jobstart $job_id1 "Sleeper" 20 1 1

   # wait for job termination
   wait_for_end_of_all_jobs 120

   set_error 0 "ok"
}

proc issue_527_cleanup  {} {
   global CHECK_OUTPUT

   delete_all_jobs
   wait_for_end_of_all_jobs 60

   set_error 0 "ok"
}

