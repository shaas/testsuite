#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs

#set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "issue_2418_init_level"

# define test's name and run level descriptions
set check_name            "issue_2418"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "qrsh -now no which is terminated before the job being scheduled may not set queue into error state"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function issue_2418_setup
set check_cleanup_function issue_2418_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "issue_2418_test"

proc issue_2418_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc issue_2418_setup {} {
   global ts_config

   # disable all queues
   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }
   disable_queue $queue_list
}

proc issue_2418_cleanup {} {
   global ts_config

   # cleanup
   delete_all_jobs 1
   wait_for_end_of_all_jobs
   
   # enable all queues again
   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }
   enable_queue $queue_list
}


proc issue_2418_test {} {
   global ts_config CHECK_USER

   # submit a qrsh job
   # we call qrsh through a wrapper that output's its pid,
   # as we want to kill the qrsh by pid later on
   set qrsh_submithost [host_conf_get_suited_hosts]
   set arch [resolve_arch $qrsh_submithost]
   set qrsh_id [open_remote_spawn_process $qrsh_submithost "ts_def_con" "$ts_config(testsuite_root_dir)/scripts/print_pid_and_exec.sh" "$ts_config(product_root)/bin/$arch/qrsh -verbose -now no $ts_config(product_root)/examples/jobs/sleeper.sh"]
   set sp_id [lindex $qrsh_id 1]

   # wait for the job to be submitted, parse qrsh pid and job id
   set JOB_SUBMITTED [translate_macro MSG_JOB_SUBMITJOB_US "*" "*"]
   set timeout 15
   expect {
      -i $sp_id eof {
         close_spawn_process $qrsh_id
         ts_log_severe "open_remote_spawn_process closed connection (eof)"
         return
      }
      -i $sp_id timeout {
         close_spawn_process $qrsh_id
         ts_log_severe "qrsh to host $host failed"
         return
      }
      -i $sp_id "my pid is *" {
         set pid [lindex $expect_out(0,string) 3]
         ts_log_fine "pid is $pid"
         exp_continue
      }
      -i $sp_id -- $JOB_SUBMITTED {
         set job_id [lindex $expect_out(0,string) 2]
         ts_log_fine "job_id is $job_id"
      }
   }

   get_extended_job_info $job_id
   if {![info exists job_info(state)] || $job_info(state) != "qw"} {
      close_spawn_process $qrsh_id
      ts_log_severe "submission of qrsh job seems to have failed"
      return
   }

   # kill -9 the qrsh client
   start_remote_prog $qrsh_submithost $CHECK_USER "kill" "-9 $pid"
   close_spawn_process $qrsh_id

   # wait a little bit, expect the job to be still there
   sleep 5
   get_extended_job_info $job_id
   if {![info exists job_info(state)] || $job_info(state) != "qw"} {
      ts_log_severe "qrsh job vanished when qrsh client was killed"
      return
   }

   # enable test queue, trigger scheduling
   set queue_name [get_queue_instance "all.q" $qrsh_submithost]
   enable_queue $queue_name
   trigger_scheduling

   # wait for the job to fail and to be deleted
   sleep 15
   get_extended_job_info $job_id
   if {[info exists job_info(state)]} {
      ts_log_severe "qrsh job $job_id is still arround - expected it to have vanished"
      delete_job $job_id
   }

   # check state of all queues - they may not be in error state
   set queue_state [get_queue_state $queue_name]
   if {[string first "E" $queue_state] >= 0} {
      ts_log_severe "queue $queue_name is in error state: $queue_state"
   }
}

