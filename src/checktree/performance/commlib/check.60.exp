#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_description check_needs check_functions check_highest_level
global check_init_level_procedure check_category check_root_access_needs

set check_init_level_procedure "commlib_perf_init_level"

set check_category            "COMPATIBILITY SYSTEM VERIFIED"
set check_name                "commlib"
set check_highest_level       2
set check_description(0)      "run virtual qmaster/1 static gdi per host"
set check_description(1)      "run virtual qmaster/1 static gdi per host/1 static evc"
set check_description(2)      "run virtual qmaster/1 static 1 reconnecting gdi per host/1 static evc"
set check_needs               "init_core_system"      ;# dependencies of this check (name of other check)
set check_root_access_needs   "yes"

# setup and cleanup functions
set check_setup_level_function   "cl_throughput_setup_level"
set check_cleanup_function "cl_throughput_cleanup"

# define test's procedure order
set check_functions           ""
lappend check_functions       "cl_throughput_shutdown_sge"
lappend check_functions       "cl_throughput_run"
lappend check_functions       "cl_throughput_analyze" 
lappend check_functions       "cl_throughput_startup_sge"

proc commlib_perf_init_level {} {
   global CHECK_ACT_LEVEL

   # if {$CHECK_ACT_LEVEL != 2} {
   #    return -1
   # }

   switch -- $CHECK_ACT_LEVEL {
      0 -
      1 -
      2 {
         return 0
      }
   }

   return -1
}

proc cl_throughput_setup_level {} {
   global CHECK_ACT_LEVEL CHECK_PROTOCOL_DIR ts_config
   global commlib_host_list step_list
   global cl_throughput_ge_version vqmaster_interval
   global cl_throughput_prot_output_dir
   global nr_event_clients nr_rgdi_clients nr_sgdi_clients

   set cl_throughput_ge_version [get_version_info] 
   set cl_throughput_prot_output_dir "$CHECK_PROTOCOL_DIR/commlib/level_$CHECK_ACT_LEVEL"

   set vqmaster_interval 10 

   set commlib_host_list $ts_config(execd_nodes)
   set nr_of_remote_hosts [llength $commlib_host_list]
   incr nr_of_remote_hosts -1

   # generate step list
   set step 1
   set step_list ""
   while 1 {
      lappend step_list $step
      set nstep [expr $step * 2]
      if {$nstep > $nr_of_remote_hosts} {
         break
      }
      set step $nstep
   }
   if {$step != $nr_of_remote_hosts} {
      lappend step_list $nr_of_remote_hosts
   }

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         set nr_event_clients 0 
         set nr_rgdi_clients 0
         set nr_sgdi_clients 1
      }
      "1" {
         set nr_event_clients 1
         set nr_rgdi_clients 0
         set nr_sgdi_clients 1
      }
      "2" {
         set nr_event_clients 1
         set nr_rgdi_clients 1
         set nr_sgdi_clients 1
      }
   }
   ts_log_fine "running test in runlevel $CHECK_ACT_LEVEL"
}

proc cl_throughput_cleanup {} {
   global ts_config 

   if {[is_qmaster_alive $ts_config(master_host) [get_qmaster_spool_dir]] == 0} {
      startup_core_system
   }
}

proc cl_throughput_shutdown_sge {} {
   # can not be done in setup routine because testsuite checks for loadvalues
   # before starting the test
   shutdown_core_system
}

proc cl_throughput_startup_sge {} {
   # can not be done in cleanup routine because testsuite checks for loadvalues
   # before starting the test
   startup_core_system
}

proc cl_throughput_start_clients {host count user binary args} {
   global ts_config
   upvar $args arguments

   # arguments of binary_starter: 1=count 2=binary 3=binary arguments
   set script_arguments "$count $binary \"$arguments\""
   set start_script "$ts_config(testsuite_root_dir)/scripts/binary_starter.sh"
   ts_log_fine "$user is starting \"$start_script $script_arguments\""
   set retval [start_remote_prog $host $user $start_script $script_arguments prg_exit_state 120 0]
   if {[string match "*not found*" $retval]} {
      add_proc_error "cl_throughput_start_clients" -1 "$retval"
   }
}

proc cl_throughput_parse_next {dline} {
   upvar $dline line
   set data ""

   set start [string first "|" $line]
   if {$start >= 0} {
      incr start 1
      set line [string range $line $start end]
      set next [string first "|" $line]
      incr next -1
      set data [string range $line 0 $next]
      set line [string range $line $next end]
   }
   return $data
}

proc cl_throughput_parse_result {nr_hosts dresult darray} {
   global cl_throughput_ge_version
   upvar $dresult result
   upvar $darray data

   set help [split $result "\n"]
   set ai 0
   for {set i 0} {$i < [llength $help]} {incr i} {
      set line [lindex $help $i]
      set next [cl_throughput_parse_next line]
      if {$next != ""} {
         set data($nr_hosts,$ai,time) $next
         set next [cl_throughput_parse_next line]
         set next [cl_throughput_parse_next line]
         set data($nr_hosts,$ai,rcv) $next
         set next [cl_throughput_parse_next line]
         set data($nr_hosts,$ai,rcv_sec) $next
         set next [cl_throughput_parse_next line]
         set next [cl_throughput_parse_next line]
         set next [cl_throughput_parse_next line]
         set data($nr_hosts,$ai,snd) $next
         set next [cl_throughput_parse_next line]
         set data($nr_hosts,$ai,snd_sec) $next
         set next [cl_throughput_parse_next line]
         set next [cl_throughput_parse_next line]
         set next [cl_throughput_parse_next line]
         set data($nr_hosts,$ai,evc_no) $next
         set next [cl_throughput_parse_next line]
         set data($nr_hosts,$ai,evc_no_sec) $next
         set next [cl_throughput_parse_next line]
         set next [cl_throughput_parse_next line]
         set next [cl_throughput_parse_next line]
         set data($nr_hosts,$ai,ev_snd) $next
         set next [cl_throughput_parse_next line]
         set data($nr_hosts,$ai,ev_snd_sec) $next
         set next [cl_throughput_parse_next line]
         set next [cl_throughput_parse_next line]
         set next [cl_throughput_parse_next line]
         set data($nr_hosts,$ai,rcv_buf) $next
         set next [cl_throughput_parse_next line]
         set next [cl_throughput_parse_next line]
         set data($nr_hosts,$ai,snd_buf) $next
         incr ai 1
      }
   }
   
# nr_hosts = nr of hosts 
# ai = nr of measured data lines
# 
# data(nr_hosts)
# data(lines)                       ai value
# data($nr_hosts,$ai,time)            run time
# data($nr_hosts,$ai,rcv)             nr of received gdi requests
# data($nr_hosts,$ai,rcv_sec)         received gdi requests 1/s
# data($nr_hosts,$ai,snd)             nr of sent gdi requests
# data($nr_hosts,$ai,snd_sec)         sent gdi requests  1/s
# data($nr_hosts,$ai,evc_no)          nr of connected event clients
# data($nr_hosts,$ai,evc_no_sec)      nr of sent events
# data($nr_hosts,$ai,ev_snd_sec)      sent events 1/s
# data($nr_hosts,$ai,rcv_buf)         messages in rcv buffer
# data($nr_hosts,$ai,snd_buf)         messages in snd buffer
# data(test_host)           vmaster host name
# data(test_hostlist)       host_list of remote hosts
# data(date)                date of text
# data(gridengine_version)  Grid engine Version   

   set data(lines) $ai
   set data(date) [exec date]
   set data(gridengine_version) $cl_throughput_ge_version

   set i $ai
   incr i -1
   ts_log_fine "parsed $ai output lines, test run took $data($nr_hosts,$i,time) seconds"
   if { $ai < $data(lines) } {
      add_proc_error "cl_throughput_parse_result" -1 "got not enough data lines"
   }
}


proc cl_throughput_plot_gdi {udata dir} {
   global CHECK_ACT_LEVEL check_description
   upvar $udata data

   set dc 0
   set p1 0
   set p2 1
   set p3 2 
   set p4 3

   set xyr($p1,drawmode) "lines"
   set xyr($p2,drawmode) "lines"
   set xyr($p3,drawmode) "lines"
   set xyr($p4,drawmode) "lines"

   set xyr($p1,title)    "gdi received requests 100/s"
   set xyr($p2,title)    "gdi send requests 100/s"
   set xyr($p3,title)    "events sent 1/s"
   set xyr($p4,title)    "event rate"

   set step_list $data(step_list)
   foreach runs $step_list {
      set last_row [expr $data(lines) - 2]
      set xyr($p1,$dc,x) $runs
      set xyr($p1,$dc,y) [expr $data($runs,$last_row,rcv_sec)/100]
      set xyr($p2,$dc,x) $runs
      set xyr($p2,$dc,y) [expr $data($runs,$last_row,snd_sec)/100]
      set xyr($p3,$dc,x) $runs
      set xyr($p3,$dc,y) $data($runs,$last_row,ev_snd_sec)
      set xyr($p4,$dc,x) $runs
      set xyr($p4,$dc,y) [expr $data($runs,$last_row,evc_no) * 60]
      incr dc 1
   }

   set plt_dat(xlabel) "nr of hosts"
   set plt_dat(ylabel) "1/s"
   set plt_dat(title) "vqmaster perf ($check_description($CHECK_ACT_LEVEL))"
   set plt_dat(output_file) "$dir/performance.gif"
   set xyr($p1,show) 1
   set xyr($p2,show) 1
   set xyr($p3,show) 1
   set xyr($p4,show) 1
   create_gnuplot_xy_gif plt_dat xyr
}

proc cl_throughput_plot_test_history {udata index local dir} {
   global
   upvar $udata history

   set pos1 0
   set pos2 1
   set pos3 2
   set pos4 3
   set pos5 4
   set pos6 5
   set pos7 6
   set pos8 7
   set pos9 8

   set xy_rows($pos1,drawmode) "linespoints"
   set xy_rows($pos1,title)    "avg. received gdi requests"
   set xy_rows($pos2,drawmode) "linespoints"
   set xy_rows($pos2,title)    "avg. sent gdi request"
   set xy_rows($pos3,drawmode) "linespoints"
   set xy_rows($pos3,title)    "avg. events sent"
   set xy_rows($pos4,drawmode) "linespoints"
   set xy_rows($pos4,title)    "avg. received gdi requests ( 1 evc / host )"
   set xy_rows($pos5,drawmode) "linespoints"
   set xy_rows($pos5,title)    "avg. sent gdi request (1 evc / host )"
   set xy_rows($pos6,drawmode) "linespoints"
   set xy_rows($pos6,title)    "avg. events sent (1 evc / host )"
   set xy_rows($pos7,drawmode) "linespoints"
   set xy_rows($pos7,title)    "avg. received gdi requests (1 gdi / host )"
   set xy_rows($pos8,drawmode) "linespoints"
   set xy_rows($pos8,title)    "avg. sent gdi request (1 gdi / host )"
   set xy_rows($pos9,drawmode) "linespoints"
   set xy_rows($pos9,title)    "avg. events sent (1 gdi / host )"
 
   for {set dr 0} {$dr < $index} {incr dr} {
      set xy_rows($pos1,$dr,x) $dr   
      set xy_rows($pos1,$dr,y) $history($local,$dr,all_gdi_rcv)   

      set xy_rows($pos2,$dr,x) $dr    
      set xy_rows($pos2,$dr,y) $history($local,$dr,all_gdi_snd)   
   
      set xy_rows($pos3,$dr,x) $dr    
      set xy_rows($pos3,$dr,y) $history($local,$dr,all_evc_snd)

      set xy_rows($pos4,$dr,x) $dr    
      set xy_rows($pos4,$dr,y) $history($local,$dr,1ec_gdi_rcv)

      set xy_rows($pos5,$dr,x) $dr    
      set xy_rows($pos5,$dr,y) $history($local,$dr,1ec_gdi_snd)

      set xy_rows($pos6,$dr,x) $dr    
      set xy_rows($pos6,$dr,y) $history($local,$dr,1ec_evc_snd)

      set xy_rows($pos7,$dr,x) $dr    
      set xy_rows($pos7,$dr,y) $history($local,$dr,1gc_gdi_rcv)

      set xy_rows($pos8,$dr,x) $dr    
      set xy_rows($pos8,$dr,y) $history($local,$dr,1gc_gdi_snd)

      set xy_rows($pos9,$dr,x) $dr    
      set xy_rows($pos9,$dr,y) $history($local,$dr,1gc_evc_snd)
      
   }
   set plot_data(xlabel) "test run"
   set plot_data(ylabel) "1/s"
   set plot_data(title) "historical virtual qmaster performance >$local<"
   set plot_data(output_file) "$dir/history_$local.gif"
   set xy_rows($pos1,show) 1
   set xy_rows($pos2,show) 1
   set xy_rows($pos3,show) 1
   set xy_rows($pos4,show) 1
   set xy_rows($pos5,show) 1
   set xy_rows($pos6,show) 1
   set xy_rows($pos7,show) 1
   set xy_rows($pos8,show) 1
   set xy_rows($pos9,show) 1

   create_gnuplot_xy_gif plot_data xy_rows
}


proc cl_throughput_analyze {} {
   global ts_config cl_throughput_prot_output_dir

   ts_log_fine "analyze output directory:"
   ts_log_fine "$cl_throughput_prot_output_dir"

   set files [get_file_names $cl_throughput_prot_output_dir "*.data"]
   set dirs  [get_dir_names $cl_throughput_prot_output_dir] 
   set history_index 0
   foreach file $files {
      set file_root_name [file rootname $file]
      set full_name "$cl_throughput_prot_output_dir/$file"
      ts_log_fine "dirs: $dirs"
      ts_log_fine "file: $file_root_name"
      if {[string match "*$file_root_name*" $dirs]} {
         ts_log_fine "skipping directory creation for file: $file"
         set do_report 0
      } else {
         ts_log_fine "creating analyze directory for file:\n$full_name"
         set do_report 1
         file mkdir $cl_throughput_prot_output_dir/$file_root_name
      }
      
      read_array_from_file $full_name "data" data
      ts_log_fine "virtual master host: $data(test_host)"
      ts_log_fine "client host list: $data(test_hostlist)"
      ts_log_fine "date: $data(date)"
      ts_log_fine "grid engine version: $data(gridengine_version)"
      ts_log_fine "measured data lines: $data(lines)"

      if {$do_report == 0} {
         ts_log_fine "skipping chart creation for file $file (analyze directory already exists)"
      } else {
         cl_throughput_plot_gdi data "$cl_throughput_prot_output_dir/$file_root_name"
      }

      if {$history_index != 0} {
         if { $last_master  != $data(test_host)     ||
              $last_clients != $data(test_hostlist) ||
              $last_lines   != $data(lines)
            } {
               # add_proc_error "cl_throughput_analyze" -3 "analyze data for history has changed since first test.\nPlease check test file $file. Skipping this test data file."
               continue
            } 
      } else {
         set last_master  $data(test_host)
         set last_clients $data(test_hostlist)
         set last_lines   $data(lines)
      }

if {0} {
      foreach elem "remote" {
         set test_runs 0
         set rcv_sum($elem) 0
         set snd_sum($elem) 0
         set evc_sum($elem) 0
         set max_ngc 0 
         set max_nec 0
         for {set nec $data(ne_start)} {$nec <= $data(ne_end)} {incr nec $data(ne_step)} {
            for {set ngc $data(ng_start)} {$ngc <= $data(ng_end)} {incr ngc $data(ng_step)} {
               set ai $data(lines)
               incr ai -1
               incr test_runs 1

               set rcv_sum($elem) [expr $rcv_sum($elem)  + $data($elem,$nec,$ngc,$ai,rcv_sec)]
               set snd_sum($elem) [expr $snd_sum($elem)  + $data($elem,$nec,$ngc,$ai,snd_sec)]
               set evc_sum($elem) [expr $evc_sum($elem)  + $data($elem,$nec,$ngc,$ai,ev_snd_sec)]

               if {$max_ngc < $ngc} {
                  set max_ngc $ngc
               } 
               if {$max_nec < $nec} {
                  set max_nec $nec
               }
            }
         }

         ts_log_fine "\n=== results of >$elem< test run ==="
         ts_log_fine "avg. received gdi requests \[1/s\]: [expr $rcv_sum($elem) / $test_runs]"
         ts_log_fine "avg. sent gdi request      \[1/s\]: [expr $snd_sum($elem) / $test_runs]"
         ts_log_fine "avg. events sent           \[1/s\]: [expr $evc_sum($elem) / $test_runs]"
         set history($elem,$history_index,all_gdi_rcv) [expr $rcv_sum($elem) / $test_runs]
         set history($elem,$history_index,all_gdi_snd) [expr $snd_sum($elem) / $test_runs]
         set history($elem,$history_index,all_evc_snd) [expr $evc_sum($elem) / $test_runs]
      }
      
      foreach elem "remote" {
         set test_runs 0
         set rcv_sum($elem) 0
         set snd_sum($elem) 0
         set evc_sum($elem) 0
         set nec $data(ne_start)
         for {set ngc $data(ng_start)} {$ngc <= $data(ng_end)} {incr ngc $data(ng_step)} {
            set ai $data(lines)
            incr ai -1
            incr test_runs 1

            set rcv_sum($elem) [expr $rcv_sum($elem) + $data($elem,$nec,$ngc,$ai,rcv_sec)]
            set snd_sum($elem) [expr $snd_sum($elem) + $data($elem,$nec,$ngc,$ai,snd_sec)]
            set evc_sum($elem) [expr $evc_sum($elem) + $data($elem,$nec,$ngc,$ai,ev_snd_sec)]
         }
         ts_log_fine "\n=== results of >$elem< test run ( with 1 event client ) ==="
         ts_log_fine "avg. received gdi requests \[1/s\]: [expr $rcv_sum($elem) / $test_runs]"
         ts_log_fine "avg. sent gdi request      \[1/s\]: [expr $snd_sum($elem) / $test_runs]"
         ts_log_fine "avg. events sent           \[1/s\]: [expr $evc_sum($elem) / $test_runs]"
         set history($elem,$history_index,1ec_gdi_rcv) [expr $rcv_sum($elem) / $test_runs]
         set history($elem,$history_index,1ec_gdi_snd) [expr $snd_sum($elem) / $test_runs]
         set history($elem,$history_index,1ec_evc_snd) [expr $evc_sum($elem) / $test_runs]
      }

      foreach elem "remote" {
         set test_runs 0
         set rcv_sum($elem) 0
         set snd_sum($elem) 0
         set evc_sum($elem) 0
          
         set ngc $data(ng_start)
         for {set nec $data(ne_start)} {$nec <= $data(ne_end)} {incr nec $data(ne_step)} {
            set ai $data(lines)
            incr ai -1
            incr test_runs 1
            set rcv_sum($elem) [expr $rcv_sum($elem) + $data($elem,$nec,$ngc,$ai,rcv_sec)]
            set snd_sum($elem) [expr $snd_sum($elem) + $data($elem,$nec,$ngc,$ai,snd_sec)]
            set evc_sum($elem) [expr $evc_sum($elem) + $data($elem,$nec,$ngc,$ai,ev_snd_sec)]
         }
         ts_log_fine "\n=== results of >$elem< test run ( with 1 gdi client ) ==="
         ts_log_fine  "avg. received gdi requests \[1/s\]: [expr $rcv_sum($elem) / $test_runs]"
         ts_log_fine  "avg. sent gdi request      \[1/s\]: [expr $snd_sum($elem) / $test_runs]"
         ts_log_fine  "avg. events sent           \[1/s\]: [expr $evc_sum($elem) / $test_runs]"
         set history($elem,$history_index,1gc_gdi_rcv) [expr $rcv_sum($elem) / $test_runs]
         set history($elem,$history_index,1gc_gdi_snd) [expr $snd_sum($elem) / $test_runs]
         set history($elem,$history_index,1gc_evc_snd) [expr $evc_sum($elem) / $test_runs]
      }
}
      
      incr history_index 1
   }

if {0} {
   if {$history_index != 0} {
      cl_throughput_plot_test_history history $history_index "remote" $cl_throughput_prot_output_dir
   }
}
}

proc cl_throughput_run {} {
   global ts_config  CHECK_USER cl_throughput_prot_output_dir
   global CHECK_ACT_LEVEL commlib_host_list step_list
   global nr_event_clients nr_rgdi_clients nr_sgdi_clients vqmaster_interval

   if {$ts_config(commd_port) < 1024} {
      set user "root"
   } else {
      set user $CHECK_USER
   }
  
   set up_arch [resolve_build_arch $ts_config(master_host)]

   set vqmaster_arch     $up_arch
   set vqmaster_host     $ts_config(master_host)
   set vqmaster_port     $ts_config(commd_port)
   set vqmaster_debug    0
   set vqmaster_binary   $ts_config(source_dir)/$up_arch/test_virtual_qmaster
   set vevc_binary       $ts_config(source_dir)/$up_arch/test_virtual_event_client

   set nr_of_remote_hosts [llength $commlib_host_list]

   # qmaster host is skiped as gdi host
   incr nr_of_remote_hosts -1

   ts_log_fine "\n\nstarting measurement with $nr_of_remote_hosts remote hosts ..."
   ts_log_fine "=========================================="

   set vqmaster_timeout [expr $vqmaster_interval + 10]
   set vevc_args "$vqmaster_debug $vqmaster_port $vqmaster_host no_output"
   set vgdi_args_static "$vqmaster_debug $vqmaster_port $vqmaster_host 0 no_output"
   set vgdi_args_reconnect "$vqmaster_debug $vqmaster_port $vqmaster_host 1 no_output"
   set vqmaster_args "$vqmaster_debug $vqmaster_port $vqmaster_interval"

   foreach runs $step_list {

      ts_log_fine "\nrun with $runs hosts"
      set host_count 1 
      set used_hosts ""
      foreach host $commlib_host_list {
         set up_arch [resolve_build_arch $host]
         set vgdi_binary $ts_config(source_dir)/$up_arch/test_virtual_gdi_client

         if {[string compare $host $vqmaster_host] == 0} {
            continue
         }

         if {$nr_sgdi_clients != 0} {
            cl_throughput_start_clients $host $nr_sgdi_clients $CHECK_USER $vgdi_binary vgdi_args_static
         }
         if {$nr_rgdi_clients != 0} {
            cl_throughput_start_clients $host $nr_rgdi_clients $CHECK_USER $vgdi_binary vgdi_args_reconnect
         }

         lappend used_hosts $host
         ts_log_fine "started virtual clients on host $host\n"

         if {$host_count >= $runs} {
            break
         } else {
            incr host_count 1
         }
      }

      if {$nr_event_clients != 0} {
         cl_throughput_start_clients $vqmaster_host $nr_event_clients $CHECK_USER $vevc_binary vevc_args
      }

      set result [start_remote_prog $vqmaster_host $user $vqmaster_binary $vqmaster_args prg_exit_state $vqmaster_timeout]
      cl_throughput_parse_result $host_count result data
      set data(test_hostlist) "$used_hosts"
      set data(test_host) "$vqmaster_host"
      set data(step_list) "$step_list"
   }

   ts_log_fine "saving report in directory:"
   ts_log_fine $cl_throughput_prot_output_dir
   file mkdir $cl_throughput_prot_output_dir

   set prot_output_file "${cl_throughput_prot_output_dir}/[timestamp].data"
   ts_log_fine "output file is\n$prot_output_file"
   spool_array_to_file $prot_output_file "data" data
}

