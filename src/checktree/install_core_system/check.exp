#!/vol2/TCL_TK/glinux/bin/expect
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# source version dependent parts of the installation
global CHECK_ACTUAL_TEST_PATH CHECK_TESTSUITE_INSTALL_MODE
ts_source $CHECK_ACTUAL_TEST_PATH/init_cluster

global check_name check_description check_needs check_functions
global check_root_access_needs check_category      
global check_use_installed_system

# This file shows some check spezific things
set check_root_access_needs  "yes"
set check_name          "init_core_system"
set check_category      "COMPATIBILITY SYSTEM L10N VERIFIED INSTALL JGDI USE_CLI"
set check_description(0)   "install a default system (bdb_rpc/master/execution/shadow daemon on local host and start them up)"
set check_needs         ""           ;# let the testsuite test run before this test to check evlt. errors before running
                                                        ;# all tests
set install_mode        $CHECK_TESTSUITE_INSTALL_MODE ;# sets the install mode. allowed are: automatic and manual
set check_functions     ""                              ;# functions to call (in order)

if {$install_mode == "automatic"} {
   # in automatic installation, we still do a manual bdb rpc server installation
   ts_source $CHECK_ACTUAL_TEST_PATH/interactive/bdb_rpc
   ts_source $CHECK_ACTUAL_TEST_PATH/automatic/qmaster
   ts_source $CHECK_ACTUAL_TEST_PATH/automatic/execd
   ts_source $CHECK_ACTUAL_TEST_PATH/automatic/shadowd
} else {
   ts_source $CHECK_ACTUAL_TEST_PATH/interactive/bdb_rpc
   ts_source $CHECK_ACTUAL_TEST_PATH/interactive/qmaster
   ts_source $CHECK_ACTUAL_TEST_PATH/interactive/execd
   ts_source $CHECK_ACTUAL_TEST_PATH/interactive/shadowd
}

lappend check_functions "kill_running_system"
if {$install_mode == "automatic" && !$check_use_installed_system} {
   lappend check_functions "create_autoinst_config"
}
lappend check_functions "install_bdb_rpc"
lappend check_functions "install_qmaster"
lappend check_functions "install_wait_for_settings_file"
if { $install_mode == "manual" } {
   lappend check_functions "make_user_cert"
}
lappend check_functions "install_shadowd"
lappend check_functions "install_execd"

# setup cleanup functions after installation was done

# do standard testsuite setup
# WARNING: If making changes here please also update issue_1330 test !!!
# ========
lappend check_functions "cleanup_system"
lappend check_functions "setup_queues"
lappend check_functions "setup_testcheckpointobject"
lappend check_functions "setup_conf" 
lappend check_functions "setup_execd_conf"
lappend check_functions "setup_mytestproject" 
lappend check_functions "setup_mytestpe" 
lappend check_functions "setup_deadlineuser" 
lappend check_functions "setup_schedconf" 
lappend check_functions "setup_default_calendars"
lappend check_functions "setup_check_messages_files"
lappend check_functions "setup_win_users"
lappend check_functions "setup_and_check_users"
lappend check_functions "setup_inhouse_cluster"
lappend check_functions "setup_sge_aliases_file"


# ---------------------------------------------------------------------------------
# here the tests begin ....

global CORE_INSTALLED
global CORE_INSTALLED_TIME

global local_master_spool_set
global local_execd_spool_set

set local_master_spool_set 0
set local_execd_spool_set 0

set CORE_INSTALLED ""
set CORE_INSTALLED_TIME ""


proc write_install_list {} {
   global ts_config
   global CORE_INSTALLED CORE_INSTALLED_TIME
   global CHECK_MAIN_RESULTS_DIR
 
   set myfile [open "$CHECK_MAIN_RESULTS_DIR/cluster.$ts_config(master_host).inst" "w"]
   puts $myfile $CORE_INSTALLED
   close $myfile
}

proc install_wait_for_settings_file {} {
   global ts_config CHECK_USER
   global check_use_installed_system
   if {!$check_use_installed_system} {
      set test_users $CHECK_USER
      foreach user $test_users {
         foreach host [get_all_hosts] {
            ts_log_fine "wait for settings file on host \"$host\" as user \"$user\" ..."
            wait_for_remote_file $host $user "$ts_config(product_root)/$ts_config(cell)/common/settings.sh"
         }
      }
   }
}

#                                                             max. column:     |
#****** install_core_system/read_install_list() ******
# 
#  NAME
#     read_install_list -- ??? 
#
#  SYNOPSIS
#     read_install_list { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc read_install_list {} {
   global ts_config
   global CORE_INSTALLED CORE_INSTALLED_TIME
   global CHECK_MAIN_RESULTS_DIR 

   if {[file isfile "$CHECK_MAIN_RESULTS_DIR/cluster.$ts_config(master_host).inst"] == 1} {
      set myfile [open "$CHECK_MAIN_RESULTS_DIR/cluster.$ts_config(master_host).inst" "r"]
      gets $myfile CORE_INSTALLED
      close $myfile
   }
}
