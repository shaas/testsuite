#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__



# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "no"

# define a level initialization procedure:
set check_init_level_procedure "generic_module_tests_init_level"

# define test's name and run level descriptions
set check_name            "generic_module_tests"
set check_category        "MODULE VERIFIED"
set check_highest_level   100
set check_description(0)   "run all generic module tests on master host"
set check_description(100) "run all generic module tests on all architectures"

# define test's dependencies
set check_needs           "" 

# setup and cleanup functions

# define test's procedure order
set check_functions ""
lappend check_functions "generic_module_tests_run"

global generic_module_tests_test_hosts generic_module_tests

# these are the currently existing and verified module tests
set generic_module_tests ""
lappend generic_module_tests "test_category"
lappend generic_module_tests "test_cull_hash"
lappend generic_module_tests "test_cull_list"
lappend generic_module_tests "test_cull_pack"
lappend generic_module_tests "test_enumeration"
lappend generic_module_tests "test_sge_calendar"
lappend generic_module_tests "test_sge_object"
lappend generic_module_tests "test_resource_utilization"
lappend generic_module_tests "test_ff_cl"
lappend generic_module_tests "test_sge_limit_rule"

proc generic_module_tests_init_level {} {
   global ts_config
   global CHECK_ACT_LEVEL
   global generic_module_tests_test_hosts

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         set generic_module_tests_test_hosts $ts_config(master_host)
         return 0
      } 
      "100" {
         set generic_module_tests_test_hosts $ts_config(unique_arch_nodes)
         return 0
      }
   } 

   return -1  ;# no other level 
}

proc generic_module_tests_run {} {
   global ts_config CHECK_OUTPUT CHECK_USER
   global generic_module_tests generic_module_tests_test_hosts

   foreach host $generic_module_tests_test_hosts {
      set compile_arch [resolve_build_arch $host]
      foreach module_test $generic_module_tests {
         set command "$ts_config(source_dir)/$compile_arch/$module_test"
         puts -nonewline $CHECK_OUTPUT "$module_test ..."
         flush $CHECK_OUTPUT
         if {[wait_for_remote_file $host $CHECK_USER $command 1 0] != 0} {
            add_proc_error "generic_module_tests_run" -3 "module test binary $command doesn't exist on host $host"
            continue
         } else {
            set output [start_remote_prog $host $CHECK_USER $command "" ret 300]
         }
         if {$ret == 0} {
            puts "ok"
         } else {
            puts "failed"
            add_proc_error "generic_module_tests_run" -1 "module test $module_test failed:\n$output"
         }
      }
   }

   set_error 0 "ok"
}

