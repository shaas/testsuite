#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions check_highest_level
global check_init_level_procedure check_category
global check_root_access_needs

set check_init_level_procedure "commlib_issues_init_level"

set check_category            "COMPATIBILITY SYSTEM VERIFIED COMMLIB"
set check_name                "commlib_issues"
set check_description(0)      "check commlib issue test module"
set check_needs               "init_core_system"      ;# dependencies of this check (name of other check)
set check_root_access_needs   "yes"

# setup and cleanup functions
set check_setup_level_function "commlib_issues_setup"
set check_cleanup_level_function "commlib_issues_cleanup"

# define test's procedure order
set check_functions           ""
lappend check_functions       "commlib_issues_run"
set check_highest_level       0

proc commlib_issues_init_level {} {
   global CHECK_ACT_LEVEL

   # setup levels 
   switch -- $CHECK_ACT_LEVEL {
      "0"  { 
         return 0
      }
   }

   return -1
}

proc commlib_issues_setup {} {
   shutdown_core_system
}

proc commlib_issues_run  {} {
   global ts_config
   global CHECK_USER
   
   set server_host [lindex $ts_config(execd_nodes) 0]
   set client_host [lindex $ts_config(execd_nodes) 1]
 
   set execd_no 2
   set client_up_arch [resolve_build_arch $client_host]
   while { [string match "*AIX*" $client_up_arch] || [string match "*IRIX*" $client_up_arch] } {
      ts_log_fine "skipping aix/irix host because there may be a malloc() problem for this test"
      set client_host [lindex $ts_config(execd_nodes) $execd_no]
      set client_up_arch [resolve_build_arch $client_host]
      incr execd_no 1
   }
   
   ts_log_fine "using server host $server_host"
   ts_log_fine "using client host $client_host"

   set server_up_arch [resolve_build_arch $server_host]
   set client_up_arch [resolve_build_arch $client_host]

   set server_binary $ts_config(source_dir)/$server_up_arch/test_issues
   set client_binary $ts_config(source_dir)/$client_up_arch/test_issues

   set server_args "0 TCP server $ts_config(commd_port) $server_host"
   set client_args "0 TCP client $ts_config(commd_port) $server_host"

   set server_sid [open_remote_spawn_process $server_host "root" $server_binary $server_args]
   after 5000
   set client_sid [open_remote_spawn_process $client_host $CHECK_USER $client_binary $client_args]

   set server_id [lindex $server_sid 1]
   set client_id [lindex $client_sid 1]
   set both_list "$client_id $server_id"
   set found_malloc_error 0
   set in_loop 1
   while { $in_loop } {
# using this very high timeout, because some machines start swapping and they need more
# time to malloc() enought data for the client binary to send to the server
      set timeout 600
      expect {
         -i $both_list full_buffer {
            ts_log_severe "expect full_buffer error"
            close_spawn_process $server_sid
            close_spawn_process $client_sid
            return -1
         }
         -i $both_list timeout {
            ts_log_fine "---->>>>>>>>> got timeout"
            ts_log_severe "got timeout"
            set in_loop 0   
         }
         -i $both_list eof {
            set spawn_id $expect_out(spawn_id)
            ts_log_fine "got eof for spawn_id $spawn_id"
            ts_log_severe "got eof"
            set in_loop 0   
         }
         -i $server_id -- "*\n" {
            set output $expect_out(0,string) 
            set output [ split $output "\n" ]
            foreach line $output {
               set help [string trim $line]
               ts_log_fine "server: $help"
               if { [string match "*issue 1400 error found*" $help] } {
                  ts_log_severe "found issue #1400 in server binary"
               }
            }
         }
         -i $client_id -- "*\n" {
            set output $expect_out(0,string) 
            set output [ split $output "\n" ]
            foreach line $output {
               set help [string trim $line]
               ts_log_fine "client: $help"
               if { [string match "*malloc() error*" $help] } {
                  set found_malloc_error 1
               }
               if { [string match "*skip malloc() more than 1GB*" $help] } {
                  set found_malloc_error 2
               }

               if { [string match "*_exit_status_:(*)*" $help] } {
                 
                  set st [string first "(" $help]
                  set ed [string first ")" $help]
                  incr st 1
                  incr ed -1
                  set exit_state [string range $help $st $ed]
                  ts_log_fine "found exit status of client: ($exit_state)"
                  if { $exit_state != 0 } {
                     set known_exit_state 0
 
                     if { $exit_state == 1 && $found_malloc_error == 2 } {
                        ts_log_config "can't test issue #1389 because machines are to fast!"
                        set known_exit_state 1
                     }
                     if { $exit_state == 1 && $found_malloc_error == 0 } {
                        ts_log_severe "issue #1389 is present\n$expect_out(0,string)"
                        set known_exit_state 1
                     } 
                     if { $exit_state == 1 && $found_malloc_error == 1 } {
                        ts_log_config "can't test issue #1389 because of malloc error on host $client_host"
                        set known_exit_state 1
                     } 

                     if { $exit_state == 2 } {
                        ts_log_severe "issue #1400 is present"
                        set known_exit_state 1
                     }
                     if { $known_exit_state != 1 } {
                        ts_log_severe "exit state of client is $exit_state"
                     }
                  }
                 
                  set in_loop 0
               }
            }
         }
      }
   }
   close_spawn_process $server_sid
   close_spawn_process $client_sid
}

proc commlib_issues_cleanup {} {
   startup_core_system
}









