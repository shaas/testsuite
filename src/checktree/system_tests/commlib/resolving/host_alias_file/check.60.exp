#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions check_highest_level
global check_init_level_procedure check_category
global check_root_access_needs check_need_running_system

set check_init_level_procedure "host_aliases_file_init_level"

set check_category            "COMPATIBILITY SYSTEM VERIFIED COMMLIB"
set check_name                "host_aliases_file"
set check_description(0)      "check if deadlock occurs when ip address is used in host_aliases file"
set check_needs               "init_core_system"      ;# dependencies of this check (name of other check)
set check_root_access_needs   "no"
set check_need_running_system "no" 

# setup and cleanup functions
set check_setup_function "host_aliases_file_setup"
set check_cleanup_function "host_aliases_file_cleanup"

# define test's procedure order
set check_functions           ""
lappend check_functions       "host_aliases_file_run"
set check_highest_level       0

proc host_aliases_file_init_level {} {
   global CHECK_ACT_LEVEL

   # setup levels 
   switch -- $CHECK_ACT_LEVEL {
      "0"  { 
         return 0  ;# client and server multi threaded
      }
   }
   return -1
}

proc host_aliases_file_setup {} {
   global CHECK_USER
   global orig_aliases_file
   global host_aliases_test_host
   global host_aliases_test_ip

   get_current_cluster_config_array ts_config

   set host_aliases_test_ip "unknown"

   if {[info exists orig_aliases_file]} {
      unset orig_aliases_file
   }

   set host_aliases_test_host [host_conf_get_suited_hosts 1 "lx24-amd64 lx26-amd64 lx24-x86 lx26-x86 lx24-ia64 lx26-ia64"]

   set output [start_sge_bin "gethostname" "-all" $host_aliases_test_host "" prg_exit_state 60 "" "utilbin"]
   set lines [split $output "\n"]
   set ip ""
   foreach line $lines {
      ts_log_fine $line
      if {[string match "*Host*Address*:*" $line]} {
         set help [split $line ":"]
         set help2 [lindex $help 1]
         set ip [lindex $help2 0]
         break
      }
   }

   if {$ip == ""} {
      ts_log_severe "cannot get ip of host $host_aliases_test_host"
   }
   set host_aliases_test_ip $ip
   set cur_nr 1
   set host_aliases_test_host_long_name "${host_aliases_test_host}.${ts_config(dns_domain)}"
   set my_alias_file($cur_nr) "$ip $host_aliases_test_host $host_aliases_test_host_long_name"

   ts_log_fine "ip of host $host_aliases_test_host is $ip"

   if {[is_remote_file $host_aliases_test_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases"]} {
      ts_log_fine "saving original host_aliases file ..."
      get_file_content $host_aliases_test_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases" orig_aliases_file
      # append original mappings
      for {set i 1} {$i <= $orig_aliases_file(0)} {incr i 1} {
         incr cur_nr 1
         set my_alias_file($cur_nr) $orig_aliases_file($i)
      }
   }
   set my_alias_file(0) $cur_nr
   write_remote_file $host_aliases_test_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases" my_alias_file
}

proc host_aliases_file_cleanup {} {
   global CHECK_USER
   global orig_aliases_file
   global host_aliases_test_host
   global host_aliases_test_ip

   get_current_cluster_config_array ts_config
   if {[info exists orig_aliases_file]} {
      ts_log_fine "restoring original host_aliases file ..."
      write_remote_file $host_aliases_test_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases" orig_aliases_file
      unset orig_aliases_file
   } else {
      delete_remote_file $host_aliases_test_host $CHECK_USER "$ts_config(product_root)/$ts_config(cell)/common/host_aliases"
   }
   unset host_aliases_test_host
   unset host_aliases_test_ip
}


#****** check.60/host_aliases_file_run() ****************************************
#  NAME
#     host_aliases_file_run() -- test host alias file
#
#  SYNOPSIS
#     host_aliases_file_run { } 
#
#  FUNCTION
#     Scenario: deadlock if ip address is used in first column of host alias file
#     1) create host alias file with ip address entry of cluster host
#     2) get_host_byname -all should not deadlock
#*******************************************************************************
proc host_aliases_file_run {} {
   global ts_config
   global CHECK_USER
   global CHECK_ACT_LEVEL
   global host_aliases_test_host
   global host_aliases_test_ip

   set my_env(SGE_COMMLIB_DEBUG) "2"
   set output [start_sge_bin "gethostbyname" "-all $host_aliases_test_host" $host_aliases_test_host "" prg_exit_state 10 "" "utilbin" output_lines my_env]
   if {$prg_exit_state != 0} {
      ts_log_severe "exit state of gethostbyname is $prg_exit_state - this might be deadlock problem (IZ #2897)!"
   }
   set help [split $output "\n"]
   foreach line $help {
      ts_log_fine $line
      if {[string match "SGE name:*" $line]} {
         if {[string match "*$host_aliases_test_ip*" $line ]} {
            ts_log_fine "found expected SGE name set to ip address!"
         } else {
            ts_log_severe "host aliasing seems not to work correctly, SGE name is not \"$host_aliases_test_ip\""
         }
      }
      if {[string match "*cl_raw_list_lock*" $line]} {
         ts_log_severe "found mutex error in output. This is a deadlock problem (IZ #2897)!"
      }
   }
}










