#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions check_errno check_errstr check_highest_level
global check_init_level_procedure check_category
global check_root_access_needs

set check_init_level_procedure "commlib_deadlock_init_level"

set check_category            "COMPATIBILITY SYSTEM VERIFIED"
set check_name                "commlib_deadlock"
set check_description(0)      "qmaster deadlock"
set check_needs               "init_core_system"      ;# dependencies of this check (name of other check)
set check_root_access_needs   "yes"

# setup and cleanup functions
set check_setup_function ""
set check_cleanup_function ""

# define test's procedure order
set check_functions           ""
lappend check_functions       "commlib_deadlock_run"
set check_highest_level       0

proc commlib_deadlock_init_level {} {
   global CHECK_ACT_LEVEL ts_config

   # setup levels 
   switch -- $CHECK_ACT_LEVEL {
      "0"  { 
         return 0
      }
   }

   return -1
}

proc commlib_deadlock_run  {} {
   global ts_config  CHECK_OUTPUT CHECK_USER CHECK_SCRIPT_FILE_DIR
   set runs 1 
   set qping_script_path "$ts_config(testsuite_root_dir)/$CHECK_SCRIPT_FILE_DIR/qping.sh"
   set arch [resolve_arch $ts_config(master_host)]
   set qping_arguments "$ts_config(product_root)/bin/$arch/qping $ts_config(master_host) $ts_config(commd_port) qmaste 1 100"

   while { $runs <= 10 } {
      puts $CHECK_OUTPUT "run $runs of 10"
      set output [start_remote_prog $ts_config(master_host) $CHECK_USER $qping_script_path $qping_arguments prg_exit_state 300]
      puts $CHECK_OUTPUT "exit state: $prg_exit_state"
      if { $prg_exit_state == 1} {
         shutdown_system_daemon $ts_config(master_host) qmaster
         startup_qmaster 0
         add_proc_error "commlib_deadlock_run" -1 "commlib deadlock found"
         break
      }
      incr runs 1
   }

   set_error 0 "ok"
}


