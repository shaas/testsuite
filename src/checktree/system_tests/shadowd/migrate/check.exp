#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__



# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "shadowd_migrate_init_level"

# define test's name and run level descriptions
set check_name            "shadowd_migrate"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   9
set check_description(0)  "test heartbeat file writing"
set check_description(1)  "test shadowd functionality"
set check_description(2)  "test simple shadowd functionality"
set check_description(3)  "test sgemaster -migrate command"
set check_description(4)  "start qmaster without act_qmaster file"
set check_description(5)  "start qmaster with empty act_qmaster file"
set check_description(6)  "start qmaster with unresolvable host in act_qmaster file"
set check_description(7)  "start qmaster with resolvable foreign host in act_qmaster file without running qmaster"
set check_description(8)  "start qmaster with resolvable foreign host in act_qmaster file with running qmaster"
set check_description(9)  "start qmaster with own ip adress in act_qmaster file"


# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function shadowd_migrate_setup
set check_cleanup_function shadowd_migrate_cleanup


# define test's procedure order
set check_functions ""
lappend check_functions "shadowd_migrate_test"


global shadowd_migrate_test_hosts
global shadowd_migrate_saved_slot_count

proc shadowd_migrate_init_level {} {
   global CHECK_ACT_LEVEL
   global ts_config
   set nr_shadowds [llength $ts_config(shadowd_hosts)]

   if { $CHECK_ACT_LEVEL == 0} {
      return 0
   }

   if { $nr_shadowds < 2 && $CHECK_ACT_LEVEL > 1 } {
      return -1
   }

   if { $CHECK_ACT_LEVEL <= 9 } {
      return 0
   }

   return -1  ;# no other level 
}




# -------- local test procedures: initialization------------------------------


proc shadowd_migrate_setup  {} {
   global ts_config
}

proc shadowd_migrate_cleanup  {} {
   global ts_config
}


proc shadowd_migrate_test {} {
   global ts_config  CHECK_ACT_LEVEL check_description 
   global CHECK_USER file_procedure_logfile_wait_sp_id

   set nr_shadowds [llength $ts_config(shadowd_hosts)]
   if { $nr_shadowds < 2 && $CHECK_ACT_LEVEL > 0 } {
      ts_log_config "Need 2 configured shadowd hosts. Can't run this test in level 1-9."
   }

   if { $nr_shadowds >= 2 && $CHECK_ACT_LEVEL > 0 } {
      set heartbeat_file [get_qmaster_spool_dir]/heartbeat
      set qmaster_lock_file [get_qmaster_spool_dir]/lock
      set qmaster_messages_file [get_qmaster_spool_dir]/messages
      set act_qmaster_file "$ts_config(product_root)/$ts_config(cell)/common/act_qmaster"
      set sgemaster_file $ts_config(product_root)/$ts_config(cell)/common/sgemaster
      set result [start_remote_prog $ts_config(master_host) $CHECK_USER "cat" $act_qmaster_file]
      set act_qmaster [string trim $result]

      set result [start_remote_prog [lindex $ts_config(shadowd_hosts) 0] $CHECK_USER "cat" $heartbeat_file]
      if { $prg_exit_state != 0 } {
         ts_log_config "no nfs shared qmaster spool directory? Cat failed - > Skipping this test (1)!\nresult: $result"
         return;
      } 

      ts_log_fine $result
      set heartbeat1 [string trim $result]
      set heartbeat1 [string trimleft $heartbeat1 "0"]

      set result [start_remote_prog [lindex $ts_config(shadowd_hosts) 1] $CHECK_USER "cat" $heartbeat_file]
      if { $prg_exit_state != 0 } {
         ts_log_config "no nfs shared qmaster spool directory? Cat failed - > Skipping this test (2)!\nresult: $result"
         return;
      }

      ts_log_fine $result
      set heartbeat2 [string trim $result ]
      set heartbeat2 [string trimleft $heartbeat2 "0"]

      set heart_diff [expr ( $heartbeat2 - $heartbeat1 ) ]
      if { $heart_diff > 1 || $heart_diff < -1 } {
         ts_log_config "heartbeat file diff error ($heartbeat1,$heartbeat2). heart_diff=$heart_diff\nno nfs shared qmaster spool directory found. Skipping this test"
         return;
      }


      # We need access to spooling data from shadow hosts, by
      # - classic spooling to a shared filesystem (to qmaster spooldir - if it was not shared,
      #   we would have failed earlier.
      # - bdb spooling with rpc server
      # - bdb spooling to nfsv4
      set spooling_ok 0
      if { $ts_config(spooling_method) == "classic" } {
         ts_log_fine "We have \"classic\" spooling to a shared qmaster spool dir."
         set spooling_ok 1
      } else {
         if {$ts_config(spooling_method) == "berkeleydb"} {
            if {$ts_config(bdb_server) != "none"} {
               ts_log_fine "We have \"berkeleydb\" spooling with RPC server." 
               set spooling_ok 1
            } else {
               set bdb_spooldir [get_bdb_spooldir]
               set fstype [get_fstype $bdb_spooldir $ts_config(master_host)]
               if {$fstype == "nfs4"} {
                  ts_log_fine "We have \"berkeleydb\" spooling on NFS v4" 
                  set spooling_ok 1

                  # check that the spooldir is NFS v4 on all shadow hosts
                  foreach host $ts_config(shadowd_hosts) {
                     set fstype [get_fstype $bdb_spooldir $host]
                     if {$fstype != "nfs4"} {
                        ts_log_fine "berkeley spool directory $bdb_spooldir is not nfsv4 mounted on shadow host $host"
                        set spooling_ok 0
                        break
                     }
                  }
               }
            }
         }
      }

      if {! $spooling_ok} {
         ts_log_config "Spooling database is not shared between master and shadow hosts"
         return
      }

      ts_log_fine "------------------------------------------------------------"
      ts_log_fine $check_description($CHECK_ACT_LEVEL)
      ts_log_fine "------------------------------------------------------------"

      if {$CHECK_ACT_LEVEL == 1} {
         if {$ts_config(gridengine_version) <= 60} {
            set CONTROLED_SHUTDOWN [translate_macro MSG_SHADOWD_CONTROLLEDSHUTDOWN_SSSU "*" "*" "*" "100"]
         } else {
            set CONTROLED_SHUTDOWN [translate_macro MSG_SHADOWD_CONTROLLEDSHUTDOWN_SU "*" "100"]
         }

         ts_log_fine "restarting qmaster and shadowds with SGE_TEST_HEARTBEAT_TIMEOUT=600"
         shutdown_system_daemon $ts_config(master_host) "qmaster"
         shutdown_system_daemon [lindex $ts_config(shadowd_hosts) 0] "shadowd"
         shutdown_system_daemon [lindex $ts_config(shadowd_hosts) 1] "shadowd"

         ts_log_fine "   reading heartbeat file ..."
         ts_log_fine "   $heartbeat_file"
         

         set result [start_remote_prog $ts_config(master_host) $CHECK_USER "cat" $heartbeat_file]

         set heartbeat [string trimleft [string trim $result] "0"]
         ts_log_fine "   setting heartbeat from $heartbeat to 98 ..."
         set result [start_remote_prog $ts_config(master_host) $CHECK_USER "echo" "98 > $heartbeat_file"]
         ts_log_fine $result
         set result [start_remote_prog $ts_config(master_host) $CHECK_USER "cat" $heartbeat_file]
         set heartbeat [string trimleft [string trim $result] "0"]
         ts_log_fine "   heartbeat set to $heartbeat !"


         set my_env(SGE_TEST_HEARTBEAT_TIMEOUT) 600
         startup_qmaster 0 my_env
         startup_shadowd [lindex $ts_config(shadowd_hosts) 0] my_env
         startup_shadowd [lindex $ts_config(shadowd_hosts) 1] my_env

         ts_log_fine "qmaster and shadowds restarted!"
 
         set my_timeout [timestamp]
         incr my_timeout 660
         set heartbeat 0
         while {$heartbeat <= 102} {
            set result [start_remote_prog $ts_config(master_host) $CHECK_USER "cat" $heartbeat_file]
            set heartbeat [string trimleft [string trim $result] "0"]
            after 1000
##            ts_log_fine -nonewline "."
            set todo [expr $my_timeout - [timestamp]]
            ts_log_progress FINE "\rtimeout in $todo seconds. Heartbeat = $heartbeat    \r"
            if {[timestamp] > $my_timeout} {
               ts_log_severe "timeout waiting for shadowd to take over!"
               break
            }
         }
         ts_log_newline

         set result [start_remote_prog $ts_config(master_host) $CHECK_USER "cat" $act_qmaster_file]
         set new_act_qmaster [string trim $result]

         if {$act_qmaster == $new_act_qmaster} {
            ts_log_severe "no qmaster took over!"
         } else {
            ts_log_fine "qmaster on host $new_act_qmaster took over!"
         }

         init_logfile_wait $ts_config(master_host) $qmaster_messages_file 
         set message_file_output ""
         set my_timeout [timestamp]
         incr my_timeout 300

         set still_running 1
         set was_in_elem_loop 0
         while { $still_running == 1 } {
            set still_running 0
            set was_in_elem_loop 0
            set found_p [ ps_grep "$ts_config(product_root)" $ts_config(master_host) ]
#            ts_log_fine $found_p
            foreach i $found_p {
               set was_in_elem_loop 1
#               ts_log_fine $ps_info(string,$i)
               if { [string first "sge_qmaster" $ps_info(string,$i)] >= 0 } {
                  set still_running 1
               }
            }
            if { $was_in_elem_loop == 0 } {
               # don't stop ps grep'in when ps_grep doesn't return any value  
               # (execd and shadowd should be available)
               set still_running 1
            }
            set todo [ expr ( $my_timeout - [timestamp]  ) ]
            ts_log_progress FINE "\rtimeout in $todo seconds.    \r"

            if { [timestamp] > $my_timeout } {
               ts_log_severe "old qmaster doesn't stop!"
               break;
            }
            set output [logfile_wait $CONTROLED_SHUTDOWN 1 0 0]
            if { $logfile_wait_error == 0 } {
               set message_file_output $output
            }
         }
         close_logfile_wait

         ts_log_fine "message file of qmaster contains:\n$message_file_output"
         if {$message_file_output == ""} {
            ts_log_severe "old qmaster doesn't stop with exit state 100"
         }

         wait_for_load_from_all_queues 120

         if {[is_remote_file $new_act_qmaster $CHECK_USER $qmaster_lock_file]} {
            ts_log_severe "found lock file after shutdown of old qmaster"
         }

         if {[is_remote_file $act_qmaster $CHECK_USER $qmaster_lock_file]} {
            ts_log_severe "found lock file after shutdown of old qmaster"
         }

         shutdown_system_daemon $new_act_qmaster "qmaster"
         shutdown_system_daemon [lindex $ts_config(shadowd_hosts) 0] "shadowd"
         shutdown_system_daemon [lindex $ts_config(shadowd_hosts) 1] "shadowd"

         startup_qmaster
         startup_shadowd [lindex $ts_config(shadowd_hosts) 0]
         startup_shadowd [lindex $ts_config(shadowd_hosts) 1]
         
         wait_for_load_from_all_queues 120
      }

      if {$CHECK_ACT_LEVEL == 2} {
         ts_log_fine "shutting down qmaster ..."
         
         if {[wait_for_remote_file $ts_config(master_host) $CHECK_USER $qmaster_lock_file 30 0 1] != 0} {
            ts_log_severe "found lock file after shutdown of old qmaster"
         }

         shutdown_system_daemon $ts_config(master_host) "sched"
         shutdown_system_daemon $ts_config(master_host) "qmaster"

         # we have to remove the lockfile - this is an indication for shadowd, that
         # qmaster has not exited gracefully and that it shall takeover
         wait_for_remote_file $ts_config(master_host) $CHECK_USER $qmaster_lock_file
         ts_log_fine "deleting lock file ..."
         set result [start_remote_prog $ts_config(master_host) $CHECK_USER "rm" $qmaster_lock_file]
         ts_log_fine $result
         if {$prg_exit_state != 0} {
            ts_log_severe "error removing qmaster lock file \"$qmaster_lock_file\""
         }
         
         set new_act_qmaster $act_qmaster
         set my_timeout [timestamp]
         incr my_timeout 660
         while {$new_act_qmaster == $act_qmaster} {
            set result [start_remote_prog $ts_config(master_host) $CHECK_USER "cat" $act_qmaster_file]
            set new_act_qmaster [string trim $result]
            after 1000
            if { [timestamp] > $my_timeout } {
               ts_log_severe "no shadowd took over"
               break;
            }
            set todo [ expr ( $my_timeout - [timestamp]  ) ]
            ts_log_progress FINE "\rtimeout in $todo seconds.    \r"
         }

         if {[wait_for_remote_file $new_act_qmaster $CHECK_USER $qmaster_lock_file 30 0 1] != 0} {
            ts_log_severe "found lock file after startup of new qmaster on host $new_act_qmaster"
         }
         wait_for_load_from_all_queues 120


         ts_log_fine "shutting down qmaster on host $new_act_qmaster ..."
         shutdown_system_daemon $new_act_qmaster "qmaster"

         # wait until the lock file is visible on our master host
         if {[wait_for_remote_file $ts_config(master_host) $CHECK_USER $qmaster_lock_file 30 0] != 0} {
            ts_log_severe "$new_act_qmaster didn't leave a lock file on shutdown"
         }

         ts_log_fine "restarting qmaster on host $ts_config(master_host) ..."
         startup_qmaster

         # wait for lock file to vanish (might be delayed due to slow NFS)
         if {[wait_for_remote_file $ts_config(master_host) $CHECK_USER $qmaster_lock_file 30 0 1] != 0} {
            ts_log_severe "found lock file after shutdown and restart of original qmaster on host $act_qmaster"
         }
         wait_for_load_from_all_queues 120
      }

      if {$CHECK_ACT_LEVEL == 3} {
         set migrate_host ""
         foreach host $ts_config(shadowd_hosts) {
            if { $host != $ts_config(master_host) } {
               set migrate_host $host
            }
         }

         if { $migrate_host == "" } {
            ts_log_severe "can't find migrate host"
            return
         }

         ts_log_fine "testing sgemaster -migrate on host $migrate_host ..."
         set output [start_remote_prog $migrate_host "root" $sgemaster_file "-migrate" {exit_var prg_exit_state}]
         ts_log_fine $output
         if { $prg_exit_state != 0 } {
            ts_log_severe "$migrate_host: $sgemaster_file -migrate returned with exit_state = $prg_exit_state:\n$output"
         }

         wait_for_load_from_all_queues 120


         if {[wait_for_remote_file $migrate_host $CHECK_USER $qmaster_lock_file 30 0 1] != 0} {
            ts_log_severe "found lock file after -migrate on host $migrate_host"
         }

         
         ts_log_fine "testing sgemaster -migrate on host $act_qmaster ..."
         set output [start_remote_prog $act_qmaster "root" $sgemaster_file "-migrate" {exit_var prg_exit_state}]
         ts_log_fine $output
         if { $prg_exit_state != 0 } {
            ts_log_severe "$act_qmaster: $sgemaster_file -migrate returned with exit_state = $prg_exit_state:\n$output"
         }

         wait_for_load_from_all_queues 120

         if {[wait_for_remote_file $act_qmaster $CHECK_USER $qmaster_lock_file 30 0 1] != 0} {
            ts_log_severe "found lock file after -migrate on host $act_qmaster"
         }
      }

      if { $CHECK_ACT_LEVEL == 4 ||
           $CHECK_ACT_LEVEL == 5 ||
           $CHECK_ACT_LEVEL == 6 ||
           $CHECK_ACT_LEVEL == 7 ||
           $CHECK_ACT_LEVEL == 9} {

         # shut down qmaster
         shutdown_system_daemon $ts_config(master_host) "qmaster"

         # check whether qmaster did write lock file
         if {[wait_for_remote_file $ts_config(master_host) $CHECK_USER $qmaster_lock_file 0 30] != 0} {
            ts_log_severe "found no lock file after shutdown of qmaster"
         }

         # delete act_qmaster file
         ts_log_fine "deleting $act_qmaster_file ..."
         set result [start_remote_prog $ts_config(master_host) $CHECK_USER "rm" $act_qmaster_file]
         ts_log_fine $result


         # check if file is removed
         if {[is_remote_file $ts_config(master_host) $CHECK_USER $act_qmaster_file]} {
            ts_log_severe "can't delete act_qmaster file $act_qmaster_file"
         }

         if { $CHECK_ACT_LEVEL == 5 } {
            # create empty act_qmaster file
            ts_log_fine "touching $act_qmaster_file ..."
            set result [start_remote_prog $ts_config(master_host) $CHECK_USER "touch" $act_qmaster_file]
            ts_log_fine $result
            # check if file is touched
            if { [is_remote_file $ts_config(master_host) $CHECK_USER  $act_qmaster_file ] != 1 } {
               ts_log_severe "can't create act_qmaster file $act_qmaster_file"
            }
         }

         if { $CHECK_ACT_LEVEL == 6 } {
            ts_log_fine "writing unresolvable host into $act_qmaster_file ..."
            set result [start_remote_prog $ts_config(master_host) $CHECK_USER "echo" "trulla > $act_qmaster_file"]
            ts_log_fine $result
            # check if file is touched
            if { [is_remote_file $ts_config(master_host) $CHECK_USER  $act_qmaster_file ] != 1 } {
               ts_log_severe "can't create act_qmaster file $act_qmaster_file"
            }
            # output file content
            set result [start_remote_prog $ts_config(master_host) $CHECK_USER "cat" $act_qmaster_file]
            set result [string trim $result]
            ts_log_fine "act_qmaster_file: \"$result\""
         }


         if { $CHECK_ACT_LEVEL == 7 } {
            set new_act_master [lindex $ts_config(shadowd_hosts) 0]
            if { $new_act_master == $ts_config(master_host) } {
               set new_act_master [lindex $ts_config(shadowd_hosts) 1]
            }

            ts_log_fine "writing resolvable host into $act_qmaster_file ..."
            set result [start_remote_prog $ts_config(master_host) $CHECK_USER "echo" "$new_act_master > $act_qmaster_file"]
            ts_log_fine $result
            # check if file is touched
            if { [is_remote_file $ts_config(master_host) $CHECK_USER  $act_qmaster_file ] != 1 } {
               ts_log_severe "can't create act_qmaster file $act_qmaster_file"
            }
            # output file content
            set result [start_remote_prog $ts_config(master_host) $CHECK_USER "cat" $act_qmaster_file]
            set result [string trim $result]
            ts_log_fine "act_qmaster_file: \"$result\""
         }

         if { $CHECK_ACT_LEVEL == 9 } {
            set arch [resolve_arch $ts_config(master_host)]
            set gethostname_binary $ts_config(product_root)/utilbin/${arch}/gethostname
            set output [start_remote_prog $ts_config(master_host) $CHECK_USER $gethostname_binary ""]
            set line [split $output "\n"]
            foreach ln $line {
               if { [string match "*Address*" $ln] } {
                  set ip_address [split $ln ":"]
                  set ip_address [lindex $ip_address 1]
                  set ip_address [string trim $ip_address]
                  ts_log_fine "host \"$ts_config(master_host)\"'s IP: \"$ip_address\""
               }
            }


            ts_log_fine "writing ip into $act_qmaster_file ..."
            set result [start_remote_prog $ts_config(master_host) $CHECK_USER "echo" "$ip_address > $act_qmaster_file"]
            ts_log_fine $result
            # check if file is touched
            if { [is_remote_file $ts_config(master_host) $CHECK_USER  $act_qmaster_file ] != 1 } {
               ts_log_severe "can't create act_qmaster file $act_qmaster_file"
            }
            # output file content
            set result [start_remote_prog $ts_config(master_host) $CHECK_USER "cat" $act_qmaster_file]
            set result [string trim $result]
            ts_log_fine "act_qmaster_file: \"$result\""
         }

         # restart qmaster
         startup_qmaster 0

         # wait for all execd's to connect
         wait_for_load_from_all_queues 120

         # qmaster should delete lock file at startup ...
         if { [is_remote_file $ts_config(master_host) $CHECK_USER $qmaster_lock_file] } {
            ts_log_severe "found lock file after restart of qmaster"
         }

         # and we should have a new act_qmaster file
         if { [is_remote_file $ts_config(master_host) $CHECK_USER  $act_qmaster_file ] } {
            set result [start_remote_prog $ts_config(master_host) $CHECK_USER "cat" $act_qmaster_file]
            set result [string trim $result]
            ts_log_fine "act_qmaster_file: \"$result\""
         } else {
            ts_log_severe "can't delete act_qmaster file $act_qmaster_file"
         }

         startup_scheduler
      }

      if { $CHECK_ACT_LEVEL == 8 } {
         
         set wrong_started_qmaster [lindex $ts_config(shadowd_hosts) 0]
         if { $wrong_started_qmaster == $ts_config(master_host) } {
            set wrong_started_qmaster [lindex $ts_config(shadowd_hosts) 1]
         }
         ts_log_fine "try to start qmaster on host $wrong_started_qmaster"
         startup_qmaster 0 "" $wrong_started_qmaster


         set my_timeout [timestamp]
         incr my_timeout 60
         while { [is_daemon_running $wrong_started_qmaster sge_qmaster] } {
            after 1000
            set todo [ expr ( $my_timeout - [timestamp]  ) ]
            ts_log_progress FINE "\rtimeout in $todo seconds.    \r"
            if { [timestamp] > $my_timeout } {
               ts_log_severe "timeout waiting for wrongly started qmaster to stop!"
               break;
            }
         }
         # check whether qmaster did write lock file
         if { [is_remote_file $wrong_started_qmaster $CHECK_USER $qmaster_lock_file] } {
            ts_log_severe "found lock file after shutdown of wrongly started qmaster on $wrong_started_qmaster"
         }

         # wait for all execd's to connect
         wait_for_load_from_all_queues 120

         # qmaster should delete lock file at startup ...
         if { [is_remote_file $ts_config(master_host) $CHECK_USER $qmaster_lock_file] } {
            ts_log_severe "found lock file after restart of qmaster"
         }

         # and we should have a new act_qmaster file
         if { [is_remote_file $ts_config(master_host) $CHECK_USER  $act_qmaster_file ] } {
            set result [start_remote_prog $ts_config(master_host) $CHECK_USER "cat" $act_qmaster_file]
            set result [string trim $result]
            ts_log_fine "act_qmaster_file: \"$result\""
         } else {
            ts_log_severe "can't delete act_qmaster file $act_qmaster_file"
         }
      }
   }

   if { $CHECK_ACT_LEVEL == 0 } {
      foreach host $ts_config(execd_nodes) {
         ts_log_fine "\ntesting heartbeat incrementation on host $host ..."
      
         set heartbeat_file [get_tmp_file_name]
         set arch [resolve_build_arch $host]
         set test_heartbeat_binary $ts_config(source_dir)/${arch}/test_heartbeat

         set exp_heartbeat 1
         while { $exp_heartbeat != 3 } {
            ts_log_fine "expected heartbeat = $exp_heartbeat ..."
            set output [start_remote_prog $host $CHECK_USER $test_heartbeat_binary "-only-write $heartbeat_file"]
            ts_log_fine $output
            set heart_beat [get_string_value_between "heartbeat value is" -1 $output]
            if { $heart_beat != $exp_heartbeat } {
               ts_log_severe "$host: heartbeat should be $exp_heartbeat"
               break
            }
             
            set cat_output [start_remote_prog $host $CHECK_USER cat $heartbeat_file]
            ts_log_fine "cat: $cat_output"
            if { $cat_output != $heart_beat } {
               ts_log_severe "$host: heartbeat file content != test_heartbeat_binary output"
               break
            }
            incr exp_heartbeat 1
         }

         ts_log_fine "now setting heartbeat to 99998 ..."
         set echo_output [start_remote_prog $host $CHECK_USER echo "99998 > $heartbeat_file"]
         ts_log_fine "$echo_output"

         set exp_heartbeat 99999
         while { $exp_heartbeat != 2 } {
            ts_log_fine "expected heartbeat = $exp_heartbeat ..."
            set output [start_remote_prog $host $CHECK_USER $test_heartbeat_binary "-only-write $heartbeat_file"]
            ts_log_fine $output
            set heart_beat [get_string_value_between "heartbeat value is" -1 $output]
            if { $heart_beat != $exp_heartbeat } {
               ts_log_severe "$host: heartbeat should be $exp_heartbeat"
               break
            }
             
            set cat_output [start_remote_prog $host $CHECK_USER cat $heartbeat_file]
            ts_log_fine "cat: \"$cat_output\""
            if { $cat_output != $heart_beat } {
               ts_log_severe "$host: heartbeat file content != test_heartbeat_binary output"
               break
            }
            incr exp_heartbeat 1
            if { $exp_heartbeat > 99999 } {
               set exp_heartbeat 1
            }
         }
      }
   }
}


