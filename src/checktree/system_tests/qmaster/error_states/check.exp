#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# JG: TODO: we have to create an own queue for this test!

# define a level initialization procedure:
set check_init_level_procedure "error_states_init_level"

# define test's name and run level descriptions
set check_name            "error_states"
set check_category        "COMPATIBILITY SYSTEM"
set check_highest_level   0
set check_description(0)  "Test job error behaviour"

# define test's dependencies
set check_needs           "init_core_system" 


# define test's procedure order
set check_functions ""
lappend check_functions "error_states_setup"
lappend check_functions "error_states_prolog"
lappend check_functions "error_states_epilog"
lappend check_functions "error_states_no_job_shell"
lappend check_functions "error_states_no_default_queue_shell"
lappend check_functions "error_states_no_unix_shell_script"
lappend check_functions "error_states_wrong_pe"
lappend check_functions "error_states_submit_error_script"
lappend check_functions "error_states_job_output"
lappend check_functions "error_states_cleanup"

proc error_states_init_level {} {
   global CHECK_ACT_LEVEL
   global CHECK_PRODUCT_TYPE
   global test_array_jobs 

  switch -- $CHECK_ACT_LEVEL {
     "0" { 
           return 0    
     } 
     "1" {
           return -1
     }
  } 
  return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------

global error_states_qconfig
global error_states_check_queue

proc error_states_setup  {} {
   global error_states_qconfig
   global error_states_check_queue ts_config

   set error_states_check_queue "[lindex $ts_config(execd_hosts) 0 ].q"
   ts_log_fine "saving configuration for queue $error_states_check_queue"
   get_queue $error_states_check_queue error_states_qconfig
}


proc error_states_prolog {} {
   global ts_config
   global error_states_check_queue

   set jobargs "-o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh" 


   set my_conf(prolog) "/tmp/no_such_file.23"
   set_queue $error_states_check_queue my_conf 

   set job_id [submit_job "-q $error_states_check_queue $jobargs 5" ]
   trigger_scheduling
   wait_for_jobpending $job_id "leeper" 60 1
   set q_state [wait_for_queue_state $error_states_check_queue "E" 60]
   
   set my_conf(prolog) "$ts_config(testsuite_root_dir)/scripts/exit_01.sh"
   set_queue $error_states_check_queue my_conf 

   ts_log_fine "clearing error state $q_state of queue $error_states_check_queue"
   set catch_result [start_sge_bin "qmod" "-c $error_states_check_queue"]
   ts_log_fine $catch_result

   trigger_scheduling
   wait_for_jobpending $job_id "leeper" 60 1
   set q_state [wait_for_queue_state $error_states_check_queue "E" 60]

   set my_conf(prolog) "$ts_config(testsuite_root_dir)/scripts/exit_99.sh"
   set_queue $error_states_check_queue my_conf 

   ts_log_fine "clearing error state $q_state of queue $error_states_check_queue"
   set catch_result [start_sge_bin "qmod" "-c $error_states_check_queue"]
   ts_log_fine $catch_result

   trigger_scheduling
   wait_for_jobpending $job_id "leeper" 60 1

   wait_for_job_state $job_id "R" 60

   set my_conf(prolog) "$ts_config(testsuite_root_dir)/scripts/exit_00.sh"
   set_queue $error_states_check_queue my_conf 

   trigger_scheduling
   wait_for_jobpending $job_id "leeper" 60 1
   wait_for_jobstart $job_id "leeper" 60
   wait_for_jobend $job_id "leeper" 60 0

   set my_conf(prolog) "NONE"
   set_queue $error_states_check_queue my_conf 
}

proc error_states_epilog {} {
   global ts_config
   global error_states_check_queue

   set jobargs "-o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh" 


   set my_conf(epilog) "/tmp/no_such_file.23"
   set_queue $error_states_check_queue my_conf 


   set job_id [submit_job "-q $error_states_check_queue $jobargs 5" ]
   wait_for_jobpending $job_id "leeper" 60 1
   wait_for_jobstart $job_id "leeper" 60
   wait_for_jobend $job_id "leeper" 60 0
   # JG: TODO: this get_qacct will fail in 6.0 due to delayed writing of accounting information
   # set reporting_params, accounting_flush_time to 00:00:00, or poll one minute until
   # accounting info is available. Consider writing a function get_qacct_poll in sge_procedures
   # There are multiple calls to qacct in this check!
   get_qacct $job_id
   ts_log_fine "qacct output for job $job_id:"
   ts_log_fine "failed: $qacct_info(failed)"
   ts_log_fine "exit_status:  $qacct_info(exit_status)"
   set qacct_error [lindex $qacct_info(failed) 0]
   set exit_state  [lindex $qacct_info(exit_status) 0]
   if { $exit_state != 0 } {
      ts_log_severe "exit state not 0: $exit_state"
   }
   if { $qacct_error != 14 } {
      ts_log_severe "failed not 14 (before epilog): $qacct_error"
   }

   set my_conf(epilog) "$ts_config(testsuite_root_dir)/scripts/exit_01.sh"
   set_queue $error_states_check_queue my_conf 

   set job_id [submit_job "-q $error_states_check_queue $jobargs 15" ]
   wait_for_jobstart $job_id "leeper" 60
   wait_for_jobend $job_id "leeper" 60 0
   get_qacct $job_id
   ts_log_fine "qacct output for job $job_id:"
   ts_log_fine "failed: $qacct_info(failed)"
   ts_log_fine "exit_status:  $qacct_info(exit_status)"

   set exit_state  [lindex $qacct_info(exit_status) 0]
   if { $exit_state != 0 } {
      ts_log_severe "exit state not 0: $exit_state"
   }
  
   if { [ string first "15" $qacct_info(failed)] < 0 || 
        [ string first "in epilog" $qacct_info(failed)] < 0   } {
        ts_log_severe "no in epilog error: $qacct_info(failed)"
   }

   set my_conf(epilog) "NONE"
   set_queue $error_states_check_queue my_conf 
}


proc error_states_no_job_shell {} {
   global error_states_check_queue
   global ts_config

   set jobargs "-o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh" 
      
   set job_id [submit_job "-S /tmp/no_such_file.23 -q $error_states_check_queue $jobargs 10" ]
   wait_for_jobpending $job_id "leeper" 60 1
   wait_for_job_state $job_id "E" 60

   delete_job $job_id
}

proc error_states_no_default_queue_shell {} {
   global ts_config
   global error_states_check_queue

   set jobargs "-o /dev/null -e /dev/null $ts_config(testsuite_root_dir)/scripts/exit_00.sh" 

   
   get_queue $error_states_check_queue org_conf

   ts_log_fine "queue shell_start_mode is $org_conf(shell_start_mode)"

   set my_conf(shell) "/tmp/no_such_file.23"
   set my_conf(shell_start_mode) "posix_compliant"  
   set_queue $error_states_check_queue my_conf

   
   set job_id [submit_job "-q $error_states_check_queue $jobargs" ]
   wait_for_jobpending $job_id "exit" 60 1
   set q_state [wait_for_queue_state $error_states_check_queue "E" 60]
   
   set my_conf(shell) $org_conf(shell) 
   set_queue $error_states_check_queue my_conf 

   ts_log_fine "clearing error state $q_state of queue $error_states_check_queue"
   set catch_result [start_sge_bin "qmod" "-c $error_states_check_queue"]
   ts_log_fine $catch_result


   wait_for_jobstart $job_id "exit" 60
   wait_for_jobend $job_id "exit" 60 0


   set my_conf(shell_start_mode) "unix_behavior"
   set_queue $error_states_check_queue my_conf
   set job_id [submit_job "-q $error_states_check_queue $jobargs" ]
   wait_for_jobpending $job_id "exit" 60 1
   wait_for_jobstart $job_id "exit" 60
   wait_for_jobend $job_id "exit" 60  0
   set my_conf(shell_start_mode) $org_conf(shell_start_mode)
   set_queue $error_states_check_queue my_conf
}

proc error_states_no_unix_shell_script {} {
   global ts_config
   global error_states_check_queue


   get_queue $error_states_check_queue org_conf
   ts_log_fine "queue shell_start_mode is $org_conf(shell_start_mode)"
   
   set my_conf(shell_start_mode) "unix_behavior"  
   set_queue $error_states_check_queue my_conf

   set jobargs "-o /dev/null -e /dev/null $ts_config(testsuite_root_dir)/scripts/exit_00.sh"  
   set job_id [submit_job "-q $error_states_check_queue $jobargs" ]
   wait_for_jobpending $job_id "exit" 60 1
   wait_for_jobstart $job_id "exit" 60 
   wait_for_jobend $job_id "exit" 60  0
   
   set jobargs "-o /dev/null -e /dev/null $ts_config(testsuite_root_dir)/scripts/no_unix_shell.sh"  
   set job_id [submit_job "-q $error_states_check_queue $jobargs" ]
   wait_for_jobpending $job_id "no_unix" 60 1
   wait_for_job_state $job_id "E" 60 

   delete_job $job_id

   set my_conf(shell_start_mode) $org_conf(shell_start_mode)
   set_queue $error_states_check_queue my_conf
}

proc error_states_wrong_pe {} {
   global ts_config
   global CHECK_PRODUCT_TYPE
   global error_states_check_queue

#   set wrong_start_pe(queue_list) $error_states_check_queue
   set wrong_start_pe(slots)      5
   set wrong_start_pe(start_proc_args) "/tmp/no_such_file.23"
   add_pe "wrong_start_pe" wrong_start_pe
   assign_queues_with_pe_object $error_states_check_queue wrong_start_pe


#   set wrong_stop_pe(queue_list) $error_states_check_queue
   set wrong_stop_pe(slots)      5
   set wrong_stop_pe(stop_proc_args) "/tmp/no_such_file.23"
   add_pe "wrong_stop_pe" wrong_stop_pe
   assign_queues_with_pe_object $error_states_check_queue wrong_stop_pe

#   set error_start_pe(queue_list) $error_states_check_queue
   set error_start_pe(slots)      5
   set error_start_pe(start_proc_args) "$ts_config(testsuite_root_dir)/scripts/exit_01.sh"
   add_pe "error_start_pe" error_start_pe
   assign_queues_with_pe_object $error_states_check_queue error_start_pe

#   set error_stop_pe(queue_list) $error_states_check_queue
   set error_stop_pe(slots)      5
   set error_stop_pe(stop_proc_args) "$ts_config(testsuite_root_dir)/scripts/exit_01.sh"
   add_pe "error_stop_pe" error_stop_pe
   assign_queues_with_pe_object $error_states_check_queue error_stop_pe



   set jobargs "-o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh" 
   set job_id [submit_job "-pe wrong_start_pe 1-4 $jobargs 5" ]
   wait_for_jobpending $job_id "leeper" 60 1
   set q_state [ wait_for_queue_state $error_states_check_queue "E" 60 ]
   
   ts_log_fine "clearing error state $q_state of queue $error_states_check_queue"
   set catch_result [start_sge_bin "qmod" "-c $error_states_check_queue"]
   ts_log_fine $catch_result
   delete_job $job_id
   set q_state [get_queue_state $error_states_check_queue]
   if { $q_state != "" } {
      ts_log_severe "queue $error_states_check_queue has wrong state" 
   }


   set job_id [submit_job "-pe wrong_stop_pe 1-4 $jobargs 5" ]
   wait_for_jobpending $job_id "leeper" 60 1
   wait_for_jobstart $job_id "leeper" 60
   wait_for_jobend $job_id "leeper" 60 0
   get_qacct $job_id
   ts_log_fine "qacct output for job $job_id:"
   ts_log_fine "failed: $qacct_info(failed)"
   ts_log_fine "exit_status:  $qacct_info(exit_status)"
   set qacct_error [lindex $qacct_info(failed) 0]
   set exit_state  [lindex $qacct_info(exit_status) 0]
   if { $exit_state != 0 } {
      ts_log_severe "exit state not 0: $exit_state"
   }
   if { $qacct_error != 12 } {
      ts_log_severe "failed not 12 (before pestop): $qacct_error"
   }
   
 
   set jobargs "-o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh" 
   set job_id [submit_job "-pe error_start_pe 1-4 $jobargs 5" ]
   wait_for_jobpending $job_id "leeper" 60 1
   set q_state [ wait_for_queue_state $error_states_check_queue "E" 60 ]
   
   ts_log_fine "clearing error state $q_state of queue $error_states_check_queue"
   set catch_result [start_sge_bin "qmod" "-c $error_states_check_queue"]
   ts_log_fine $catch_result
   delete_job $job_id
   set q_state [get_queue_state $error_states_check_queue]
   if { $q_state != "" } {
      ts_log_severe "queue $error_states_check_queue has wrong state" 
   }


   set job_id [submit_job "-pe error_stop_pe 1-4 $jobargs 5" ]
   wait_for_jobpending $job_id "leeper" 60 1
   wait_for_jobstart $job_id "leeper" 60
   wait_for_jobend $job_id "leeper" 60 0
   get_qacct $job_id
   ts_log_fine "qacct output for job $job_id:"
   ts_log_fine "failed: $qacct_info(failed)"
   ts_log_fine "exit_status:  $qacct_info(exit_status)"
   set qacct_error [lindex $qacct_info(failed) 0]
   set exit_state  [lindex $qacct_info(exit_status) 0]
   if { $exit_state != 0 } {
      ts_log_severe "exit state not 0: $exit_state"
   }
   if { $qacct_error != 12 } {
      ts_log_severe "failed not 12 (before pestop): $qacct_error"
   }
   if { [ string first "13" $qacct_info(failed) ] < 0 ||
        [ string first "in pestop" $qacct_info(failed) ] < 0   } {
      ts_log_severe "no in pestop error: $qacct_info(failed)"
   }


   # workaround: in sgeee a job still exists in qmaster after it exited for some time
   #             therefore the pe cannot be deleted
   if {$CHECK_PRODUCT_TYPE == "sgeee"} {
      ts_log_fine "waiting for qmaster to remove jobs from it's internal job list"
      do_wait 60
   }

   del_pe "wrong_start_pe"
   del_pe "wrong_stop_pe"
   del_pe "error_start_pe"
   del_pe "error_stop_pe"
}

proc error_states_submit_error_script {} {
   global ts_config
   global error_states_check_queue

   set jobargs "-o /dev/null -e /dev/null $ts_config(testsuite_root_dir)/scripts/error.sh" 
   set job_id [submit_job "-q $error_states_check_queue $jobargs" ]
   wait_for_jobpending $job_id "leeper" 60 1
   wait_for_jobstart $job_id "leeper" 60
   wait_for_jobend $job_id "leeper" 60 0
   get_qacct $job_id
   ts_log_fine "qacct output for job $job_id:"
   ts_log_fine "failed: $qacct_info(failed)"
   ts_log_fine "exit_status:  $qacct_info(exit_status)"
   if { $qacct_info(exit_status) == 0 } {
      ts_log_severe "job should have not 0 as exit_status"
   } 
}

proc error_states_job_output {} {
   global ts_config CHECK_USER
   global CHECK_FIRST_FOREIGN_SYSTEM_USER
   global error_states_check_queue


   set test_dir  [get_tmp_directory_name "" temp "dir" 1]
   set test_file [get_tmp_file_name "" temp tmp 1]
   set test_local_dir [get_tmp_directory_name "" local "dir" 1]
 
   ts_log_fine "test_dir:       $test_dir"
   ts_log_fine "test_file:      $test_file"
   ts_log_fine "test_local_dir: $test_local_dir"

   set result [start_remote_prog $ts_config(master_host) $CHECK_FIRST_FOREIGN_SYSTEM_USER "mkdir" $test_dir]
   ts_log_fine $result
   if { $prg_exit_state != 0 } {
      ts_log_severe "error creating directory $test_dir"
   }

   set result [start_remote_prog $ts_config(master_host) $CHECK_FIRST_FOREIGN_SYSTEM_USER "touch" $test_file]
   ts_log_fine $result
   if { $prg_exit_state != 0 } {
      ts_log_severe "error creating file $test_file"
   }

   set result [start_remote_prog $ts_config(master_host) $CHECK_FIRST_FOREIGN_SYSTEM_USER "chmod" "700 $test_dir"]
   ts_log_fine $result
   if { $prg_exit_state != 0 } {
      ts_log_severe "error chmod $test_dir"
   }

   set result [start_remote_prog $ts_config(master_host) $CHECK_FIRST_FOREIGN_SYSTEM_USER "chmod" "600 $test_file"]
   ts_log_fine $result
   if { $prg_exit_state != 0 } {
      ts_log_severe "error chmod $test_file"
   }

   set result [start_remote_prog $ts_config(master_host) $CHECK_USER "mkdir" $test_local_dir]
   ts_log_fine $result
   if { $prg_exit_state != 0 } {
      ts_log_severe "error creating directory $test_local_dir"
   }



   set jobargs "-o $test_dir -e /dev/null $ts_config(testsuite_root_dir)/scripts/error.sh" 
   set job_id [submit_job "-q $error_states_check_queue $jobargs" ]
   wait_for_jobpending $job_id "leeper" 60 1
   wait_for_job_state $job_id "E" 60  
   delete_job $job_id

   set jobargs "-o $test_file -e /dev/null $ts_config(testsuite_root_dir)/scripts/error.sh" 
   set job_id [submit_job "-q $error_states_check_queue $jobargs" ]
   wait_for_jobpending $job_id "leeper" 60 1
   wait_for_job_state $job_id "E" 60  
   delete_job $job_id


   set jobargs "-o /dev/null -e $test_dir $ts_config(testsuite_root_dir)/scripts/error.sh" 
   set job_id [submit_job "-q $error_states_check_queue $jobargs" ]
   wait_for_jobpending $job_id "leeper" 60 1
   wait_for_job_state $job_id "E" 60  
   delete_job $job_id
   

   set jobargs "-o /dev/null -e $test_file $ts_config(testsuite_root_dir)/scripts/error.sh" 
   set job_id [submit_job "-q $error_states_check_queue $jobargs" ]
   wait_for_jobpending $job_id "leeper" 60 1
   wait_for_job_state $job_id "E" 60  
   delete_job $job_id


   if { [ llength $ts_config(execd_hosts) ] < 2 } {
      ts_log_config "need min. 2 execd hosts for this check" 
   } else {
      # error queue
      set error_run_queue "[lindex $ts_config(execd_hosts) 1].q"
      set result [start_remote_prog $ts_config(master_host) $CHECK_USER "qsub" "-o /dev/null -e /dev/null -cwd -q $error_run_queue $ts_config(testsuite_root_dir)/scripts/error.sh" prg_exit_state 60 0 $test_local_dir]
      ts_log_fine $result
      set job_id [lindex $result 2]
      wait_for_jobpending $job_id "leeper" 60 1
      wait_for_job_state $job_id "E" 60  
      delete_job $job_id

      #no error queue
      set result [start_remote_prog $ts_config(master_host) $CHECK_USER "qsub" "-o /dev/null -e /dev/null -cwd -q $error_states_check_queue $ts_config(testsuite_root_dir)/scripts/error.sh" prg_exit_state 60 0 $test_local_dir]
      ts_log_fine $result
      set job_id [lindex $result 2]
      wait_for_jobpending $job_id "leeper" 60 1
      wait_for_jobstart $job_id "leeper" 60
      wait_for_jobend $job_id "leeper" 60 0
      
      set result [start_remote_prog $ts_config(master_host) $CHECK_USER "cat" $test_local_dir/Sleeper.o${job_id}]
      ts_log_fine "job output file: $result"
      if { [string first "here is the error" $result] < 0 } {
         ts_log_severe "wrong or no job output"
      }
      set result [start_remote_prog $ts_config(master_host) $CHECK_USER "cat" $test_local_dir/Sleeper.e${job_id}]
      ts_log_fine "job error file: $result"
      if { [string first "biNnN" $result] < 0 } {
         ts_log_severe "wrong or no job error output"
      }
   }

   set result [start_remote_prog $ts_config(master_host) $CHECK_FIRST_FOREIGN_SYSTEM_USER "rmdir" $test_dir]
   ts_log_fine $result
   if { $prg_exit_state != 0 } {
      ts_log_severe "error deleting directory $test_dir"
   }

   set result [start_remote_prog $ts_config(master_host) $CHECK_FIRST_FOREIGN_SYSTEM_USER "rm" $test_file]
   ts_log_fine $result
   if { $prg_exit_state != 0 } {
      ts_log_severe "error deleting file $test_file"
   }

   delete_directory $test_local_dir
}

proc error_states_cleanup  {} {
   global ts_config
   global error_states_qconfig error_states_check_queue


   ts_log_fine "do qdel -uall"
   set catch_result [delete_all_jobs]
   ts_log_fine $catch_result

 
   ts_log_fine "clearing pos. error state of queue $error_states_check_queue"
   set catch_result [start_sge_bin "qmod" "-c $error_states_check_queue"]
   ts_log_fine $catch_result


   ts_log_fine "restoring configuration for queue $error_states_check_queue"
   set_queue $error_states_check_queue error_states_qconfig
}

