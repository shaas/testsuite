#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

#****** checks/complexes ***************************************************
#  NAME
#     complexes -- check complexes functionality
#
#  FUNCTION
#     The purpose of this testsuite check is to test the complete complexes
#     infrastructure.
#
#     It tests the following features:
#        - adding complexes of all data types
#        - deleting the complexes again
#        - setting complex values from a load sensor
#        - setting complex values in global host, exec host and queue 
#          by long and by short name
#        - requesting complexes of all types, by long and by short name
#
#     Further complexes related features are covered by the following tests:
#     consumable_resources
#        - consumables on global, host and queue instance level,
#        - as load thresholds
#        - set by loadsensor
#     issue_1161
#        - qconf -mc (parsing, incomplete line)
#     issue_1198
#        - qconf -sq shows slots in complex_values line
#     issue_1473
#        - performance adding/modifying/deleting large number of complexes
#     pe_ranges
#        - modify complex
#     qconf
#        - qconf -mc (parsing, backslash continuation)
#     qhost
#        - qhost -l <unknown resource>
#     resource_reservation
#        - modify complex, consumables, urgency
#     soft_requests
#        - us of complexes as soft request
#     urgency
#        - modify complex, consumables with urgency
#
#  NOTES
#
#  BUGS
#
#  SEE ALSO
#     checks/qconf
#     checks/qhost
#*******************************************************************************
#
# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"


# define a level initialization procedure:
set check_init_level_procedure "complex_init_level"

# define test's name and run level descriptions
set check_name            "complex"
set check_category        "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_highest_level  1
set check_description(0)  "Test complex attributes and loadsensor"
set check_description(1)  "Test complex attributes and loadsensor and resource quota sets"

# define test's dependencies
set check_needs           "init_core_system" 


# setup and cleanup functions
set check_setup_function complex_setup
set check_setup_level_function complex_setup_level
set check_cleanup_function complex_cleanup

# define test's procedure order
set check_functions ""
lappend check_functions "complex_loadsensor_test"
lappend check_functions "complex_global_host"
lappend check_functions "complex_host"
lappend check_functions "complex_queue"
lappend check_functions "issue_1847"
lappend check_functions "complex_default_request"

global complex_host
global complex_old_config

proc complex_init_level {} {
   global CHECK_ACT_LEVEL
   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0
      }
      "1" {
         return 0
      }
   }
   return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------

proc complex_setup_level {} {
   global ts_config
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "1" {
         if {$ts_config(gridengine_version) < 61} {
            ts_log_config "Need GE >= 61 for runlevel 1"
            return 99
         } 
      }
   }
}

proc complex_setup {} {
   global ts_config CHECK_USER
   global complex_host
   global complex_global_host_backup complex_host_backup
   global complex_global_config_backup
   global complex_complex_backup

   get_config complex_global_config_backup
   set complex_host [host_conf_get_suited_hosts]
   ts_log_fine "using test host $complex_host"

   get_complex complex_complex_backup
   # create new complex attributes
   #           name            short  type    op.   requ.  cons. default  urgency
   set complex(test_integer)  "ti     INT       <=    YES    YES   1        0"
   set complex(test_double)   "td     DOUBLE    >=    NO     NO    0        0"
   set complex(test_time)     "tt     TIME      <=    YES    NO    0:0:0    0"
   set complex(test_memory)   "tm     MEMORY    <=    YES    NO    0        0"
   set complex(test_bool)     "tb     BOOL      ==    YES    NO    0        0"
   set complex(test_string)   "ts     STRING    ==    YES    NO    none     0"
   set complex(test_cstring)  "tc     CSTRING   ==    YES    NO    none     0"
   set complex(test_restring) "tr     RESTRING  ==    YES    NO    none     0"
   set complex(test_hostname) "th     HOST      ==    YES    NO    none     0"
   set_complex complex

   # backup global and specific host
   get_exechost complex_global_host_backup "global"
   get_exechost complex_host_backup $complex_host

   # create a test queue
   set queue(slots)           10
   set queue(load_thresholds) "np_load_avg=10"
   add_queue "complex" $complex_host queue
  
   # disable the all.q
   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }
   disable_queue $queue_list

   # set global config params
   set new_config(load_report_time) "0:0:5"
   set_config_and_propagate new_config

   # enable immediate scheduling to speed up test
   set schedd_conf(flush_submit_sec) 1
   set schedd_config(schedd_job_info)      "true"
   set_schedd_config schedd_conf

   shutdown_daemon $complex_host "execd"
   startup_daemon $complex_host "execd"
   wait_for_load_from_all_queues 300
}

proc complex_cleanup {} {
   global ts_config
   global complex_host complex_global_host_backup complex_host_backup
   global complex_global_config_backup
   global complex_complex_backup

   # cleanup
   delete_all_jobs
   wait_for_end_of_all_jobs 60

   # reset global and specific host setup
   set_exechost complex_global_host_backup "global"
   set_exechost complex_host_backup $complex_host


   # delete the test queue
   del_queue "complex" $complex_host  0 1

   # delete our test complex attributes
   reset_complex complex_complex_backup
   unset complex_complex_backup

   # we changed the schedd config - reset to defaults
   reset_schedd_config

   # enable the all.q
   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }
   enable_queue $queue_list

   # Delete resource quota sets
   if {$ts_config(gridengine_version) >= 61} {
      if {[get_rqs_list rqs_names "" "" 0] == 0} {
         foreach elem $rqs_names {
            ts_log_fine "Removing resource quota sets $elem ...\n"
            del_rqs $elem
         }
      }
   }

   reset_config_and_propagate complex_global_config_backup
}

proc complex_loadsensor_test {} {
   global ts_config CHECK_USER CHECK_ACT_LEVEL
   global complex_host

   if { $CHECK_ACT_LEVEL == 0 } {
      # we install a loadsensor delivering the above complex attributes
      # backup host config and make sure, load_sensor gets deleted at restore
      get_config complex_old_config $complex_host
      get_config complex_old_saved_config $complex_host
      if {![info exists complex_old_config(load_sensor)]} {
         set complex_old_config(load_sensor) "" 
      }

      # our load sensor needs a file in $SGE_ROOT
      set filename "$ts_config(product_root)/testsuite_dns_domain"
      set fout [open $filename "w"]
      puts $fout $ts_config(dns_domain)
      close $fout
      wait_for_remote_file $complex_host $CHECK_USER $filename 

      # install loadsensor
      if {$ts_config(gridengine_version) <= 60 || [is_61AR]} {
         set new_config(load_sensor) "$ts_config(testsuite_root_dir)/scripts/loadsensor.sh"
      } else {
         set new_config(load_sensor) "$ts_config(testsuite_root_dir)/scripts/loadsensor_multihost.sh"
      }
      set_config_and_propagate new_config $complex_host

      # wait for loadsensor to have effect
      set time 0
      get_qconf_se_info $complex_host
      set did_not_appear 1
      set load_value_names ""
      while {$did_not_appear == 1} {
         set did_not_appear 0
         if {$time >= 120} {
            ts_log_severe "following load values were not reported: $load_value_names"

            # reset host complex, stop loadsensor
            ts_log_fine "resetting configuration for host $complex_host"
            reset_config complex_old_saved_config $complex_host
            return
         }
         set load_value_names ""
         get_qconf_se_info $complex_host
         if { [string first "test_string=TEST_ARCH" $qconf_se_info(load_values) ] < 0 } {
            set did_not_appear 1
            append load_value_names "test_string "
         }
         if { [string first "test_hostname=" $qconf_se_info(load_values) ] < 0 } {
            set did_not_appear 1
            append load_value_names test_hostname
         }
         if { [string first "test_double=55.55" $qconf_se_info(load_values) ] < 0 } {
            set did_not_appear 1
            append load_value_names "test_double "
         }
         if { [string first "test_memory=123456789" $qconf_se_info(load_values) ] < 0 } {
            set did_not_appear 1
            append load_value_names "test_memory "
         }
         if { [string first "test_integer=123456" $qconf_se_info(load_values) ] < 0 } {
            set did_not_appear 1
            append load_value_names "test_integer "
         }
   
         if {$did_not_appear == 1} {
            ts_log_fine "following load values were not reported: $load_value_names"
            after 2000
            incr time 2
         }
      }

      set jobargs "-o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh" 
      set job_ids ""
      lappend job_ids [submit_job "-l test_string=TEST_ARCH $jobargs 30"]
      lappend job_ids [submit_job "-l test_hostname=$complex_host $jobargs 35"]
      set not_requestable_job [submit_job "-l test_double=55.55 $jobargs 60" 0 ]
      if {$not_requestable_job != -10} {
          ts_log_severe "resource test_double should not be requestable"
      }
      lappend job_ids [submit_job "-l test_memory=123321 $jobargs 40"]
      lappend job_ids [submit_job "-l test_integer=123456 $jobargs 45"]
    
      foreach elem $job_ids {
         if {$elem >= 0} {
            wait_for_jobstart $elem "Sleeper" 60 1 1
         }
      }
      foreach elem $job_ids {
         if {$elem >= 0} {
            wait_for_jobend $elem "Sleeper" 60 0
         }
      }

      # reset host complex, stop loadsensor
      ts_log_fine "resetting configuration for host $complex_host"
      reset_config complex_old_saved_config $complex_host

      # wait for loadsensor to be down
      set time 0
      get_qconf_se_info $complex_host
      while {[string first "test_string=TEST_ARCH" $qconf_se_info(load_values) ] >= 0} {
         if {$time >= 120} {
            ts_log_severe "load_sensor values didn't dispappear"
            break
         }
         incr time 1
         after 1000
         get_qconf_se_info $complex_host
      }
   
      # delete a file the loadsensor script was using
      delete_file "$ts_config(product_root)/testsuite_dns_domain"
   }
}

#****** check.60/complex_run_job() *********************************************
#  NAME
#     complex_run_job() -- submits a job with the given complex request
#
#  SYNOPSIS
#     complex_run_job { scenario variable value submittable pending 
#     { runnable "0" } } 
#
#  FUNCTION
#     The function will submit a job with the given complex request and will
#     send a error mail if the expected job behaviour (submitable/pending) differs
#     from the real behaviour 
#
#  INPUTS
#     scenario         - scenario name printed in error output
#     variable         - complex to be requested, "" if no should be requested
#     value            - value to be requested
#     submittable      - the job is submittable
#     pending          - the job is not runnable (will stay pending)
#     { runnable "0" } - ???
#
#*******************************************************************************
proc complex_run_job {scenario variable value submittable pending { runnable "0" } } {
   # Added variable "runnable" to allow to run cases which cause error, but which we
   # will allow to run so we can complete the test run. These are bugs in qsub
   # Once the qsub bug is resolved, these parts of the code will be removed.
   # Namely, where we invoke ts_log_info.
   
   global ts_config

   set job_script "$ts_config(product_root)/examples/jobs/sleeper.sh 5"
   if {$variable == ""} {
      set job_args   "-o /dev/null -j y"
   } else {
      set job_args   "-o /dev/null -j y -l $variable=$value"
   }
   set job_id [submit_job "$job_args $job_script" $submittable]
   
   # if job submission shall fail, jobid may not be > 0
   if {!$submittable} { 
      if {$job_id > 0} {
         if {$runnable == 1} { 
            ts_log_info "scenario $scenario, $job_args should have failed"
         } else {
            ts_log_severe "scenario $scenario, $job_args should have failed"
        }
         delete_job $job_id
      } else {
         ts_log_fine "ok, submission failed with status $job_id"
      }
   } else {
      # submit errors are handled in submit_job, but don't continue, if submission failed
      if {$job_id > 0} {
         # job should start within some seconds - wait 10 seconds
         set ret [wait_for_jobstart $job_id "Sleeper" 10 0 1]
         # test case: job should not be scheduled
         if {$pending} {
            if {$ret == 0} {
               if {$runnable == 1} { 
                  ts_log_info "scenario $scenario, $job_args should not be running"
               } else {
                  ts_log_severe "scenario $scenario, $job_args should not be running"
               }
            } else {
               ts_log_fine "ok, job is not running"
            }

            delete_job $job_id
         } else {
            # test case: job should be scheduled and running by now
            if {$ret == 0} {
               ts_log_fine "ok, job is running"
               wait_for_jobend $job_id "Sleeper" 60 0
            } else {
               get_qstat_j_info $job_id
               set schedd_info $qstat_j_info(scheduling info)
               if {$runnable == 1} { 
                  ts_log_info "scenario $scenario, $job_args should be running\n$schedd_info"
               } else {   
                  ts_log_severe "scenario $scenario, $job_args should be running\n$schedd_info"
               }
               delete_job $job_id
            }
         }
      }
   }
}

proc complex_global_host {} {
   global ts_config CHECK_ACT_LEVEL

   if { $CHECK_ACT_LEVEL == 0 } {
      # set all test attributes in global host
      set config(complex_values)    "test_integer=1"
      append config(complex_values) ",td=10.0"
      append config(complex_values) ",tt=0:10:0"
      append config(complex_values) ",tm=100M"
      append config(complex_values) ",tb=TRUE"
      append config(complex_values) ",tc=GLobaL"
      append config(complex_values) ",tr=global"
      set_exechost config "global"
   } elseif { $CHECK_ACT_LEVEL == 1 } {
      # set all test attributes in global host
      set config(complex_values)    "test_integer=100"
      append config(complex_values) ",td=10.0"
      append config(complex_values) ",tt=1:00:0"
      append config(complex_values) ",tm=1000M"
      append config(complex_values) ",tb=TRUE"
      append config(complex_values) ",tc=GLobaL"
      append config(complex_values) ",tr=global"
      set_exechost config "global"

      # set all tests attributes in resource quota sets
      set rqs_name              "test_integer"
      set rules                  ""
      lappend rules                  "to test_integer=1"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_time"
      set rules                  ""
      lappend rules              "to tt=0:10:0"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_memory"
      set rules                  ""
      lappend rules              "to tm=100M"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_boolean"
      set rules                  ""
      lappend rules              "to tb=TRUE"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_cstring"
      set rules                  ""
      lappend rules              "to tc=GLobaL"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_restring"
      set rules                  ""
      lappend rules              "to tr=global"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"
 
      add_rqs rqs_charray
   }

   #               scenario variable       value     submittable pending  runnable
   complex_run_job "global" "ti"           1         1           0
   complex_run_job "global" "test_integer" 2         1           1
   complex_run_job "global" "ti"           "X"       0           0

   complex_run_job "global" "td"           2         0           0
   complex_run_job "global" "test_double"  2         0           0
   complex_run_job "global" "td"           "X"       0           0

   complex_run_job "global" "tt"           "0:8:0"   1           0
   complex_run_job "global" "test_time"    "0:11:0"  1           1
   complex_run_job "global" "tt"           "500"     1           0
   complex_run_job "global" "tt"           "800"     1           1
   complex_run_job "global" "tt"           "X"       0           1

   complex_run_job "global" "tm"           "50M"     1           0
   complex_run_job "global" "test_memory"  "150M"    1           1
   complex_run_job "global" "tm"           "X"       0           0

   complex_run_job "global" "tb"           "TRUE"    1           0
   complex_run_job "global" "test_bool"    "FALSE"   1           1
   complex_run_job "global" "tb"           "X"       0           0
  
   complex_run_job "global" "tc"           "global"  1           0
   complex_run_job "global" "tc"           "xxxbal"  1           1
 
   # For tr (test_restring), we will check all possible combinations genex
   # for "global" for both "tr" and "test_restring" for the complex' name. We also vary
   # whether the resource is pending (1) or not (0). For broken tests, we add the
   # runnuble paramter with value 1.

   complex_run_job "global" "tr"           "global"  1           0
   complex_run_job "global" "tr"           "*lobal"  1           0
   complex_run_job "global" "tr"           "globa*"  1           0
   complex_run_job "global" "tr"           "*loba*"  1           0
   complex_run_job "global" "tr"           "*global" 1           0
   complex_run_job "global" "tr"           "global*" 1           0
   complex_run_job "global" "tr"           "glo*al"  1           0
   complex_run_job "global" "tr"           "*global*" 1          0
   complex_run_job "global" "tr"           "*"       1           0
   complex_run_job "global" "tr"           "**global*" 1         0
   complex_run_job "global" "tr"           "**lobal*" 1          0
   complex_run_job "global" "tr"           "**al"    1           0
   complex_run_job "global" "tr"           "**"      1           0
   complex_run_job "global" "tr"           "gl*b*l"  1           0
#
   complex_run_job "global" "tr"           "xlobal"  1           1
#
   complex_run_job "global" "tr"           ".lobal"  1           1
   complex_run_job "global" "tr"           "g.obal"  1           1
   complex_run_job "global" "tr"           "globa."  1           1

   # Complex values with "?" seem to be broken. in some cases, so we add third "runnable"
   # parameter

   complex_run_job "global" "tr"           "?lobal"  1           0
   complex_run_job "global" "tr"           "globa?"  1           0
   complex_run_job "global" "tr"           "?loba?"  1           0
   complex_run_job "global" "tr"           "?global" 1           1
   complex_run_job "global" "tr"           "global?" 1           1
   complex_run_job "global" "tr"           "glo?al"  1           0
   complex_run_job "global" "tr"           "?global?" 1          1
   complex_run_job "global" "tr"           "?"       1           1
   complex_run_job "global" "tr"           "??global" 1          1
   complex_run_job "global" "tr"           "??lobal" 1           1
   complex_run_job "global" "tr"           "global??" 1          1
   complex_run_job "global" "tr"           "??al"    1           1
   complex_run_job "global" "tr"           "??"      1           1
   complex_run_job "global" "tr"           "gl?b?l"  1           0
   complex_run_job "global" "tr"           "*?"      1           0

   # Need to escape the \[a-z\] so it is not interpreted by Tcl

   complex_run_job "global" "tr"           "\[a-z\]lobal"  1           0
   complex_run_job "global" "tr"           "\[z-a\]lobal"  1           1
   complex_run_job "global" "tr"           "\[a-g\]lobal"  1           0
   complex_run_job "global" "tr"           "\[g-z\]lobal"  1           0
   complex_run_job "global" "tr"           "\[a-f\]lobal"  1           1
   complex_run_job "global" "tr"           "\[h-z\]lobal"  1           1
   complex_run_job "global" "tr"           "\[g\]lobal"  1           0
#
   complex_run_job "global" "tr"           "g\[a-z\]obal"  1           0
   complex_run_job "global" "tr"           "g\[z-a\]obal"  1           1
   complex_run_job "global" "tr"           "g\[a-l\]obal"  1           0
   complex_run_job "global" "tr"           "g\[a-k\]obal"  1           1
   complex_run_job "global" "tr"           "g\[m-z\]obal"  1           1
   complex_run_job "global" "tr"           "g\[l\]obal"  1           0
#
   complex_run_job "global" "tr"           "globa\[a-z\]"  1           0
   complex_run_job "global" "tr"           "globa\[a-l\]"  1           0
   complex_run_job "global" "tr"           "globa\[a-k\]"  1           1
   complex_run_job "global" "tr"           "globa\[m-z\]"  1           1
   complex_run_job "global" "tr"           "globa\[l\]"  1           0
#
   complex_run_job "global" "tr"           "\"local\|global\""  1           0
   complex_run_job "global" "tr"           "\"global\|local\""  1           0
   complex_run_job "global" "tr"           "\"glo*al\|lo\[c\]al\""  1           0
   complex_run_job "global" "tr"           "\"?glo*al?\|lo\[c\]al\""  1      1 1
#
   # Now we use the full name of the complex, "test_restring"

   complex_run_job "global" "test_restring"           "global"  1           0
   complex_run_job "global" "test_restring"           "*lobal"  1           0
   complex_run_job "global" "test_restring"           "globa*"  1           0
   complex_run_job "global" "test_restring"           "*loba*"  1           0
   complex_run_job "global" "test_restring"           "*global"  1           0
   complex_run_job "global" "test_restring"           "global*"  1           0
   complex_run_job "global" "test_restring"           "glo*al"  1           0
   complex_run_job "global" "test_restring"           "*global*" 1          0
   complex_run_job "global" "test_restring"           "*"      1           0
   complex_run_job "global" "test_restring"           "**global*" 1          0
   complex_run_job "global" "test_restring"           "**lobal*" 1          0
   complex_run_job "global" "test_restring"           "**al" 1          0
   complex_run_job "global" "test_restring"           "**" 1          0
   complex_run_job "global" "test_restring"           "gl*b*l" 1          0
#
   complex_run_job "global" "test_restring"           "xlobal"  1           1
#
   complex_run_job "global" "test_restring"           ".lobal"  1           1
   complex_run_job "global" "test_restring"           "g.obal"  1           1
   complex_run_job "global" "test_restring"           "globa."  1           1
 #
   complex_run_job "global" "test_restring"           "?lobal"  1           0 1
   complex_run_job "global" "test_restring"           "globa?"  1          0 1
   complex_run_job "global" "test_restring"           "?loba?"  1           0 1
   complex_run_job "global" "test_restring"           "?global"  0           0 1
   complex_run_job "global" "test_restring"           "global?"  0           0 1
   complex_run_job "global" "test_restring"           "glo?al"  1           0 1
   complex_run_job "global" "test_restring"           "?global?" 0          0 1
   complex_run_job "global" "test_restring"           "?"      0           0 1
   complex_run_job "global" "test_restring"           "??global" 0          0 1
   complex_run_job "global" "test_restring"           "??lobal" 0            0 1
   complex_run_job "global" "test_restring"           "global??"  0           0 1
   complex_run_job "global" "test_restring"           "??al"     0            0 1
   complex_run_job "global" "test_restring"           "??"       0            0 1
   complex_run_job "global" "test_restring"           "gl?b?l" 1          0 1
   complex_run_job "global" "test_restring"           "*?"       1            0 1
#
   complex_run_job "global" "test_restring"           "\[a-z\]lobal"  1           0
   complex_run_job "global" "test_restring"           "\[z-a\]lobal"  1           1
   complex_run_job "global" "test_restring"           "\[a-g\]lobal"  1           0
   complex_run_job "global" "test_restring"           "\[g-z\]lobal"  1           0
   complex_run_job "global" "test_restring"           "\[a-f\]lobal"  1           1
   complex_run_job "global" "test_restring"           "\[h-z\]lobal"  1           1
   complex_run_job "global" "test_restring"           "\[g\]lobal"  1           0
#
   complex_run_job "global" "test_restring"           "g\[a-z\]obal"  1           0
   complex_run_job "global" "test_restring"           "g\[z-a\]obal"  1           1
   complex_run_job "global" "test_restring"           "g\[a-l\]obal"  1           0
   complex_run_job "global" "test_restring"           "g\[a-k\]obal"  1           1
   complex_run_job "global" "test_restring"           "g\[m-z\]obal"  1           1
   complex_run_job "global" "test_restring"           "g\[l\]obal"  1           0
#
   complex_run_job "global" "test_restring"           "globa\[a-z\]"  1           0
   complex_run_job "global" "test_restring"           "globa\[z-a\]"  1           1
   complex_run_job "global" "test_restring"           "globa\[a-l\]"  1           0
   complex_run_job "global" "test_restring"           "globa\[a-k\]"  1           1
   complex_run_job "global" "test_restring"           "globa\[m-z\]"  1           1
   complex_run_job "global" "test_restring"           "globa\[l\]"  1           0
#
   complex_run_job "global" "test_restring"           "\"local\|global\""  1           0
   complex_run_job "global" "test_restring"           "\"global\|local\""  1           0
   complex_run_job "global" "test_restring"           "\"glo*al\|lo\[c\]al\""  1        0
   complex_run_job "global" "test_restring"           "\"?glo*al\|lo\[c\]al\""  1   1 1
#

   set config(complex_values) "tr=global\*test"  
   set_exechost config "global"
   if { $CHECK_ACT_LEVEL == 1 } {
      unset rqs_charray
      set rqs_name              "test_restring"
      set rules                  ""
      lappend rules              "to tr=global\*test"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"
 
      mod_rqs rqs_charray "test_restring"
   }
#
   complex_run_job "global" "tr"                      "global*test"  1           0  
   complex_run_job "global" "tr"                      "global\?test"  1           0   
   complex_run_job "global" "tr"                      "globaltest"  1           1   1
#
   complex_run_job "global" "test_restring"           "global*test"  1           0  
   complex_run_job "global" "test_restring"           "global\*test"  1           0 
   complex_run_job "global" "test_restring"           "globaltest"  1           1  1
#
   set config(complex_values) "tr=global\?test"  
   set_exechost config "global"
   if { $CHECK_ACT_LEVEL == 1 } {
      unset rqs_charray
      set rqs_name              "test_restring"
      set rules                  ""
      lappend rules              "to tr=global\?test"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"
 
      mod_rqs rqs_charray "test_restring"
   }
#
   complex_run_job "global" "tr"                      "global*test"  1           0  
   complex_run_job "global" "tr"                      "global\?test"  1           0  
   complex_run_job "global" "tr"                      "globaltest"  1           1 
#
   complex_run_job "global" "test_restring"           "global*test"  1           0 
   complex_run_job "global" "test_restring"           "global\?test"  1           0  
   complex_run_job "global" "test_restring"           "globaltest"  1           1  1
#
   # cleanup
   set config(complex_values) "NONE"
   set_exechost config "global"

   if { $CHECK_ACT_LEVEL == 1 } {
      if {[get_rqs_list rqs_names "" "" 0] == 0} {
         foreach elem $rqs_names {
            ts_log_fine "Removing resource quota sets $elem ...\n"
            del_rqs $elem
         }
      }
   }
}

proc complex_host {} {
   global ts_config CHECK_ACT_LEVEL
   global complex_host

   if { $CHECK_ACT_LEVEL == 0 } {
      # set a consumable in global host, to be overwritten by specific host
      set config(complex_values)    "test_integer=1"
      append config(complex_values) ",ts=global"
      set_exechost config "global"

      # set host specific complexes
      set config(complex_values)    "ti=2"
      append config(complex_values) ",td=10"
      append config(complex_values) ",tt=600"
      append config(complex_values) ",tm=104857600"
      append config(complex_values) ",tb=FALSE"
      append config(complex_values) ",ts=host"
      append config(complex_values) ",th=$ts_config(master_host)"
      set_exechost config $complex_host
   } elseif { $CHECK_ACT_LEVEL == 1 } {
      # set a consumable in global host, to be overwritten by specific host
      set config(complex_values)    "test_integer=100"
      append config(complex_values) ",ts=global"
      set_exechost config "global"

      # set host specific complexes
      set config(complex_values)    "ti=80"
      append config(complex_values) ",td=10"
      append config(complex_values) ",tt=1600"
      append config(complex_values) ",tm=154857600"
      append config(complex_values) ",tb=FALSE"
      append config(complex_values) ",ts=host"
      append config(complex_values) ",th=$ts_config(master_host)"
      set_exechost config $complex_host

      # set all tests attributes in resource quota sets
      set rqs_name              "test_integer"
      set rules                  ""
      lappend rules                  "hosts $complex_host to test_integer=1"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_time"
      set rules                  ""
      lappend rules              "hosts $complex_host to tt=600"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_memory"
      set rules                  ""
      lappend rules              "hosts $complex_host to tm=104857600"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_boolean"
      set rules                  ""
      lappend rules              "hosts $complex_host to tb=FALSE"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_string"
      set rules                  ""
      lappend rules              "hosts $complex_host to ts=host"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_host"
      set rules                  ""
      lappend rules              "hosts $complex_host to th=$ts_config(master_host)"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"
 
      add_rqs rqs_charray
   }

   #               szenario variable       value     submittable pending
   complex_run_job "host"   "ti"           1         1           0
   complex_run_job "host"   "ti"           2         1           1  ;# exec host can only set more restrictive value!

   complex_run_job "host"   "td"           2         0           0

   complex_run_job "host"   "tt"           "0:8:0"   1           0
   complex_run_job "host"   "tt"           "0:11:0"  1           1
   complex_run_job "host"   "tt"           "500"     1           0
   complex_run_job "host"   "tt"           "800"     1           1

   complex_run_job "host"   "tm"           "50M"     1           0
   complex_run_job "host"   "test_memory"  "150M"    1           1

   complex_run_job "host"   "tb"           "TRUE"    1           1
   complex_run_job "host"   "test_bool"    "FALSE"   1           0
   complex_run_job "host"   "tb"           "1"       1           1
   complex_run_job "host"   "test_bool"    "0"       1           0

   complex_run_job "host" "ts"           "global"  1           1
   complex_run_job "host" "ts"           "host"    1           1 
   complex_run_job "host" "ts"           "Global"  1           1
  
   complex_run_job "host" "th"           "$ts_config(master_host)"      1           0
   complex_run_job "host" "th"           "this_host_is_not_resolvable"  0           0
  
   # cleanup
   set config(complex_values) "NONE"
   set_exechost config "global"
   set_exechost config $complex_host

   if { $CHECK_ACT_LEVEL == 1 } {
      if {[get_rqs_list rqs_names "" "" 0] == 0} {
         foreach elem $rqs_names {
            ts_log_fine "Removing resource quota sets $elem ...\n"
            del_rqs $elem
         }
      }
   }
}

proc complex_queue {} {
   global ts_config CHECK_ACT_LEVEL
   global complex_host

   if { $CHECK_ACT_LEVEL == 0 } {
      # set a consumable in global host, to be overwritten by specific host
      set config(complex_values)    "test_integer=3"
      append config(complex_values) ",ts=global"
      set_exechost config "global"

      # set host specific complexes
      set config(complex_values)    "ti=2"
      append config(complex_values) ",ts=host"
      set_exechost config $complex_host

      set config(complex_values)    "ti=1"
      append config(complex_values) ",td=-10"
      append config(complex_values) ",tt=0:10:0"
      append config(complex_values) ",tm=102400K"
      append config(complex_values) ",tb=1"
      append config(complex_values) ",ts=queue"
      mqattr "complex_values" $config(complex_values) [get_queue_instance "complex" $complex_host]
   } elseif { $CHECK_ACT_LEVEL == 1 } {
      # set a consumable in global host, to be overwritten by specific host
      set config(complex_values)    "test_integer=100"
      append config(complex_values) ",ts=global"
      set_exechost config "global"

      # set host specific complexes
      set config(complex_values)    "ti=80"
      append config(complex_values) ",ts=global"
      set_exechost config $complex_host

      set config(complex_values)    "ti=70"
      append config(complex_values) ",td=-10"
      append config(complex_values) ",tt=1:00:0"
      append config(complex_values) ",tm=152400K"
      append config(complex_values) ",tb=1"
      append config(complex_values) ",ts=global"
      mqattr "complex_values" $config(complex_values) [get_queue_instance "complex" $complex_host]

      # set all tests attributes in resource quota sets
      set rqs_name              "test_integer"
      set rules                  ""
      lappend rules                  "queues complex to test_integer=1"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_time"
      set rules                  ""
      lappend rules              "queues complex to tt=0:10:0"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_memory"
      set rules                  ""
      lappend rules              "queues complex to tm=102400K"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_string"
      set rules                  ""
      lappend rules              "queues complex to ts=xxx"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      set rqs_name              "test_boolean"
      set rules                  ""
      lappend rules              "queues complex to tb=1"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      add_rqs rqs_charray
   }
   

   #               szenario variable       value     submittable pending
   complex_run_job "queue"  "ti"           1         1           0
   complex_run_job "queue"  "ti"           2         1           1

   complex_run_job "queue"  "td"           2         0           0

   complex_run_job "queue"  "tt"           "0:8:0"   1           0
   complex_run_job "queue"  "tt"           "0:11:0"  1           1

   complex_run_job "queue"  "tm"           "50M"     1           0
   complex_run_job "queue"  "test_memory"  "150M"    1           1

   complex_run_job "queue"  "tb"           "TRUE"    1           0
   complex_run_job "queue"  "test_bool"    "FALSE"   1           1
   complex_run_job "queue"  "tb"           "1"       1           0
   complex_run_job "queue"  "test_bool"    "0"       1           1

   complex_run_job "queue" "ts"           "global"   1           1  
   complex_run_job "queue" "ts"           "host"     1           1 
   complex_run_job "queue" "ts"           "queue"    1           1
 
   # cleanup
   set config(complex_values) "NONE"
   set_exechost config "global"
   set_exechost config $complex_host
   mqattr "complex_values" "NONE" [get_queue_instance "complex" $complex_host]

   if { $CHECK_ACT_LEVEL == 1 } {
      if {[get_rqs_list rqs_names "" "" 0] == 0} {
         foreach elem $rqs_names {
            ts_log_fine "Removing resource quota sets $elem ...\n"
            del_rqs $elem
         }
      }
   }
}

proc complex_default_request {} {
   global ts_config CHECK_ACT_LEVEL
   global complex_host

   if {$CHECK_ACT_LEVEL == 0} {
      set config(complex_values)    "ti=0"
      set_exechost config "global"
   } elseif {$CHECK_ACT_LEVEL == 1} {
      set config(complex_values)    "ti=100"
      set_exechost config "global"

      set rqs_name              "test_integer"
      set rules                  ""
      lappend rules                  "to test_integer=0"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "true"

      add_rqs rqs_charray

   }

   #               scenario                variable       value     submittable pending  
   complex_run_job "default_request"       "ti"           "0"       1           0       
   complex_run_job "default_request"       ""             ""        1           1      

   if {$CHECK_ACT_LEVEL == 1} {
      if {[get_rqs_list rqs_names "" "" 0] == 0} {
         foreach elem $rqs_names {
            ts_log_fine "Removing resource quota sets $elem ...\n"
            del_rqs $elem
         }
      }
   }
}

proc complex_test_rattr { value } {
    global ts_config
    global complex_host

    # test queue?
    set ret [mqattr "complex_values" $value [get_queue_instance "complex" $complex_host] 0 ]
    if { $ret == 0 } {
      ts_log_severe "qconf -rattr does not reject invalid complex $value"
    } else {
      ts_log_fine "rejected, OK!"
    }

    # test host
    set ret [mhattr "complex_values" $value $complex_host 0 ]
    if { $ret == 0 } {
      ts_log_severe "qconf -me does not reject invalid complex $value"
    } else {
      ts_log_fine "rejected, OK!"
    }
}

proc issue_1847 {} {
   global ts_config CHECK_ACT_LEVEL
   global complex_host

   # this fix has not yet been merged to V60s2_BRANCH
   if {$ts_config(gridengine_version) >= 61} {
      if {$CHECK_ACT_LEVEL == 0} {
         complex_test_rattr "tt=x"
         complex_test_rattr "ti=x"
         complex_test_rattr "td=x"
         complex_test_rattr "tb=x"
         complex_test_rattr "tb=null"

         # cleanup
         mqattr "complex_values" "NONE" [get_queue_instance "complex" $complex_host]
         mhattr "complex_values" "NONE" $complex_host
      }
   }
}
