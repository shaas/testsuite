#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env
global config_backup

#set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "cluster_config_init_level"

# define test's name and run level descriptions
set check_name            "cluster_config"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "check invalid values of max_job_deletion_time"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function cluster_config_setup
set check_cleanup_function cluster_config_cleanup



# define test's procedure order
set check_functions {}
lappend check_functions "cluster_config_test1"

global cluster_config_test_hosts
global cluster_config_saved_slot_count

proc cluster_config_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }      
   }
   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc cluster_config_setup {} {
   global config_backup

   get_config config_backup     
}

proc cluster_config_cleanup {} {
   global config_backup

   set_config config_backup   
}


proc cluster_config_test1 {} {
   global CHECK_USER ts_config
   global cluster_config_test_hosts CHECK_ACT_LEVEL
   global messages_name
   
   set hostname  [lindex $ts_config(execd_nodes) 0]

   # get path of hosts messages file
   set messages_name "[get_qmaster_spool_dir]/messages"
   
   set tail_id [open_remote_spawn_process $ts_config(master_host) $CHECK_USER /usr/bin/tail "-f $messages_name"]
   set skipping 1
   set sp_id [ lindex $tail_id 1 ]
   set res "1"

   # now set an invalid max_job_deletion_time in qmaster params
   set new_config(qmaster_params) "MAX_JOB_DELETION_TIME=900"
   set_config new_config

   # check to see if the invalid value is logged
   set expected_pattern [translate_macro MSG_CONF_INVALIDPARAM_SSI "qmaster_params" "max_job_deletion_time" "*"]
   while {$skipping == 1} {
      set timeout 5 
      expect {
         -i $sp_id $expected_pattern {
             set res "0"
         }
         -i $sp_id timeout {
            set skipping 0
         }
      }
   }
   close_spawn_process $tail_id

   if { $res == "1" } {      
      ts_log_severe "checking of qmaster param was not ok"         
   }    
}
