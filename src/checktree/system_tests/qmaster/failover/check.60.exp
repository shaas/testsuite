#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

global check_name check_description check_needs check_functions
global check_category check_root_access_needs  check_highest_level

set check_root_access_needs  "yes"


set check_name           "qmaster_failover"
set check_category       "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_highest_level  0
set check_description(0) "checking status of queue with attribute"
set check_description(1) "initial_state after qmaster failover"
set check_needs          "init_core_system"
#
# Setup function
#
set check_setup_function "qmaster_failover_setup"
#
# Cleanup function
#
set check_cleanup_function "qmaster_failover_cleanup"
#
# The test functions
#
set check_functions      "";
lappend check_functions  "check_queue_state"
#
# Fun starts here.
#
proc qmaster_failover_setup {} {
   global CHECK_OUTPUT
   global test_hostname

   #
   # We might come up with some more elaborate host selection
   # criteria in the future.
   # 
   set test_hostname [ host_conf_get_suited_hosts 1 "sol-sparc64" ]
   #
   # ... just in case we could not cleanup preceeding test environment.
   #
   if {[lsearch [get_queue_list] "test.q"] != -1} {
      puts $CHECK_OUTPUT "Deleting test.q"
      del_queue test.q $test_hostname 0 1
   }

   return 0
}

proc qmaster_failover_cleanup {} {
   global CHECK_OUTPUT test_hostname 
   #
   # Clean up test.q if it's still around.
   #
   if {[lsearch [get_queue_list] "test.q"] != -1} {
      puts $CHECK_OUTPUT "Deleting test.q"
      del_queue test.q $test_hostname 0 1
   }
   return 0
}
#
# The point about this test is that queues with initial_state == disabled
# should not enter state DISABLED after failure of qmaster if previously
# enabled.
#
proc check_queue_state {} {
   global CHECK_OUTPUT 
   global test_hostname
   global ts_config

   #
   # Test Plan
   # =========
   #
   # * shutdown and restart qmaster (sort of paranoia) 
   # * create a new queue with attribute initial_state == disabled
   # * make sure that queue is disabled
   # * enable queue and verify status
   # * terminate and restart qmaster
   # * let execd's re-connect to qmaster and ship queue status
   # * check if queue still enabled, otherwise test failed
   #
   puts $CHECK_OUTPUT \
        "checking state of queue with with initial_state =\
        disabled for qmaster failover"

   #
   # Start from scratch to obtain with defined state.
   #
   shutdown_qmaster $ts_config(master_host) [get_qmaster_spool_dir]
   #
   # ... start over and sync with execd's.
   #
   startup_qmaster 0 
   wait_for_load_from_all_queues 60
   #
   # Create test queue with attribute initial_state DISABLED.
   #
   set testq(slots) 10
   set testq(initial_state) "disabled"
   add_queue test.q $test_hostname testq
   set qname [get_queue_instance test.q $test_hostname]
   puts $CHECK_OUTPUT "Created test queue $qname"
   #
   # Queue should be disabled; better x-check.
   #
   set q_state [ get_queue_state $qname ]
   if { $q_state == "d" } {
      puts $CHECK_OUTPUT "Queue $qname state DISABLED as expected"
   } else {
      add_proc_error "check_queue_state" \
                     -1 \
                     "unexpected state for queue $qname: $q_state.\
                      Should be: disabled"
      return
   }
   #
   # OK, enable queue
   #
   enable_queue $qname
   #
   # Again, x-check if queue is enabled.
   #
   set q_state [ get_queue_state $qname ]
   if { $q_state == "" } {
      puts $CHECK_OUTPUT "Queue $qname state ENABLED as expected"
   } else {
      add_proc_error "check_queue_state" \
                     -1 \
                     "unexpected state for $qname: $q_state.\
                     Should be enabled"
      return
   }
    
   #
   # Shutdown and restart qmaster
   #
   shutdown_qmaster $ts_config(master_host) [get_qmaster_spool_dir]
   startup_qmaster 0
   #
   # Give execd's some time to re-register with new qmaster and
   # update load report and queue status. 
   #
   wait_for_load_from_all_queues 60
   set q_state [ get_queue_state $qname ]
   if { $q_state == "" } {
      #
      # Queue is enabled. All well, exit from here.
      #
      puts $CHECK_OUTPUT "Queue $qname state ENABLED as expected"
   } else {
      #
      # We are having problems here. Report error and bail out.
      #
      add_proc_error "check_queue_state" \
                     -1 \
                     "unexpected state for $qname: $q_state.\
                     Should be enabled"
   }
}

