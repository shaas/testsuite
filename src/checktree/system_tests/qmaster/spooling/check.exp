#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

# set check_root_access_needs "yes"


# define a level initialization procedure:
set check_init_level_procedure "qmaster_spooling_init_level"

# define test's name and run level descriptions
set check_name "qmaster_spooling"
set check_root_access_needs  "yes"
set check_category "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_highest_level 0
set check_description(0) "check qmaster spooling"

# define test's dependencies
set check_needs "init_core_system" 

# setup and cleanup functions
set check_setup_function "qmaster_spooling_setup"
set check_cleanup_function "qmaster_spooling_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "qmaster_spooling_prj_restart"
lappend check_functions "qmaster_spooling_rqs_restart"

proc qmaster_spooling_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0
      }
   }

   return -1
}

# -------- local test procedures -----------------------------------------------

proc qmaster_spooling_setup {} {
}

# JG: TODO: move to sge_procedures
proc shutdown_and_restart_qmaster {} {
   global ts_config
   shutdown_qmaster $ts_config(master_host) [get_qmaster_spool_dir]
   startup_qmaster 0
}

proc cmp_config { conf_a conf_b fields check} {
   upvar $conf_a a
   upvar $conf_b b

   # check all fields
   foreach field $fields {
      # error - field name doesn't exist
      if { ![info exists a($field)] } {
         add_proc_error "$check" -1 "original object doesn't contain attribute $field"
      } else {
         # error - field name doesn't exist
         if { ![info exists b($field)] } {
            add_proc_error "$check" -1 "reread object doesn't contain attribute $field"
         } else {
            # error - fields differ
            if { [string compare $a($field) $b($field)] != 0 } {
               add_proc_error "$check" -1 "attribute field differs between original object:\n old ($a($field))\n new ($b($field))"
            }
         }
      }
   }
}

# check if spooled projects are still available after qmaster restart
proc qmaster_spooling_prj_restart {} {
   global ts_config CHECK_OUTPUT

   if {$ts_config(product_type) != "sgeee"} {
      add_proc_error qmaster_spooling_prj_restart -3 "this can only run in sgeee clusters"
   } else {
      set check_fields "name oticket fshare acl xacl"

      set config(name) "spool_prj"
      set config(oticket) "123"
      set config(fshare)  "234"
      set config(acl)  "deadlineusers"
      set config(xacl)  "defaultdepartment"

      # JG: TODO: make add_prj and get_prj return info if it was successfull.
      #           use this information and do some status output
      add_prj config

      shutdown_and_restart_qmaster

      get_prj "spool_prj" new_config

      cmp_config config new_config $check_fields "qmaster_spooling_prj_restart"

      del_prj "spool_prj"
   }
}


# check if spooled rqs are still available after qmaster restart
proc qmaster_spooling_rqs_restart {} {
   global ts_config CHECK_OUTPUT

   if {$ts_config(gridengine_version) >= 65} {
      set rqs_name "test_spooling"

      set rules ""
      lappend rules "users {*} to slots=10"
      lappend rules "hosts {*} to slots=10"
      lappend rules "queues {!*} to slots=10"
      lappend rules "hosts !* to slots=10,arch=sol-sparc64"
      lappend rules "pes pe1,pe2,pe3 to slots=10,arch=sol-sparc64"
      lappend rules "hosts {*} to slots=\$num_proc*2+\$num_proc*1"
      set rqs_charray($rqs_name,limit)   "$rules"
      set rqs_charray($rqs_name,enabled) "TRUE"
      set rqs_charray($rqs_name,description) "test description for spooling \?+-:"
      add_rqs rqs_charray

      shutdown_and_restart_qmaster

      get_rqs new_charray "$rqs_name"

      set check_fields [array names rqs_charray]
      cmp_config rqs_charray new_charray $check_fields "qmaster_spooling_rqs_restart"

      del_rqs "$rqs_name"
   }
}

proc qmaster_spooling_cleanup {} {
   global CHECK_OUTPUT ts_config

   if {$ts_config(gridengine_version) >= 65} {
      if {[get_rqs_list rqs_names "" "" 0] == 0} {
         foreach elem $rqs_names {
            puts $CHECK_OUTPUT "Removing resource quota sets $elem ...\n"
            del_rqs $elem
         }
      }
   }
}
