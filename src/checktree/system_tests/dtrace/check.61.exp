#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions
global check_category check_root_access_needs

set check_name         "dtrace"
set check_category     "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)  "checking probes used by Dtrace \"monitor\" are functioning"
set check_needs        "init_core_system"  ;# dependencies of this check (name of other check)
set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "dtrace_init_level"

# setup and cleanup functions
set check_setup_function ""
set check_cleanup_function ""

# define test's procedure order
set check_functions    ""             ;# functions to call (in order)
lappend check_functions    "check_dtrace_probes"


proc dtrace_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level else
}



# here starts the test
#                                                             max. column:     |
#****** dtrace/check_dtrace_probes() ******
# 
#  NAME
#     check_dtrace_probes -- Check dtrace probes work
#
#  SYNOPSIS
#     check_dtrace_probes { } 
#
#  FUNCTION
#     Verify $SGE_ROOT/dtrace/monitor.sh works on Solaris 10 master machines
#
#*******************************
proc check_dtrace_probes {} {
   global ts_config
   global CHECK_OUTPUT 

   # Run test on Solaris 10 only where "uname -r -s" returns "SunOS 5.10"
   set output [start_remote_prog "$ts_config(master_host)" "root" "uname" "-r -s"]
   set output [string trim $output]
   if { [string match "SunOS 5.10" $output ] } { 
      set result [start_remote_prog "$ts_config(master_host)" "root" "cd" "$ts_config(product_root)/dtrace ; ./monitor.sh -interval 1sec -verify -cell $ts_config(cell)"]
      if { $prg_exit_state != 0 } {
         add_proc_error "check_dtrace_probes" -1 "dtrace probe verification failed"
      }
   } else {
      puts "dtrace test is run on S10 only"
   }
}
