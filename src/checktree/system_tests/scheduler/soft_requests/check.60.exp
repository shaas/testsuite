#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

#set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "soft_requests_init_level"

# define test's name and run level descriptions
set check_name            "soft_requests"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   1
set check_description(0)  "test pe-ranges"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function soft_requests_setup
set check_cleanup_function soft_requests_cleanup

# define test's procedure order
set check_functions "soft_requests_test"


global soft_requests_test_hosts
global soft_requests_saved_slot_count

proc soft_requests_init_level {} {
   global CHECK_ACT_LEVEL

   if { $CHECK_ACT_LEVEL == 0 } {
      return  0
   }

   return -1  ;# no other level 
}




# -------- local test procedures: initialization------------------------------


proc soft_requests_setup  {} {
   global ts_config
   global soft_requests_test_hosts
   global soft_requests_saved_slot_count
   global consumable_complex_backup
   global CHECK_OUTPUT

   # backup complex - we will modify it during the test
   get_complex consumable_complex_backup

   set soft_requests_test_hosts {}
   set soft_requests_saved_slot_count ""

   foreach host $ts_config(execd_nodes) {
      lappend soft_requests_test_hosts "$host"
      puts $CHECK_OUTPUT "using host $host"
   }

   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }

   set pe(pe_name)           "round_robin"
   set pe(slots)             "999"
   set pe(allocation_rule)   "\$fill_up"
   add_pe pe

   set queue_settings(slots) 1000
   set queue_settings(load_thresholds) "np_load_avg=11.75"
   set queue_settings(pe_list)          "round_robin"
   set qname "res.q"
   add_queue $qname $soft_requests_test_hosts queue_settings
   puts $CHECK_OUTPUT "added queue $qname for hosts $soft_requests_test_hosts"

   set_error 0 "ok"
}

proc soft_requests_cleanup  {} {
   global CHECK_OUTPUT CHECK_ARCH ts_config
   global soft_requests_test_hosts
   global soft_requests_saved_slot_count
   global consumable_complex_backup

   # delete all jobs and trigger a scheduling run to make sure all jobs have really
   # left qmaster
   delete_all_jobs
   wait_for_end_of_all_jobs 60
   trigger_scheduling
   sleep 5

   # enable all.q
   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }
   enable_queue $queue_list
   puts $CHECK_OUTPUT "enabled $queue_list"

   # delete test queue and pe
   set qname "res.q"
   del_queue $qname $soft_requests_test_hosts  0 1
   del_pe        "round_robin"

   # restore complex
   set_complex consumable_complex_backup

   set_error 0 "ok"
}

proc soft_requests_submit_pejobs_and_wait { request host_list } {
   global ts_config CHECK_OUTPUT CHECK_ARCH

   set job_id [submit_job "-o /dev/null -e /dev/null -pe round_robin 2 -soft -l $request $ts_config(product_root)/examples/jobs/sleeper.sh 100"]

   while { 1 } {
      trigger_scheduling
      set running_jobs 0
      set error 0
      set match 0
      
      set job_state [is_job_running $job_id "leeper"]
      if { $job_state == 1 } {
         set job_std_state [get_standard_job_info  $job_id ]
         foreach line $job_std_state {
            foreach host $host_list {
               set host [resolve_host $host 1]
               puts "host: $host queue: [lindex $line 7]"
               if { [string match "*$host*" [lindex $line 7] ] == 1 } {
                  incr match 1
               }
            }
         }
         incr running_jobs 1
         if { $match == 0 } {
            set error 1
            add_proc_error "soft_requests_submit_pejobs_and_wait" -2 "soft requests: job did not run in the specified host list: $host_list \n $job_std_state"
         }
      }

      if { $job_state == -1 } {
         add_proc_error "soft_requests_submit_pejobs_and_wait" -2 "job was not submitted - stop"
         set error 1
         break
      }

      puts $CHECK_OUTPUT "running jobs count: $running_jobs"
      if { $running_jobs == 1 || $error != 0 } {
         break
      }
   }

   delete_all_jobs  
   wait_for_end_of_all_jobs 60
}

proc soft_requests_submit_jobs_and_wait { request host_list } {
   global ts_config CHECK_OUTPUT CHECK_ARCH

   set job_id [submit_job "-o /dev/null -e /dev/null -soft -l $request $ts_config(product_root)/examples/jobs/sleeper.sh 100"]

   while { 1 } {
      trigger_scheduling
      set running_jobs 0
      set error 0
      set match 0
      
      set job_state [is_job_running $job_id "leeper"]
      if { $job_state == 1 } {
         set job_std_state [get_standard_job_info  $job_id ]
         foreach line $job_std_state {
            foreach host $host_list {
               set host [resolve_host $host 1]
               puts "host: $host queue: [lindex $line 7]"
               if { [string match "*$host*" [lindex $line 7] ] == 1 } {
                  incr match 1
               }
            }
         }
         incr running_jobs 1
         if { $match == 0 } {
            set error 1
            add_proc_error "soft_requests_submit_pejobs_and_wait" -2 "soft requests: job did not run in the specified host list $host_list \n $job_std_state"
         }
      }

      if { $job_state == -1 } {
         add_proc_error "soft_requests_submit_pejobs_and_wait" -2 "job was not submitted - stop"
         set error 1
         break
      }

      puts $CHECK_OUTPUT "running jobs count: $running_jobs"
      if { $running_jobs == 1 || $error != 0 } {
         break
      }
   }

   delete_all_jobs  
   wait_for_end_of_all_jobs 60
}

proc soft_requests_submit_pejobs_and_wait2 { } {
   global ts_config CHECK_OUTPUT CHECK_ARCH

   foreach host $ts_config(execd_nodes) {
      set arch [resolve_arch $host]
      lappend map($arch) $host
   }
     
   trigger_scheduling
     
   set submited_jobs 0
   set job_id_list {}
   set job_id_arch {}

   foreach arch [ array names map ] {
      puts "arch: $arch hosts: $map($arch)" 
      set request "arch=$arch"
      incr submited_jobs 1
      lappend job_id_arch $arch
      lappend job_id_list [submit_job "-o /dev/null -e /dev/null -pe round_robin 2 -soft -l $request $ts_config(product_root)/examples/jobs/sleeper.sh 100"]
   }   

   while { 1 } {
      trigger_scheduling
      set running_jobs 0
      set error 0
      set match 0
      set counter 0 
      set job_state 0
      
      foreach job_id $job_id_list { 
         set arch [ lindex $job_id_arch $counter ]
         set host_list $map($arch)
         set job_state [is_job_running $job_id "leeper"]
         
         if { $job_state == 1 } {
            set job_std_state [get_standard_job_info  $job_id ]
            foreach line $job_std_state {
               foreach host $host_list {
                  set host [resolve_host $host 1]
                  puts "host: $host queue: [lindex $line 7]"
                  if { [string match "*$host*" [lindex $line 7] ] == 1 } {
                     incr match 1
                  }
               }
            }
            incr running_jobs 1
            if { $match == 0 } {
               set error 1
               add_proc_error "soft_requests_submit_pejobs_and_wait" -2 "soft requests: job did not run in the specified host list $host_list \n $job_std_state"
            }
         }
         incr counter 1
      }

      if { $job_state == -1 } {
         add_proc_error "soft_requests_submit_pejobs_and_wait" -2 "job was not submitted - stop"
         set error 1
         break
      }

      puts $CHECK_OUTPUT "running jobs count: $running_jobs"
      if { $running_jobs == $submited_jobs || $error != 0 } {
         break
      }
   }

   delete_all_jobs  
   wait_for_end_of_all_jobs 60
}

proc soft_requests_submit_jobs_and_wait2 { } {
   global ts_config CHECK_OUTPUT CHECK_ARCH

   foreach host $ts_config(execd_nodes) {
      set arch [resolve_arch $host]
      lappend map($arch) $host
   }
     
   trigger_scheduling
     
   set submited_jobs 0
   set job_id_list {}
   set job_id_arch {}

   foreach arch [ array names map ] {
      puts "arch: $arch hosts: $map($arch)" 
      set request "arch=$arch"
      incr submited_jobs 1
      lappend job_id_arch $arch
      lappend job_id_list [submit_job "-o /dev/null -e /dev/null -soft -l $request $ts_config(product_root)/examples/jobs/sleeper.sh 100"]
   }   

   while { 1 } {
      trigger_scheduling
      set running_jobs 0
      set error 0
      set match 0
      set counter 0 
      set job_state 0
      
      foreach job_id $job_id_list { 
         set arch [ lindex $job_id_arch $counter ]
         set host_list $map($arch)
         set job_state [is_job_running $job_id "leeper"]
         
         if { $job_state == 1 } {
            set job_std_state [get_standard_job_info  $job_id ]
            foreach line $job_std_state {
               foreach host $host_list {
                  set host [resolve_host $host 1]
                  puts "host: $host queue: [lindex $line 7]"
                  if { [string match "*$host*" [lindex $line 7] ] == 1 } {
                     incr match 1
                  }
               }
            }
            incr running_jobs 1
            if { $match == 0 } {
               set error 1
               add_proc_error "soft_requests_submit_pejobs_and_wait" -2 "soft requests: job did not run in the specified host list $host_list \n $job_std_state"
            }
         }
         incr counter 1
      }

      if { $job_state == -1 } {
         add_proc_error "soft_requests_submit_pejobs_and_wait" -2 "job was not submitted - stop"
         set error 1
         break
      }

      puts $CHECK_OUTPUT "running jobs count: $running_jobs"
      if { $running_jobs == $submited_jobs || $error != 0 } {
         break
      }
   }

   delete_all_jobs  
   wait_for_end_of_all_jobs 60
}

proc soft_requests_test {} {
   global soft_requests_test_hosts check_description CHECK_ARCH
   global CHECK_OUTPUT ts_config CHECK_CORE_MASTER CHECK_ACT_LEVEL CHECK_SCRIPT_FILE_DIR

   puts $CHECK_OUTPUT $check_description($CHECK_ACT_LEVEL)

   if { $CHECK_ACT_LEVEL == 0 } {

      # case a)
      #      fixed values as soft requests uses hostname (queue level)
      puts $CHECK_OUTPUT "\ncase a)"

      foreach host $ts_config(execd_nodes) {
         set request "hostname=$host"
         soft_requests_submit_pejobs_and_wait $request $host
         soft_requests_submit_jobs_and_wait $request $host
      }

      # case b)
      #     load values as soft requests uses arch 
      puts $CHECK_OUTPUT "\ncase b)"

      foreach host $ts_config(execd_nodes) {
         set arch [resolve_arch $host]
         lappend map($arch) $host
      }

      foreach arch [ array names map ] {
         puts "arch: $arch hosts: $map($arch)" 
         set request "arch=$arch"
         soft_requests_submit_pejobs_and_wait $request $map($arch)
         soft_requests_submit_jobs_and_wait $request $map($arch)
      }

      # case c)
      #     test multiple jobs with soft requests in one scheduling run...
      puts $CHECK_OUTPUT "\ncase c)"
      soft_requests_submit_jobs_and_wait2
      soft_requests_submit_pejobs_and_wait2

      puts $CHECK_OUTPUT "done"
   }
     
   set_error 0 "ok"
}


