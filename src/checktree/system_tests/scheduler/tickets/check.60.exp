#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env
set check_root_access_needs "yes"


# define a level initialization procedure:
set check_init_level_procedure "ticket_calculation_init_level"

# define test's name and run level descriptions
set check_name            "ticket_calculation"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   1
set check_description(0)  "check overwrite ticket calculation of the scheduler"
set check_description(1)  "check functional ticket calculation of the scheduler"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function ticket_calculation_setup
set check_cleanup_function tight_calculation_cleanup

# define test's procedure order
set check_functions ""
lappend check_functions "ticket_for_jobs"
lappend check_functions "ticket_for_departments"
lappend check_functions "ticket_for_projects"
lappend check_functions "ticket_for_users"


proc ticket_calculation_init_level {} {
   global ts_config
   global CHECK_ACT_LEVEL
   
   switch -exact -- $CHECK_ACT_LEVEL {
      0 {  return 0 } # Tests overwrite tickets
      1 {  return 0 } # Tests functional tickets
      default { return -1 }      
   }
}

# -------- local test procedures: initialization------------------------------

global ticket_queue_name
global ticket_job_name
global ticket_departments
global ticket_projects


proc ticket_calculation_setup {  } {

   global ticket_queue_name ticket_job_name ticket_departments ticket_projects
   global ts_config
   global CHECK_OUTPUT
   
   set ticket_job_name    "tjob"
   set ticket_departments "dep1 dep2 dep3"
   set ticket_projects    "prj1 prj2 prj3"
   
   # Setup the scheduler
   set schedconf(weight_tickets_functional)  "5000"
   set schedconf(weight_tickets_share)       "0"
   set schedconf(share_override_tickets)     "TRUE"
   set schedconf(share_functional_shares)    "TRUE"
   set schedconf(weight_ticket)              "1.000000"
   set schedconf(weight_waiting_time)        "0.000000"
   set schedconf(weight_waiting_time)        "0.000000"
   set schedconf(weight_urgency)             "0.1"
   set schedconf(weight_priority)            "1.000000"
   
   set result [ set_schedd_config schedconf ]
   if { $result != 0 } {
      set_error -1 "setup of scheduler for overwrite ticket test failed"
      return -1
   }
   
   puts $CHECK_OUTPUT "Scheduler configured"

   # setup the ticket test queue
   set ticket_queue_name "ticket_queue"
   set queue_conf(slots) 0

   puts $CHECK_OUTPUT "Add queue $ticket_queue_name"
   
   add_queue $ticket_queue_name "@allhosts" queue_conf 1
   
   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }
   disable_queue $queue_list   
   
   set_error 0 "setup OK"

}

proc tight_calculation_cleanup {  } {

   global ticket_queue_name
   global ts_config

   delete_all_jobs
   wait_for_end_of_all_jobs 60
   
   # reset the scheduler configuration
   reset_schedd_config
   
   del_queue $ticket_queue_name "@allhosts" 0 1
   
   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }
   enable_queue $queue_list   
   
   set_error 0 "clean OK"
}



proc ticket_for_jobs { } {
   
   global CHECK_PRODUCT_ROOT CHECK_ARCH
   global CHECK_OUTPUT CHECK_USER
   global CHECK_ACT_LEVEL

   global ts_config

   set result [ ticket_set_slot_count 0 ]
   if { $result != 0 } {
      return -1
   }

   set result [ ticket_scheduler_setup ]
   if { $result != 0 } {
      return 1
   }
   
   set users    ""
   if { $CHECK_ACT_LEVEL == 0 } {
      # overwrite
      set otickets  " 100 1000  200  900  300  800  400  700  500  600"
      set fshares   ""
      set shares    "0.07 0.20 0.13 0.15 0.20 0.12 0.27 0.09 0.33 0.07"

   } elseif { $CHECK_ACT_LEVEL == 1 } {
      # functional
      set otickets ""
      set fshares  " 100 1000 200   900  300  800  400  700  500  600"
      set shares   "0.06 0.20 0.12 0.15 0.19 0.12 0.27 0.09 0.36 0.07"
      
   } else {
      set_error -1 "Unsupported CHECK_ACT_LEVEL $CHECK_ACT_LEVEL"
      return -1
   }
   
   set job_start_order "1 3 5 7 9"
   

   set job_count [ ticket_create_job_array jobs $users $otickets $fshares $shares ]
   if { $job_count <= 0 } {
      return -1
   }
   

   set result [ ticket_submit_job_and_check_share jobs $job_count $job_start_order ]
   if { $result != 0 } {
      return -1
   }
   set_error 0 "OK"
}

proc ticket_for_departments { } {
   
   global CHECK_USER ts_user_config ticket_departments CHECK_OUTPUT
   global CHECK_ACT_LEVEL
   
   
   set result [ ticket_set_slot_count 0 ]
   if { $result != 0 } {
      return -1
   }

   set result [ ticket_scheduler_setup ]
   
   if { $result != 0 } {
      return 1
   }
   

   # create three departments
   set department_count [llength $ticket_departments]
   
   if { $CHECK_ACT_LEVEL == 0 } {
      # overwrite
      set oticket 1000
      set fshare  0
      set fshare_incr 0
      set oticket_incr 1000
   } elseif { $CHECK_ACT_LEVEL == 1 } {
      # functional
      set oticket 0
      set fshare  1000
      set fshare_incr 1000
      set oticket_incr 0
   }
      
   set i 0
   foreach department $ticket_departments {
      set departments($i,name)    $department
      set departments($i,oticket) $oticket
      set departments($i,fshare)  $fshare
      set oticket [expr $oticket + $oticket_incr]
      set fshare  [expr $fshare + $fshare_incr]
      incr i
   }
   
   # setup the users array
   set user_count 3
   set users(0,name) $CHECK_USER
   set users(1,name) $ts_user_config(first_foreign_user)
   set users(2,name) $ts_user_config(second_foreign_user)
   
   
   # assign the users to the departments
   for {set i 0} {$i < $department_count} { incr i 1 } {
      set dep_conf(name)    $departments($i,name)
      set dep_conf(type)    "DEPT"
      set dep_conf(fshare)  "0"
      set dep_conf(oticket) $departments($i,oticket)
      set dep_conf(fshare) $departments($i,fshare)
      set dep_conf(entries) $users($i,name)
      
      set users($i,department) $departments($i,name)

      set result [ add_userset dep_conf ]
      if { $result != 0 } {
         set_error -1 "Can not add deparment $departments($i,name)"
         # remove the previously added departments
         for { set ii 0 } { $ii <= $i } { incr ii 1 } {
            del_access_list $departments($ii,name)
         }
         return -1
      }
   }
   
   set job_users  {}
   lappend job_users $users(0,name) $users(1,name) $users(2,name)
   lappend job_users $users(0,name) $users(1,name) $users(2,name) 
   lappend job_users $users(0,name) $users(1,name) $users(2,name) 
   lappend job_users $users(0,name)
   
   set otickets   ""
   set fshares    ""
   set shares     "0.09 0.12 0.20 0.18 0.08 0.15 0.12 0.24 0.36 0.09"
   
   puts $CHECK_OUTPUT "job_users: $job_users"
   
   set job_start_order "2 1 5 0 4"
    
   set job_count [ ticket_create_job_array jobs $job_users $otickets $fshares $shares ]
   if { $job_count <= 0 } {
      set result -1
   } else {   
      set result [ ticket_submit_job_and_check_share jobs $job_count $job_start_order ]
   }
   
   # Remove  the departments
   foreach department $ticket_departments {
      del_access_list $department
   }
   
   if { $result != 0 } {
      return -1
   }
   
   set_error 0 "OK"
   return 0
}

proc ticket_for_projects { } {
   
   global CHECK_USER ts_user_config ticket_projects
   global CHECK_ACT_LEVEL
   
   set result [ ticket_set_slot_count 0 ]
   if { $result != 0 } {
      return -1
   }

   set result [ ticket_scheduler_setup ]
   if { $result != 0 } {
      return 1
   }

   # create three projects
   set project_count [llength $ticket_projects]
   
   if { $CHECK_ACT_LEVEL == 0 } {
      # overwrite 
      set oticket 1000
      set fshare  0
      set oticket_incr 1000
      set fshare_incr 0
   } elseif { $CHECK_ACT_LEVEL == 1 } {
      # functional
      set oticket 0
      set fshare  1000
      set oticket_incr 0
      set fshare_incr 1000
   } else {
      set_error -1 "Unknown CHECK_ACT_LEVEL $CHECK_ACT_LEVEL"
      return -1
   }
   
   set i 0
   foreach project $ticket_projects {
      set projects($i,name)    $project
      set projects($i,oticket) $oticket
      set projects($i,fshare)  $fshare
      set oticket [expr $oticket + $oticket_incr]
      set fshare [expr $fshare + $fshare_incr]
      incr i
   }
   
   # create projects
   for {set i 0} {$i < $project_count} { incr i 1 } {
      set project_conf(name)    $projects($i,name)
      set project_conf(fshare)  $projects($i,fshare)
      set project_conf(oticket) $projects($i,oticket)
      
      set result [ add_prj project_conf ]
      if { $result != 0 } {
         add_proc_error "ticket_for_projects" -1 "Can not add project $projects($i,name)"
         for {set ii 0} {$ii < $i} { incr ii 1 } {
            del_prj $projects($ii,name)
         }
         return -1
      }
   }
   
   if { $result == 0 } {
      set job_users ""
      set otickets  ""
      set fshares   ""
      set shares    "0.09 0.12 0.20 0.18 0.08 0.15 0.12 0.24 0.36 0.09"
      
      set prj_list {}
      lappend  prj_list  $projects(0,name)  $projects(1,name)  $projects(2,name) 
      lappend  prj_list  $projects(0,name)  $projects(1,name)  $projects(2,name) 
      lappend  prj_list  $projects(0,name)  $projects(1,name)  $projects(2,name) 
      lappend  prj_list  $projects(0,name)
      
      set job_start_order "2 1 5 0 4"
      
      
      set job_count [ ticket_create_job_array jobs $job_users $otickets $fshares $shares $prj_list ]
      if { $job_count <= 0 } {
         set result -1
      } else {   
         set result [ ticket_submit_job_and_check_share jobs $job_count $job_start_order ]
      }
   }
   
   # Remove  the projects
   foreach project $ticket_projects {
      del_prj $project
   }
   
   if { $result != 0 } {
      return -1
   }
   
   set_error 0 "OK"
   return 0
}

proc ticket_for_users { } {
   
   global ts_user_config CHECK_USER
   global CHECK_ACT_LEVEL

   set result [ ticket_set_slot_count 0 ]
   if { $result != 0 } {
      return -1
   }
   
   set result [ ticket_scheduler_setup ]
   if { $result != 0 } {
      return 1
   }
   

   set user_count 3
   set users(0,name) $CHECK_USER
   set users(1,name) $ts_user_config(first_foreign_user)
   set users(2,name) $ts_user_config(second_foreign_user)

   if { $CHECK_ACT_LEVEL == 0 } {
      # overwrite
      set users(0,oticket) 1000
      set users(1,oticket) 2000
      set users(2,oticket) 3000
      set users(0,fshare) 0
      set users(1,fshare) 0
      set users(2,fshare) 0
   } elseif { $CHECK_ACT_LEVEL == 1 } {
      # funcational
      set users(0,oticket) 0
      set users(1,oticket) 0
      set users(2,oticket) 0
      set users(0,fshare) 1000
      set users(1,fshare) 2000
      set users(2,fshare) 3000
   } else {
      set_error -1 "Unknown CHECK_ACT_LEVEL $CHECK_ACT_LEVEL"
      return -1
   }
   
   for {set i 0} {$i < $user_count} { incr i 1 } {
      set user_conf(name)    $users($i,name)
      set user_conf(oticket) $users($i,oticket)
      set user_conf(fshare)  $users($i,fshare)
      
      set result [ mod_user user_conf ]
      if { $result != 0 } {
         set_error -1 "Can not modify user $users($i,name)"
         # reset the user settings
         for {set ii 0} {$ii < $i} { incr ii 1 } {
            set user_conf(name)    $users($ii,name)
            set user_conf(oticket) 0
            set user_conf(fshare)  0
            mod_user user_conf
         }         
         return -1
      }
   }   


   set job_users     {}
   lappend job_users $users(0,name) $users(1,name) $users(2,name)
   lappend job_users $users(0,name) $users(1,name) $users(2,name)
   lappend job_users $users(0,name) $users(1,name) $users(2,name)
   lappend job_users $users(0,name)
   
   set otickets ""
   set fshares  ""
   set shares   "0.09 0.12 0.20 0.18 0.08 0.15 0.12 0.24 0.36 0.09"

   set job_start_order "2 1 5 0 4"
   
   set job_count [ ticket_create_job_array jobs $job_users $otickets $fshares $shares ]
   if { $job_count <= 0 } {
      set result -1
   } else {   
      
      set result [ ticket_submit_job_and_check_share jobs $job_count $job_start_order ]
   }
   
   # reset the user settings
   for {set i 0} {$i < $user_count} { incr i 1 } {
      set user_conf(name)    $users($i,name)
      set user_conf(oticket) 0
      set user_conf(fshare)  0
      mod_user user_conf
   }   

   if { $result != 0 } {
      return -1
   }
   
   set_error 0 "OK"
   return 0
}

# ------------------------------------------------------------------------------
#  HELPER FUNCTIONS
# ------------------------------------------------------------------------------


proc ticket_scheduler_setup { } {
 
   global CHECK_ACT_LEVEL CHECK_OUTPUT
   
   set schedconf(weight_waiting_time)       "0.000000"
   set schedconf(weight_deadline)           "0.000000"
   set schedconf(weight_urgency)            "0.000000"
   set schedconf(weight_priority)           "0.000000"
   set schedconf(weight_ticket)             "1.000000"


   if { $CHECK_ACT_LEVEL == 0 } {
      # overwrite
      set schedconf(weight_tickets_functional) "0"
      puts $CHECK_OUTPUT "setting weight_tickets_functional to 0"
   } elseif { $CHECK_ACT_LEVEL == 1 } {
      set schedconf(weight_tickets_functional) "100000"
      puts $CHECK_OUTPUT "setting weight_tickets_functional to 100000"
   } else {
      add_proc_error "ticket_scheduler_setup" -1 "Unsupported CHECK_ACT_LEVEL $CHECK_ACT_LEVEL"
      return -1
   }

   set result [ set_schedd_config schedconf ]
   
   if { $result != 0 } {
      return -1
   }
   return 0
   
}



proc ticket_submit_job_and_check_share { jobs job_count job_start_order } {

   global ts_config CHECK_OUTPUT CHECK_ARCH
   
   upvar $jobs job
   
   # First clear usage
   catch {  eval exec "$ts_config(product_root)/bin/$CHECK_ARCH/qconf" "-clearusage" } result
   puts $CHECK_OUTPUT $result
   
   # Submit jobs
   set result [ ticket_submit_jobs job $job_count ]
   if { $result != 0 } {
      return -1
   }
   
   set job_id_start_order {}
   foreach i $job_start_order {
      lappend job_id_start_order $job($i,id)
   }
   
   set result [ ticket_check_start_order $job_id_start_order ]
   if { $result != 0 } {
      add_proc_error "ticket_submit_job_and_check_share" -1 "incorrect start order of jobs"
      return -1
   }
   
   # Check the share of the jobs
   ticket_check_job_share job $job_count

   delete_all_jobs
   wait_for_end_of_all_jobs 60
   
   return 0
}

proc ticket_create_job_array { jobs users otickets fshares shares { projects "" } } {
   
   global CHECK_OUTPUT CHECK_USER
   
   upvar $jobs tmp_jobs
   
   set user_count    [llength $users]
   set oticket_count [llength $otickets]
   set fshare_count  [llength $fshares]
   set share_count   [llength $shares]
   set project_count [llength $projects]
   
   if { $user_count > 0 } {
      set job_count $user_count
   } elseif { $oticket_count > 0 } {
      set job_count $oticket_count
   } elseif { $fshare_count > 0 } {
      set job_count $fshare_count
   } elseif { $share_count > 0 } {
      set job_count $share_count
   } elseif { $project_count > 0 } {
      set job_count $project_count
   } else {
      add_proc_error "ticket_create_job_array" -1 "invalid arguments"
      return -1
   }
   
   if { $user_count > 0 } {
      if { $user_count != $job_count } {
         add_proc_error "ticket_create_job_array" -1 "Invalid number of users ($job_count expected)"
         return -1
      } else {
         set i 0
         foreach user $users {
           set tmp_jobs($i,user) $user 
           incr i 1
         }
      }
   } else {
      for { set i 0 } { $i < $job_count } { incr i 1 } {
         set tmp_jobs($i,user) $CHECK_USER
      }
   }
   
   if { $oticket_count > 0 } {
      if { $oticket_count != $job_count } {
         add_proc_error "ticket_create_job_array"  -1 "Invalid number of otickets ($job_count expected)"
         return -1
      } else {
         set i 0
         foreach oticket $otickets {
           set tmp_jobs($i,oticket) $oticket
           incr i 1
         }
      }
   } else {
      for { set i 0 } { $i < $job_count } { incr i 1 } {
         set tmp_jobs($i,oticket) 0
      }
   }

   if { $fshare_count > 0 } {
      if { $fshare_count != $job_count } {
         add_proc_error "ticket_create_job_array"  -1 "Invalid number of fshares ($job_count expected)"
         return -1
      } else {
         set i 0
         foreach fshare $fshares {
           set tmp_jobs($i,fshare) $fshare 
           incr i 1
         }
      }
   } else {
      for { set i 0 } { $i < $job_count } { incr i 1 } {
         set tmp_jobs($i,fshare) 0
      }
   }
   
   if { $share_count > 0 } {
      if { $share_count != $job_count } {
         add_proc_error "ticket_create_job_array"  -1 "Invalid number of shares ($job_count expected)"
         return -1
      } else {
         set i 0
         foreach share $shares {
           set tmp_jobs($i,share) $share 
           incr i 1
         }
      }
   } else {
      for { set i 0 } { $i < $job_count } { incr i 1} {
         set tmp_jobs($i,share) 0
      }
   }
   
   if { $project_count > 0 } {
      if { $project_count != $job_count } {
         add_proc_error "ticket_create_job_array"  -1 "Invalid number of projects ($job_count expected)"
         return -1
      } else {
         set i 0
         foreach project $projects {
           set tmp_jobs($i,project) $project 
           incr i 1
         }
      }
   } else {
      for { set i 0 } { $i < $job_count } { incr i 1} {
         set tmp_jobs($i,project) 0
      }
   }
   
   return $job_count
}

proc ticket_submit_jobs { jobs job_count } {
   
   global ts_config
   global ticket_queue_name ticket_job_name
   global CHECK_USER CHECK_HOST CHECK_OUTPUT
    
   upvar $jobs tmp_jobs
   
   set pre_args  "-e /dev/null -o /dev/null -q $ticket_queue_name -N $ticket_job_name"
   set post_args " $ts_config(product_root)/examples/jobs/sleeper.sh 3600" 
   
   for {set i 0} {$i < $job_count} { incr i 1 } {
      
      set job_args $pre_args
      if { $tmp_jobs($i,fshare) != 0 } {
         append job_args " -js $tmp_jobs($i,fshare)"
      }
      if { $tmp_jobs($i,project) != 0 } {
         append job_args " -P $tmp_jobs($i,project)"
      }
      append job_args " $post_args"
      set result [ submit_job $job_args 1 60 "" $tmp_jobs($i,user) ]
      if { $result <= 0 } {
         add_proc_error "ticket_submit_jobs" -1 "submit_job failed ($result)"
         return -1
      }
      set tmp_jobs($i,id) $result
      
      if { $tmp_jobs($i,oticket) != 0 } {
        set result [ ticket_set_overwrite_tickets_for_job $tmp_jobs($i,id) $tmp_jobs($i,oticket) ]
        if { $result != 0 } {
           add_proc_error "ticket_submit_jobs" -1 "qalter -ot of job $tmp_jobs($i,id) failed"
           return -1
        }
      }
      puts $CHECK_OUTPUT "job\($i\) has id $tmp_jobs($i,id)"
   }
   return 0
}

proc ticket_check_job_share { jobs job_count } {
   
   global CHECK_OUTPUT ts_config CHECK_ARCH

   upvar $jobs job

   trigger_scheduling
   after 5000

   # Check the shares of the jobs
   for {set i 0} {$i < $job_count} { incr i 1 } {
     
     #  The share may only correct of load values for the jobs
     #  are available, check it
#     set  ok 0 
#     for {set ii 0} {$ii < 60} { incr ii 1 } {
#        if {[get_extended_job_info $job($i,id) job_info 0] } {
#           puts $CHECK_OUTPUT "job_info(cpu) is set to \"$job_info(cpu)\""
#
#           if { $job_info(cpu) != "NA" } {
#              set ok 1
#              break
#           } else {
#              trigger_scheduling
#              after 3000
#           }
#        } else {
#           add_proc_error "ticket_check_job_share" -1 "Can not get extended job info of job\($i\) $job($i,id)" 
#           return -1
#        }
#        
#     }
#
#     if { $ok != 1 } {
#        add_proc_error "ticket_check_job_share" -3 "Could not check share of job($i) $job($i,id), no load values available"
#        continue
#     }

     get_extended_job_info $job($i,id)
     set try_count 5
     set is_ok 0
     while { $try_count > 0 && $is_ok == 0 } {
        if { $job_info(share) != $job($i,share) } {
           trigger_scheduling
           after 2000
           get_extended_job_info $job($i,id)
           incr try_count -1
        } else {
           break
        }
     }

     if { $job_info(share) != $job($i,share) } {
       # Since noone can explain the calculation of
       # the shares of running job we only consider pending
       # jobs           
       if { $job_info(state) == "qw" } {
          add_proc_error "ticket_check_job_share" -1 "Invalid share of job\($i\) $job($i,id): expected was $job($i,share), but it is $job_info(share)"
       } else {
          # for running jobs we write only a warning
          add_proc_error "ticket_check_job_share" -3 "Invalid share of running job\($i\) $job($i,id): expected was $job($i,share), but it is $job_info(share)"
       }
      } else {
         puts $CHECK_OUTPUT "job\($i\) $job($i,id) has correct share $job_info(share)"
      }
   }
}

proc ticket_check_start_order { job_start_order } {

   global ticket_job_name
   
   set i 0
   set slot_count 1
   foreach job_id $job_start_order {
      ticket_set_slot_count $slot_count
      
      set result [ wait_for_jobstart $job_id $ticket_job_name 60 1 1 ]
      if { $result != 0 } {      
         add_proc_error "ticket_check_start_order" -1 "job with id $job_id ($ticket_job_name) is not running"
         return -1
      }
      incr i 1
      incr slot_count 1
   }
   
   return 0
}

proc ticket_set_overwrite_tickets_for_job { job_id  otickets } {

   global CHECK_PRODUCT_ROOT CHECK_ARCH
   global CHECK_OUTPUT CHECK_HOST CHECK_USER
   
   set qalter_cmd "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qalter"
   set qalter_args "-ot $otickets $job_id"
   
   set result [ start_remote_prog $CHECK_HOST $CHECK_USER "$qalter_cmd" "$qalter_args" exit_state ]
   if { $exit_state != 0 } {
      add_proc_error "ticket_set_overwrite_tickets_for_job" -1 "qalter of job $job_id failed ($exit_state)-----\n $result\n ----------- "
      return -1
   }
   puts $CHECK_OUTPUT "set overwrite tickets of job $job_id to $otickets"
   return 0
}

proc ticket_set_slot_count { slot_count } {

   global CHECK_PRODUCT_ROOT CHECK_ARCH
   global CHECK_OUTPUT CHECK_USER CHECK_HOST
   global ts_config
   global ticket_queue_name
   
   # setup the host list
   
   set first 1
   set qconf_cmd "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf"
   
   foreach host $ts_config(execd_nodes) {
      if { $first != 0 } {
         set first 0
         set qconf_args "-mattr queue slots $slot_count $ticket_queue_name\@$host"
      } else {
         set qconf_args "-mattr queue slots 0 $ticket_queue_name\@$host"
      }
      set result [ start_remote_prog $CHECK_HOST $CHECK_USER "$qconf_cmd" "$qconf_args" exit_state ]
      if { $exit_state != 0 } {
        add_proc_error "ticket_set_slot_count" -1 "qconf -mattr failed ($exit_state) ----\n$result\n -----"
        return -1
      }
   }
   puts $CHECK_OUTPUT "set slot count of queue $ticket_queue_name to $slot_count"
   return 0
}




