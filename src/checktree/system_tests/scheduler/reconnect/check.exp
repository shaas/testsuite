#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__




# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "schedd_reconnect_init_level"

# define test's name and run level descriptions
set check_name            "schedd_reconnect"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "shutdown and restart qmaster, verify that schedd reconnects within reasonable time"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_cleanup_function schedd_reconnect_cleanup

# define test's procedure order
set check_functions ""
lappend check_functions "schedd_reconnect_test"

proc schedd_reconnect_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level 
}




# -------- local test procedures: initialization------------------------------


proc schedd_reconnect_cleanup  {} {
   global ts_config CHECK_OUTPUT

   # wait for load reports to proceed with next test
   wait_for_load_from_all_queues 120
}


proc schedd_reconnect_test {} {
   global ts_config CHECK_OUTPUT

   set expected_reconnect_time 30
   set test_runs 10
   set failures 0
   set failures_output ""
   
   for {set i 0} {$i < $test_runs} {incr i} {
      shutdown_qmaster $ts_config(master_host) [get_qmaster_spool_dir]
      startup_qmaster 0

      # expect scheduler to be registered at qmaster within 2 * schedd interval (10s)
      set success 0
      set mytimeout [timestamp]
      incr mytimeout $expected_reconnect_time

      while {[timestamp] < $mytimeout } {
         set ret [get_scheduler_status result1 "" "" 0]
         puts $CHECK_OUTPUT "qconf -sss returned $ret: $result1"
         set result [lindex $result1 0]
         if { [llength $result] == 1 && $ret == 0 } {
            if { [host_list_compare $ts_config(master_host) $result 0 1] == 0 } {
               puts $CHECK_OUTPUT "scheduler reconnected!"
               set success 1
               break
            }
         }
         after 1000
      }
      if { $success != 1 } {
         incr failures 1
         append failures_output "qconf -sss returned $ret: $result\n"
      }
   }

   if { $failures_output != "" } {
      add_proc_error "schedd_reconnect_test" -1 "reconnect failed in $failures from $test_runs test runs:\n$failures_output"
   }
}
