#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__




# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "schedd_reconnect_init_level"

# define test's name and run level descriptions
set check_name            "schedd_reconnect"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "shutdown and restart qmaster, verify that schedd reconnects within reasonable time"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function   "schedd_reconnect_setup"
set check_cleanup_function "schedd_reconnect_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "schedd_reconnect_test"
lappend check_functions "schedd_reconnect_after_timeout_test"

proc schedd_reconnect_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level 
}




# -------- local test procedures: initialization------------------------------
proc schedd_reconnect_setup  {} {
   global ts_config
   global schedd_reconnect_test_globals
   global schedd_reconnect_saved_config

   get_config schedd_reconnect_saved_config
   if {[info exists schedd_reconnect_test_globals]} {
      unset schedd_reconnect_test_globals
   }

   set schedd_reconnect_test_globals(restart_master) true
}

proc schedd_reconnect_cleanup  {} {
   global ts_config
   global schedd_reconnect_test_globals
   global schedd_reconnect_saved_config

   reset_config schedd_reconnect_saved_config

   if {$schedd_reconnect_test_globals(restart_master) == true} {
      set spooldir [get_qmaster_spool_dir]
      shutdown_master_and_scheduler $ts_config(master_host) $spooldir
      startup_qmaster
   }

   if {[info exists schedd_reconnect_test_globals]} {
      unset schedd_reconnect_test_globals
   }
}


proc schedd_reconnect_test {} {
   global ts_config

   set error_text ""

   # shutdown and restart qmaster
   shutdown_qmaster $ts_config(master_host) [get_qmaster_spool_dir]
   startup_qmaster 0  

   set mytimeout [timestamp]
   incr mytimeout 120

   while {1} {
      after 1000
      if {[timestamp] > $mytimeout} {
         append error_text "timeout (120 seconds) waiting for connected scheduler!\n"
         break
      }
      if {[get_scheduler_status result1 "" "" 0] == 0} {
         ts_log_fine "result1=$result1"
         if { [host_list_compare $ts_config(master_host) $result1 0 1] == 0 } {
            ts_log_fine "scheduler reconnected from host \"$result1\"!"
            break
         }
      }
      after 4000
   }

   if {$error_text != ""} {
      ts_log_severe $error_text
   }
}


#****** check/schedd_reconnect_after_timeout_test() ****************************
#  NAME
#     schedd_reconnect_after_timeout_test() -- test scheduler ack timeout
#
#  SYNOPSIS
#     schedd_reconnect_after_timeout_test { } 
#
#  FUNCTION
#     Produce scheduler timeout which does a disconnect of the event client.
#     => Scheduler should re-connect.
#*******************************************************************************
proc schedd_reconnect_after_timeout_test {} {
   global schedd_reconnect_test_globals

   get_current_cluster_config_array ts_config

   # Get expected message text in qmaster messages file
   set message_text [translate_macro MSG_COM_ACKTIMEOUT4EV_ISIS "*" "schedd" "*" "*"]

   # do a "tail" for the qmaster messages file
   ts_log_fine "tail -f to qmaster messages file"
   set spooldir [get_qmaster_spool_dir]
   init_logfile_wait $ts_config(master_host) "$spooldir/messages"

   # set qmaster parameter SCHEDULER_TIMEOUT to 4 seconds
   set my_config(qmaster_params) "SCHEDULER_TIMEOUT=4"
   set_config my_config

   # now we wait for the scheduler timeout message in the messages log file
   set output [logfile_wait $message_text]

   # If the message was found we check if scheduler reconnects
   if {$logfile_wait_error == 0} {
      ts_log_fine "found: \"$message_text\" in qmaster messages file!"
      ts_log_fine "got scheduler timeout, checking if scheduler does a reconnect ..."
      set my_config(qmaster_params) "none"
      set_config my_config
      after 5000
      set my_timeout 90
      if {$ts_config(gridengine_version) <= "61"} {
         # Reason for a larger timeout for this versions is that the client does
         # a check qmaster alive every 240 seconds which might be the reason for
         # the long time needed until client tries to reconnect.
         set my_timeout [expr (240 + 30)]
         ts_log_fine "using larger timeout for ge version <= 61! ($my_timeout s)"
      }
      if {[wait_for_connected_scheduler $my_timeout] == 0 } { 
         set schedd_reconnect_test_globals(restart_master) false
      }
   } else {
      ts_log_severe "logfile_wait_error: $logfile_wait_error\noutput:\n$output"
   }

   # stop the tail command
   close_logfile_wait
}

