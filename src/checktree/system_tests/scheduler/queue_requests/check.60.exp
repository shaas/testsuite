#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__




# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "no"

# define a level initialization procedure:
set check_init_level_procedure "scheduler_queue_requests_init_level"

# define test's name and run level descriptions
set check_name            "scheduler_queue_requests"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "check scheduling with -q and -masterq requests"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function scheduler_queue_requests_setup
set check_cleanup_function scheduler_queue_requests_cleanup



# define test's procedure order
set check_functions ""

lappend check_functions "scheduler_queue_requests_qi"
lappend check_functions "scheduler_queue_requests_masterqi"
lappend check_functions "scheduler_queue_requests_cq"
lappend check_functions "scheduler_queue_requests_mastercq"
lappend check_functions "scheduler_queue_requests_softqi"
lappend check_functions "scheduler_queue_requests_softcq"

proc scheduler_queue_requests_init_level {} {
   global CHECK_ACT_LEVEL
   global queue_count queue_request_count pe_count

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         set queue_count 10
         set queue_request_count 5
         set pe_count 5
         return 0
      }
   }

   return -1  ;# no other level 
}




# -------- local test procedures: initialization------------------------------

proc scheduler_queue_requests_get_qname {num} {
   return [format "q_%04d" $num]
}

proc scheduler_queue_requests_setup  {} {
   global CHECK_OUTPUT ts_config
   global queue_count pe_count sched_conf_backup

   # backup schedd config
   get_schedd_config sched_conf_backup

   # set scheduling sorting to seqno, 
   # high schedule interval, we'll trigger scheduling manually
   set sched_conf(queue_sort_method) seqno
   set sched_conf(schedule_interval) "0:1:0"
   set sched_conf(flush_submit_sec) 1
   set sched_conf(flush_finish_sec) 0
   set sched_conf(params) "PROFILE=1"
   set_schedd_config sched_conf

   # create some parallel environments for testing the -masterq switch
   # and wildcard pe submission
   set pe(slots) 100
   for {set i 0} {$i < $pe_count} {incr i} {
      set pe(pe_name) "pe_$i"
      add_pe pe
   }

   # create n queues, with sequence number
   set queue_config(load_thresholds) "np_load_avg=10.0"
   set queue_config(slots) 10
   for {set i 0} {$i < $queue_count} {incr i} {
      set queue_config(seq_no) $i
      set queue_name [scheduler_queue_requests_get_qname $i]
      add_queue $queue_name "@allhosts" queue_config 1
      for {set j 0} {$j < $pe_count} {incr j} {
         assign_queues_with_pe_object $queue_name "" "pe_$j"
      }
   }

   set_error 0 "ok"
}

proc scheduler_queue_requests_cleanup  {} {
   global CHECK_OUTPUT ts_config
   global queue_count pe_count sched_conf_backup

   # restore old schedd config
   set_schedd_config sched_conf_backup

   # cleanup
   delete_all_jobs 0
   wait_for_end_of_all_jobs 60

   # delete pes
   for {set i 0} {$i < $pe_count} {incr i} {
      unassign_queues_with_pe_object "pe_$i"
      del_pe "pe_$i"
   }

   # delete queues
   for {set i 0} {$i < $queue_count} {incr i} {
      del_queue [scheduler_queue_requests_get_qname $i] "@allhosts" 0 1
   }

   set_error 0 "ok"
}

proc scheduler_queue_requests_sched_time {} {
   global CHECK_OUTPUT

   set duration -1

   set pattern "*job dispatching took*"
   set log_output [logfile_wait $pattern 60 0]
   set profile_lines [split $log_output "\n"]
   foreach line $profile_lines {
      if {[string match $pattern $line]} {
#         puts $CHECK_OUTPUT $line
         set split_line [split $line]
         set duration [lindex $split_line 5]
#         puts $CHECK_OUTPUT $duration
         break
      }
   }

   return $duration
}

# -q qi_list
proc scheduler_queue_requests_qi {} {
   scheduler_queue_requests "scheduler_queue_requests_qi"
}

# -masterq qi_list
proc scheduler_queue_requests_masterqi {} {
   scheduler_queue_requests "scheduler_queue_requests_masterqi" 1
}

# -q clusterqueue_list
proc scheduler_queue_requests_cq {} {
   scheduler_queue_requests "scheduler_queue_requests_cq" 0 1
}

# -masterq cq_list
proc scheduler_queue_requests_mastercq {} {
   scheduler_queue_requests "scheduler_queue_requests_mastercq" 1 1
}

# -soft -q qi_list
proc scheduler_queue_requests_softqi {} {
   scheduler_queue_requests "scheduler_queue_requests_softqi" 0 0 1
}

# -soft -q cq_list
proc scheduler_queue_requests_softcq {} {
   scheduler_queue_requests "scheduler_queue_requests_softcq" 0 1 1
}


proc scheduler_queue_requests {scenario {parallel 0} {cq 0} {soft 0}} {
   global CHECK_OUTPUT ts_config
   global queue_count queue_request_count

   # general submit options
   set options "-o /dev/null -j y -t 1-20"
   if {$parallel} {
      append options " -pe 'pe*' 1"
   }

   # initialize a tail -f on scheduler messages file
   set schedd_messages_file "[get_qmaster_spool_dir]/schedd/messages"
   init_logfile_wait $ts_config(master_host) $schedd_messages_file

   # submit a job without requests and measure the time for scheduling
   set job_id [submit_job "$options $ts_config(product_root)/examples/jobs/sleeper.sh 60"]
   wait_for_jobstart $job_id "" 60
   set default_duration [scheduler_queue_requests_sched_time]
   if {$default_duration == 0.0} {
      set default_duration 0.01
   }
   delete_job $job_id 1

   # build queue requests
   set queue_request_list {}
   for {set i 0} {$i < $queue_request_count} {incr i} {
      set cqueue [scheduler_queue_requests_get_qname [expr $queue_count -$i -1]]
      if {$cq} {
         lappend queue_request_list $cqueue
      } else {
         foreach host $ts_config(execd_nodes) {
            set qinstance [get_queue_instance $cqueue $host]
            lappend queue_request_list $qinstance
         }
      }
   }

   set queue_request [join $queue_request_list ","]
   puts $CHECK_OUTPUT $queue_request_list
   
   # submit a job and request this queue list
   if {$soft} {
      set q_options "-soft -q $queue_request"
   } else {
      if {$parallel} {
         set q_options "-masterq $queue_request"
      } else {
         set q_options "-q $queue_request"
      }
   }
   set job_id [submit_job "$options $q_options $ts_config(product_root)/examples/jobs/sleeper.sh 60"]

   # wait for the job to start and evaluate queue
   wait_for_jobstart $job_id "" 60
   get_extended_job_info $job_id
   puts $CHECK_OUTPUT "job is running in queue $job_info(queue)"

   if {$soft == 0} {
      foreach queue $job_info(queue) {
         if {$queue != ""} {
            if { $cq } {
               set at_pos [string first "@" $queue]
               incr at_pos -1
               set cqueue [string range $queue 0 $at_pos]
               puts $CHECK_OUTPUT "substring of $queue is $cqueue"
               if {[lsearch -exact $queue_request_list $cqueue] < 0} {
                  add_proc_error $scenario -1 "job is running in queue $cqueue, expected it to run in one of $queue_request_list"
               }
            } else {
               if {[lsearch -exact $queue_request_list $queue] < 0} {
                  add_proc_error $scenario -1 "job is running in queue $queue, expected it to run in one of $queue_request_list"
               }
            }
         }
      }
   }

   # measure time and compare to scheduling time without requests
   # it may not be more than 5 times slower
   # unfortunately, if soft requests are used the difference is 
   # much higher since "fast-track" scheduling can't be done here
   set duration [scheduler_queue_requests_sched_time]
   if {$soft == 0} {
      set factor 5.0
   } else {
      set factor 20.0
   }

   if {$default_duration < [expr $duration / $factor ]} {
      add_proc_error $scenario -1 "scheduling of job with queue requests took too long ($duration vs. $default_duration without requests). This is probably IZ 1981"
   }

   # close the tail to schedd messages file
   close_logfile_wait

   # delete the job and wait until it leaves qmaster - we want to delete the queues!
   delete_job $job_id 1

   set_error 0 "ok"
}


