#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# JG: TODO: Create chart: actual resource share over time based on 
#           output of sge_share_mon

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

# set check_root_access_needs "yes"


# define a level initialization procedure:
set check_init_level_procedure "share_tree_init_level"

# define test's name and run level descriptions
set check_name            "share_tree"
set check_category        "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_highest_level   100
set check_description(0)  "Testing geee share_tree (functional test)"
set check_description(100)  "Testing geee share_tree"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function "share_tree_setup"
set check_cleanup_function "share_tree_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "share_tree_test"
lappend check_functions "issue_751"

global share_tree_job_counter 
global share_tree_percentage_variation
global sharetree_stored_configuration

proc share_tree_init_level {} {
   global CHECK_ACT_LEVEL
   global CHECK_PRODUCT_TYPE
   global share_tree_job_counter
   global share_tree_percentage_variation

   if {[string compare $CHECK_PRODUCT_TYPE "sgeee"] != 0} {
      return -1
   }

   switch -- $CHECK_ACT_LEVEL {
      0 {
         set share_tree_job_counter 5 
         set share_tree_percentage_variation 10
         return 0
      }
      100 {
         set share_tree_job_counter       100
         set share_tree_percentage_variation  2
         return 0
      }
   }
   return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------

proc wait_for_job_tickes {job_id} {
   set my_timeout [timestamp]
   incr my_timeout 300
   
   set last_job_tickets 0
   while {$last_job_tickets == 0 && [timestamp] < $my_timeout} {
      get_extended_job_info $job_id job_info_var
      if {[info exists job_info_var(tckts)]} {
         set last_job_tickets $job_info_var(tckts)
      }
      ts_log_fine "waiting for job $job_id to get its tickets ..."
      after 1000
   }
   if {[timestamp] >= $my_timeout} {
      ts_log_severe "timeout while waiting for job tickets"
   }
}

proc get_job_tickets {job_list_prj1 job_list_prj2 job_list_prj3 array_name} {
   upvar $array_name my_tickets   
   
   set job_list ""
   foreach elem $job_list_prj1 {
      lappend job_list $elem
   }
   foreach elem $job_list_prj2 {
      lappend job_list $elem
   }
   foreach elem $job_list_prj3 {
      lappend job_list $elem
   }

   set nr_of_jobs [llength $job_list]

   set job_info_var ""
   foreach elem $job_list {
      unset job_info_var
      get_extended_job_info $elem job_info_var
      set my_tickets($elem) $job_info_var(tckts)
      ts_log_progress FINE "\rjob to do: $nr_of_jobs ...\r"
      incr nr_of_jobs -1
   }
   ts_log_fine "                        "
}

proc get_ticket_sum {job_list ticket_array_name} {
   upvar $ticket_array_name my_tickets

   set sum 0
   foreach elem $job_list {
      incr sum $my_tickets($elem)
   }
   return $sum
}

proc get_normalized_ticket_order {job_list_prj1 job_list_prj2 job_list_prj3 most_prior_project ticket_array_name return_array} {

   upvar  $ticket_array_name my_tickets  
   upvar  $return_array my_job_ticket_list

   set job_list ""
   foreach elem $job_list_prj1 {
      lappend job_list $elem
   }
   foreach elem $job_list_prj2 {
      lappend job_list $elem
   }
   foreach elem $job_list_prj3 {
      lappend job_list $elem
   }

   set ticket_list ""
   foreach job $job_list {
      lappend ticket_list $my_tickets($job)
   }

   set sorted_tickets [lsort -integer -decreasing $ticket_list]

   set normalized_list ""
   set last_elem ""
   foreach elem $sorted_tickets {
      if { $last_elem == $elem } {
         continue
      }
      lappend normalized_list $elem
      set last_elem $elem
   }
   set lf_nr 0
   set last_prj2_nr -1
   foreach elem $normalized_list {
      foreach job $job_list {
         if {$my_tickets($job) == $elem} {
            set project [get_project_member $job_list_prj1 $job_list_prj2 $job_list_prj3 $job]

            set my_job_ticket_list($lf_nr,project) $project
            set my_job_ticket_list($lf_nr,job_id)  $job
            set my_job_ticket_list($lf_nr,tickets) $elem
            if {$project == $most_prior_project} {
               set last_prj2_nr $lf_nr
            }
            incr lf_nr 1
         }
      } 
   }
   set my_job_ticket_list(job_count) $lf_nr 
   set my_job_ticket_list(last_prior_job_nr) $last_prj2_nr
  
   set jobs1_count 0
   set jobs2_count 0
   set jobs3_count 0
   for {set i 0} {$i <= $my_job_ticket_list(last_prior_job_nr)} {incr i 1} {   
      if {$my_job_ticket_list($i,project) == 1} {
         incr jobs1_count 1
      }
      if {$my_job_ticket_list($i,project) == 2} {
         incr jobs2_count 1
      }
      if {$my_job_ticket_list($i,project) == 3} {
         incr jobs3_count 1
      }
   }
   set my_job_ticket_list(job_count_prj1) $jobs1_count
   set my_job_ticket_list(job_count_prj2) $jobs2_count
   set my_job_ticket_list(job_count_prj3) $jobs3_count

   set all_prj_count [expr $jobs1_count + $jobs2_count + $jobs3_count]
   set my_job_ticket_list(job_sum) $all_prj_count
   
   set all_prj_count_unit [expr $all_prj_count / 100.0]
   set prj1_percentage [expr $jobs1_count / $all_prj_count_unit]
   set prj2_percentage [expr $jobs2_count / $all_prj_count_unit]
   set prj3_percentage [expr $jobs3_count / $all_prj_count_unit]

   set my_job_ticket_list(job_percent_prj1) $prj1_percentage
   set my_job_ticket_list(job_percent_prj2) $prj2_percentage
   set my_job_ticket_list(job_percent_prj3) $prj3_percentage
 
   return $normalized_list
}

proc share_tree_setup  {} {
   global ts_config
   global CHECK_PRODUCT_TYPE
   global sharetree_stored_configuration test_queue test_host

   if {[string compare $CHECK_PRODUCT_TYPE "sgeee"] != 0} {
      ts_log_config "not available for sge system"
      return 
   }
    
   get_config sharetree_stored_configuration
   set my_execd_params "SHARETREE_RESERVED_USAGE=true"
   if {[string compare -nocase "none" $sharetree_stored_configuration(execd_params)] != 0} {
      append my_execd_params ",$sharetree_stored_configuration(execd_params)"
   }
   set myconfig(execd_params) "$my_execd_params"
   set_config myconfig

   foreach elem $ts_config(execd_nodes) {
      disable_queue [get_queue_instance "all.q" "$elem"] 
   }  
  
   set test_host [lindex $ts_config(execd_nodes) 0]
   set test_queue [get_queue_instance "test" "$test_host"]
   set change_array(slots) "1"
   set change_array(load_thresholds) "none"
   add_queue "test" $test_host change_array

   add_project "project1"
   add_project "project2"
   add_project "project3"

   # delete a possibly existing sharetree
   del_sharetree
 
   # create the sharetree
   stree_buffer_init stree
   stree_buffer_add_node stree "/node1" 8000
   stree_buffer_add_node stree "/node1/project1" 4000
   stree_buffer_add_node stree "/node1/project2" 6000
   stree_buffer_add_node stree "/node2" 2000
   stree_buffer_add_node stree "/node2/project3" 10000
   stree_buffer_commit stree

   # setup scheduler config
   get_schedd_config my_config 
   set my_config(weight_tickets_share) "10000"
   set my_config(job_load_adjustments) "np_load_avg=0.0"
   set my_config(schedule_interval)    "2:0:0"
   set my_config(usage_weight_list)    "cpu=1,mem=0,io=0"
   set my_config(halftime)             "10"
   set_schedd_config my_config
}

proc get_project_member {prj1 prj2 prj3 job_id} {
   
   foreach elem $prj1 {
      if {$elem == $job_id} {
         return 1
      }
   }
   foreach elem $prj2 {
      if {$elem == $job_id} {
         return 2
      }
   }
   foreach elem $prj3 {
      if {$elem == $job_id} {
         return 3
      }
   }
   return 0
}


proc share_tree_test {} {
   global ts_config
   global CHECK_PRODUCT_TYPE 
   global share_tree_job_counter CHECK_PROTOCOL_DIR
   global share_tree_percentage_variation
   global prj1_id_list prj2_id_list prj3_id_list
   global test_queue

   if {[string compare $CHECK_PRODUCT_TYPE "sgeee"] != 0} {
      ts_log_config "not available for sge system"
      return 
   }
   
   trigger_scheduling

   disable_queue "$test_queue"

   set prj1_id_list ""
   set prj2_id_list ""
   set prj3_id_list ""
   set counter $share_tree_job_counter
   while {$counter > 0} {
      lappend prj1_id_list [ submit_job "-e /dev/null -o /dev/null -P project1 $ts_config(testsuite_root_dir)/scripts/sleeper.sh 5 $CHECK_PROTOCOL_DIR"]
      lappend prj2_id_list [ submit_job "-e /dev/null -o /dev/null -P project2 $ts_config(testsuite_root_dir)/scripts/sleeper.sh 5 $CHECK_PROTOCOL_DIR"]
      set last_job [ submit_job "-e /dev/null -o /dev/null -P project3 $ts_config(testsuite_root_dir)/scripts/sleeper.sh 5 $CHECK_PROTOCOL_DIR"]
      lappend prj3_id_list $last_job      
      incr counter -1
   }

   wait_for_jobpending $last_job "leeper" 60

   trigger_scheduling
   
   wait_for_job_tickes $last_job

   
   get_job_tickets $prj1_id_list $prj2_id_list $prj3_id_list tickets
   
   set sorted_tickets [get_normalized_ticket_order  $prj1_id_list $prj2_id_list $prj3_id_list 2 tickets answer ]
   

   if {$answer(job_count) != [ expr $share_tree_job_counter * 3]} {
      ts_log_severe "not all jobs in list"
   }

   set ticket_count 0
   for {set i 0} {$i < $answer(job_count)} {incr i 1} {
       ts_log_fine "($i) tickets: $answer($i,tickets) job_id: $answer($i,job_id) project: $answer($i,project)"  
       incr ticket_count $answer($i,tickets) 
   }
   ts_log_fine "SUM of tickets: $ticket_count"
   ts_log_fine "last job of project 2: $answer(last_prior_job_nr)"
   ts_log_fine "job counts:"
   ts_log_fine "prj1: $answer(job_count_prj1)"
   ts_log_fine "prj2: $answer(job_count_prj2)"
   ts_log_fine "prj3: $answer(job_count_prj3)"
   ts_log_fine "============"
   ts_log_fine "sum : $answer(job_sum)"
   ts_log_fine "percentage:"
   ts_log_fine "prj1: $answer(job_percent_prj1)"
   ts_log_fine "prj2: $answer(job_percent_prj2)"
   ts_log_fine "prj3: $answer(job_percent_prj3)"

   set p1_abs [expr int($answer(job_percent_prj1))]
   set p2_abs [expr int($answer(job_percent_prj2))]
   set p3_abs [expr int($answer(job_percent_prj3))]

   set x $share_tree_percentage_variation

   if {$p1_abs < [expr 32 - $x] || $p1_abs > [expr 32 + $x]} {
      ts_log_severe "project1 percentage not 32 +/- $x % (value=$answer(job_percent_prj1),$p1_abs)"
   }
   if {$p2_abs < [expr 48 - $x] || $p2_abs > [expr 48 + $x]} {
      ts_log_severe "project2 percentage not 48 +/- $x % (value=$answer(job_percent_prj2),$p2_abs)"
   }
   if {$p3_abs < [expr 20 - $x] || $p3_abs > [expr 20 + $x]} {
      ts_log_severe "project3 percentage not 20 +/- $x % (value=$answer(job_percent_prj3),$p3_abs)"
   }


   foreach job $prj1_id_list {
      if {[file isfile $CHECK_PROTOCOL_DIR/$job] == 1} {
         file delete $CHECK_PROTOCOL_DIR/$job
      }
   }
   foreach job $prj2_id_list {
      if {[file isfile $CHECK_PROTOCOL_DIR/$job] == 1} {
         file delete $CHECK_PROTOCOL_DIR/$job
      }
   }
   foreach job $prj3_id_list {
      if {[file isfile $CHECK_PROTOCOL_DIR/$job] == 1} {
         file delete $CHECK_PROTOCOL_DIR/$job
      }
   }

#   set mod_config(schedule_interval)    "0:0:10"
#   set_schedd_config mod_config
   enable_queue "$test_queue"

   set done 0
   set my_timeout [timestamp]
   incr my_timeout 2500
   set nr_of_jobs 0
   set last_job_count 0
   while {$done == 0 && [timestamp] < $my_timeout} {
      set done 1
      foreach job $prj2_id_list {
         set file_here [file isfile $CHECK_PROTOCOL_DIR/$job]
         if {$file_here == 0} {
            set done 0
         } 
      }

      if {$done == 1} {
         continue
      }

      set result [start_sge_bin "qstat" "-s r"]
      set rjobout [split $result "\n"]
      set running_jobs [llength $rjobout]
      if {$running_jobs > 0} {
         incr running_jobs -2 ;# 2 header lines
      }
      if {$running_jobs == 0} {
         trigger_scheduling
      } else {
         # Try if spooling with running jobs is working
         if {$nr_of_jobs == 5} {
            shutdown_master_and_scheduler $ts_config(master_host) [get_qmaster_spool_dir]
            startup_qmaster

            trigger_scheduling
            wait_for_job_tickes $last_job
         }
      }
      after 2000
      incr nr_of_jobs 1
   }
   disable_queue "$test_queue"
   if {[timestamp] >= $my_timeout} {
      ts_log_severe "timeout while waiting for start of jobs"
   }
     
   set prj3_count 0
   foreach job $prj3_id_list {
      if {[file isfile $CHECK_PROTOCOL_DIR/$job] == 1} {   
         incr prj3_count 1
      }
   }

   set prj1_count 0
   foreach job $prj1_id_list {
      if {[file isfile $CHECK_PROTOCOL_DIR/$job] == 1} {   
         incr prj1_count 1
      }
   }

   set prj2_count 0
   foreach job $prj2_id_list {
      if {[file isfile $CHECK_PROTOCOL_DIR/$job] == 1} {   
         incr prj2_count 1
      }
   }
   ts_log_newline
   ts_log_fine "project1 count: $prj1_count"
   ts_log_fine "project2 count: $prj2_count"
   ts_log_fine "project3 count: $prj3_count"

   set all_prj_count [ expr ( $prj1_count + $prj2_count + $prj3_count ) ]
   ts_log_fine "====================="
   ts_log_fine "sum: $all_prj_count"  
 
   set all_prj_count_unit [expr $all_prj_count / 100.0]

   set prj1_percentage [expr $prj1_count / $all_prj_count_unit]
   set prj2_percentage [expr $prj2_count / $all_prj_count_unit]
   set prj3_percentage [expr $prj3_count / $all_prj_count_unit]
  

   ts_log_fine "project1 % $prj1_percentage"
   ts_log_fine "project2 % $prj2_percentage"
   ts_log_fine "project3 % $prj3_percentage"

   set x $share_tree_percentage_variation

   if {$prj1_percentage < [expr 32 - $x] || $prj1_percentage > [expr 32 + $x]} {
      ts_log_severe "project1 running percentage not 32 +/- $x % (value=$prj1_percentage)"
   }
   if {$prj2_percentage < [expr 48 - $x] || $prj2_percentage > [expr 48 + $x]} {
      ts_log_severe "project2 running percentage not 48 +/- $x % (value=$prj2_percentage)"
   }
   if {$prj3_percentage < [expr 20 - $x] || $prj3_percentage > [expr 20 + $x]} {
      ts_log_severe "project3 running percentage not 20 +/- $x % (value=$prj3_percentage)"
   }

   foreach job [concat $prj1_id_list $prj2_id_list $prj3_id_list] {
      if {[file isfile $CHECK_PROTOCOL_DIR/$job] == 1} {
         file delete $CHECK_PROTOCOL_DIR/$job
      }
   }
}


proc share_tree_cleanup  {} {
   global ts_config
   global CHECK_PRODUCT_TYPE 
   global prj1_id_list prj2_id_list prj3_id_list
   global sharetree_stored_configuration test_host
 
   # reset the schedd config to enable schedule interval again
   reset_schedd_config

   # delete all jobs
   delete_all_jobs

   # wait for real end of all jobs
   wait_for_end_of_all_jobs 60

   # enable all queues again
   foreach elem $ts_config(execd_nodes) {
      enable_queue [get_queue_instance "all.q" $elem]
   }  

   # remote test quque
   del_queue test $test_host 0 1

   # delete the sharetree
   del_sharetree

   # delete projects
   del_project "project1"
   del_project "project2"
   del_project "project3"

   # reset configuration
   set_config sharetree_stored_configuration
}


proc issue_751 {} {
  global ts_config CHECK_USER
  global prj1_id_list prj2_id_list prj3_id_list

  set prj1_id_list ""
  set prj2_id_list ""
  set prj3_id_list ""

  set host $ts_config(master_host) 

   # the bug has only be fixed in maintrunk for 6.1
   # do only raise a warning for ealier versions
   set error_level SEVERE
   set additional_message ""
   if {$ts_config(gridengine_version) <= 60} {
      set error_level INFO
      set additional_message "\nhas been fixed only for 6.1 and higher"
   }

  set output [start_sge_bin "qconf" "-sstnode /" $host $CHECK_USER exit_state 30]
  ts_log_fine $output
  if {$exit_state != 0} {
      ts_log $error_level "Issue 751: qconf -sstnode / broken$additional_message"
  }

  set output [start_sge_bin "qconf" "-sstnode Root" $host $CHECK_USER exit_state 30]
  ts_log_fine $output
  if {$exit_state != 0} {
      ts_log $error_level "Issue 751: qconf -sstnode Root broken$additional_message"
  }
}
