#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env
#set check_root_access_needs "yes"


# define a level initialization procedure:
set check_init_level_procedure "urgency_calculation_init_level"

# define test's name and run level descriptions
set check_name            "urgency_calculation"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "check urgency calculation of the scheduler"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function urgency_calculation_setup
set check_cleanup_function urgency_calculation_cleanup

# define test's procedure order
set check_functions ""
lappend check_functions "urgency_calculation"


proc urgency_calculation_init_level {} {
   global ts_config
   global CHECK_ACT_LEVEL
   
   switch -exact -- $CHECK_ACT_LEVEL {
      0 {  return 0 }
      default { return -1 }      
   }
}

# -------- local test procedures: initialization------------------------------

global urgency_queue_name
global urgency_job_name
global urgency_org_slots_complex
global urgency_pe_name

proc urgency_calculation_setup {  } {

   global urgency_queue_name urgency_job_name urgency_pe_name 
   global urgency_org_slots_complex
   global ts_config
   global CHECK_OUTPUT
   
   set urgency_job_name   "urgjob"
   set urgency_pe_name    "urgpe"
   
   # Setup the scheduler
   
   set schedd_conf(weight_ticket)        "0.000000"
   set schedd_conf(weight_waiting_time)  "0.000000"
   set schedd_conf(weight_deadline)      "0.000000"
   set schedd_conf(weight_urgency)       "1.000000"
   set schedd_conf(weight_priority)      "0.000000"
   
   set result [ set_schedd_config schedconf ]
   if { $result != 0 } {
      add_proc_error "urgency_calculation_setup" -1 "setup of scheduler failed"
      return -1
   }
   
   puts $CHECK_OUTPUT "Scheduler configured"

   # setup the test queue
   set urgency_queue_name "urg_queue"   
   set queue_conf(slots) 0

   puts $CHECK_OUTPUT "Add queue $urgency_queue_name"
   
   add_queue $urgency_queue_name "@allhosts" queue_conf 1
   
   # Disable all queue instances of the urgency_queue
   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance $urgency_queue_name $host]
   }
   disable_queue $queue_list   
   
   # Save original complexes
   get_complex urgency_org_complexes
   
   set urgency_org_slots_complex $urgency_org_complexes(slots)
   
   # Setup the complexes
   
   set tmp_complex(slots) "s INT <= YES YES 1 1000"
   set tmp_complex(dummy) "du1 INT <= YES YES 1 500"
   
   set result [ set_complex tmp_complex ]
   if { $result < -4 } {
       add_proc_error "urgency_calculation_setup" -1 "set complexes failed ($result)"
       return -1
   }
   puts $CHECK_OUTPUT "complexes setup complete"
   
   # setup pe
   
   set pe_conf(pe_name)            $urgency_pe_name
   set pe_conf(slots)              0
   set pe_conf(user_lists)         "NONE"
   set pe_conf(xuser_lists)        "NONE"
   set pe_conf(start_proc_args)    "NONE"
   set pe_conf(stop_proc_args)     "NONE"
   set pe_conf(allocation_rule)    "\$pe_slots"
   set pe_conf(control_slaves)     "TRUE"
   set pe_conf(job_is_first_task)  "FALSE"
   
   set result [ add_pe pe_conf ]
   if { $result < 0 } {
      add_proc_error "urgency_calculation_setup" -1 "add_pe failed ($result)"
      return -1
   }
   
   assign_queues_with_pe_object $urgency_queue_name $ts_config(master_host) $urgency_pe_name   
   
   set_error 0 "setup OK"
   return 0
}

proc urgency_calculation_cleanup {  } {

   global urgency_queue_name urgency_org_slots_complex urgency_pe_name
   global ts_config

   delete_all_jobs
   wait_for_end_of_all_jobs 60
   after 5000
   
   # unassign pe with queue
   unassign_queues_with_pe_object $urgency_pe_name
   after 1000

   set result [ del_pe $urgency_pe_name ]
   if { $result != 0 } {
      add_proc_error "urgency_calculation_cleanup" -1 "deletion of pe failed"
   }
   
   # reset the scheduler configuration
   set result [ reset_schedd_config ]
   if { $result != 0 } {
      add_proc_error "urgency_calculation_cleanup" -1 "result scheduler failed ($result)"
   }
   
   set result [ del_queue $urgency_queue_name "@allhosts" 0 1 ]
   if { $result != 0 } {
      add_proc_error "urgency_calculation_cleanup" -1 "del_queue failed ($result)"
   }
   
   # Reset slots complex    
   set tmp_complex(slots) $urgency_org_slots_complex
   set tmp_complex(dummy) ""
   
   set result [ set_complex tmp_complex ]
   if { $result < -4 } {
      add_proc_error "urgency_calculation_cleanup" -1 "reset of slots complex failed ($result)"
   }
   
   set_error 0 "clean OK"
   return 0
}



proc urgency_calculation { } {
   
   global CHECK_PRODUCT_ROOT CHECK_ARCH
   global CHECK_OUTPUT CHECK_USER
   global CHECK_ACT_LEVEL
   global ts_config

   set value_names { slots urg nurg rrcontr }

   # job index:        0       1       2      3         4       5
   # -------------------------------------------------------------
   set pe      {       2       4       0      0         2       4 }
   set dummy   {       0       0       0      5         5       5 }
   # expected values: ---------------------------------------------
   set slots   {       2       4       1      1         2       4 }
   set urg     {    2000    4000    1000    3500     7000   14000 }
   set nurg    { 0.07692 0.23077 0.00000 0.19231  0.46154 1.00000 }
   set rrcontr {    2000    4000    1000    3500     7000   14000 }
   
   set job_count [llength $pe]
   
   urgency_build_job_array_entry jobs "pe"       $pe
   urgency_build_job_array_entry jobs "dummy"    $dummy
   urgency_build_job_array_entry jobs "slots"    $slots
   urgency_build_job_array_entry jobs "urg"      $urg
   urgency_build_job_array_entry jobs "nurg"     $nurg
   urgency_build_job_array_entry jobs "rrcontr"  $rrcontr
   
   # Submit the jobs
   set result [ urgency_submit_jobs jobs $job_count ]
   if { $result != 0 } {
      add_proc_error "urgency_calculation" -1 "submit jobs failed"
      return -1
   }
   
   set result [ urgency_check_values jobs $job_count $value_names ]
   
   if { $result != 0 } {
      return -1
   }
   
   # Delete the job(3) and check the values
   # Urgency must not be changed   
   puts $CHECK_OUTPUT "Delete job(3) $jobs(3,id)"
   set result [delete_job $jobs(3,id) 60]
   if { $result != 0 } {
      add_proc_error "delete job 3 (id=$jobs(3,id)) failed"
      return -1
   }
   
   # set id of job 3 to zero, urgency_check_values will skip this job
   set jobs(3,id) 0
   
   set result [ urgency_check_values jobs $job_count $value_names ]
   
   if { $result != 0 } {
      return -1
   }
   
   # Delete the job(2) and check the values
   # Urgency has to be changed   
   
   puts $CHECK_OUTPUT "Delete job(2) $jobs(2,id)"
   set result [delete_job $jobs(2,id) 60]
   if { $result != 0 } {
      add_proc_error "delete job 2 (id=$jobs(2,id)) failed"
      return -1
   }
   # set id of job 2 to zero, urgency_check_values will skip this job
   set jobs(2,id) 0
   
   # job index:        0       1       2      3         4       5
   # -------------------------------------------------------------
   set urg     {    2000    4000       0      0      7000    14000 }
   set nurg    { 0.00000 0.16667       0      0   0.41667  1.00000 }
   set rrcontr {    2000    4000       0      0      7000    14000 }
   
   urgency_build_job_array_entry jobs "urg"      $urg
   urgency_build_job_array_entry jobs "nurg"     $nurg
   urgency_build_job_array_entry jobs "rrcontr"  $rrcontr
    
   set result [ urgency_check_values jobs $job_count $value_names ]
   
   if { $result != 0 } {
      return -1
   }
   
   set_error 0 "OK"
   return 0
}

proc urgency_check_values { jobs job_count value_names } {
   
   global CHECK_OUTPUT ts_config CHECK_ARCH
   
   upvar $jobs tmp_jobs
   
   trigger_scheduling
   after 5000
   
   set error_count 0
   for { set i 0 } { $i < $job_count } { incr i 1 } {
      if { $tmp_jobs($i,id) == 0 } {
         puts $CHECK_OUTPUT "skip job $i $tmp_jobs($i,id)"
         continue
      }
      set result [ get_urgency_job_info $tmp_jobs($i,id) ]
      if { $result == 0 } {
         add_proc_error "urgency_calculation" -1 "job($i) $tmp_jobs($i,id) unknown"
         return -1
      } elseif { $result != 1 } {
         add_proc_error "urgency_calculation" -1 "get_urgency_job_info for job($i) $tmp_jobs($i,id) failed ($result)"
         return -1
      }
      
      foreach value_name $value_names {
         if { $job_info($value_name) != $tmp_jobs($i,$value_name) } {
            add_proc_error "urgency_calculation" -1 "Invalid $value_name $job_info($value_name) for job $i $tmp_jobs($i,id) (expected was $tmp_jobs($i,$value_name))"
            incr error_count 1
         } else {
            puts $CHECK_OUTPUT "job $i $tmp_jobs($i,id) has correct $value_name $job_info($value_name)"
         }
      }
   }
   
   if { $error_count == 0 } {
      return 0
   } else {
      return [expr 0 - $error_count]
   }
}

proc urgency_build_job_array_entry { jobs entry_name entry_list } {
   
   upvar $jobs tmp_jobs
   
   set entry_count [llength $entry_list]
   set i 0
   foreach e $entry_list {
     set tmp_jobs($i,$entry_name) $e 
     incr i 1
   }
}

proc urgency_submit_jobs { jobs job_count } {
   
   global ts_config urgency_job_name
   global urgency_queue_name urgency_job_name urgency_pe_name
   global CHECK_USER CHECK_HOST CHECK_OUTPUT
    
   upvar $jobs tmp_jobs
   
   set pre_args  "-e /dev/null -o /dev/null -q $urgency_queue_name -N $urgency_job_name"
   set post_args " $ts_config(product_root)/examples/jobs/sleeper.sh 3600" 
   
   for {set i 0} {$i < $job_count} { incr i 1 } {
      
      set job_args $pre_args
      if { $tmp_jobs($i,dummy) != 0 } {
         append job_args " -hard -l dummy=$tmp_jobs($i,dummy)"
      }
      if { $tmp_jobs($i,pe) != 0 } {
         append job_args " -pe $urgency_pe_name $tmp_jobs($i,pe)"
      }
      append job_args " $post_args"
      set result [ submit_job $job_args 1 60 "" "" ]
      if { $result <= 0 } {
         add_proc_error "ticket_submit_jobs" -1 "submit_job failed ($result)"
         return -1
      }
      set tmp_jobs($i,id) $result
      
      puts $CHECK_OUTPUT "job\($i\) has id $tmp_jobs($i,id)"
   }
   return 0
}

