#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

# define test's name and run level descriptions
set check_name            "scheduler_messages"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   1
set check_description(0)  "check scheduler messages without schedd_job_info"
set check_description(1)  "check scheduler messages with schedd_job_info"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function scheduler_messages_setup
set check_cleanup_function scheduler_messages_cleanup
set check_setup_level_function scheduler_messages_level_setup
set check_cleanup_level_function scheduler_messages_level_cleanup

# define a level initialization procedure:
set check_init_level_procedure "scheduler_messages_init_level"

# define test's procedure order
set check_functions ""
lappend check_functions "scheduler_messages_check"
lappend check_functions "scheduler_messages_qmaster_crash"

proc scheduler_messages_init_level {} {
   global ts_config
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 {
         return 0
      }
      1 {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization ------------------------------

proc scheduler_messages_setup {} {
   global ts_config
   global global_host_backup
   global first_host
   global second_host

   ts_log_fine "scheduler_messages_setup" 

   set pe(slots)             "0"
   set pe(allocation_rule)   "\$pe_slots"
   add_pe "pe_slots" pe

   set pe(slots)             "1"
   set pe(allocation_rule)   "\$pe_slots"
   add_pe "pe_slots1" pe

   set pe(slots)             "20"
   set pe(allocation_rule)   "\$fill_up"
   add_pe "pe_slots20" pe

   add_project "sched_messages_project_queue"
   add_project "sched_messages_project_host"
   add_project "sched_messages_project_global"

   add_ckpt "sched_messages_ckpt"

   set host_list [host_conf_get_suited_hosts 2]
   set first_host [lindex $host_list 0]
   set second_host [lindex $host_list 1]

   set host_conf(complex_values) "h_rt=8::"
   set host_conf(xprojects)      "sched_messages_project_global"
   set_exechost host_conf "global"

   # setup queues A and B each with two slots on a single host
   set queue_conf(slots)     "2"
   set queue_conf(h_rt)      "6::"
   set queue_conf(xprojects) "sched_messages_project_queue"
   #set queue_conf(load_thresholds)  "NONE"
   add_queue "A" "$first_host $second_host" queue_conf 1
   add_queue "B" "$first_host $second_host" queue_conf 1

   set host_conf(complex_values) "h_rt=4::"
   set host_conf(xprojects)      "sched_messages_project_host"
   set_exechost host_conf "$first_host"
   set_exechost host_conf "$second_host"

   set rqs_name "queue_h_rt"
   set rules ""
   lappend rules "queues A,B to h_rt=1::"
   set rqs_charray($rqs_name,limit) "$rules"
   add_rqs rqs_charray

   set rqs_name "host_h_rt"
   set rules ""
   lappend rules "hosts $first_host,$second_host to h_rt=1::"
   set rqs_charray($rqs_name,limit) "$rules"
   add_rqs rqs_charray

   set rqs_name "global_h_rt"
   set rules ""
   lappend rules "to h_rt=1::"
   set rqs_charray($rqs_name,limit) "$rules"
   add_rqs rqs_charray
}

proc scheduler_messages_level_setup {} {
   global CHECK_ACT_LEVEL

   ts_log_fine "scheduler_messages_level_setup" 

   if {$CHECK_ACT_LEVEL == 1} {
      set schedd_conf(schedd_job_info) "true"
      set_schedd_config schedd_conf
   }
}

proc scheduler_messages_cleanup {} {

   global global_host_backup
   global first_host second_host
   global ts_config

   ts_log_fine "scheduler_messages_cleanup" 

   delete_all_jobs
   wait_for_end_of_all_jobs

   # remove the cqueues
   del_queue "A" "" 1 1
   del_queue "B" "" 1 1

   del_pe        "pe_slots"
   del_pe        "pe_slots1"
   del_pe        "pe_slots20"

   del_ckpt "sched_messages_ckpt"

   set host_conf(complex_values) "NONE"
   set host_conf(xprojects) "NONE"
   set_exechost host_conf "global"
   set_exechost host_conf "$first_host"
   set_exechost host_conf "$second_host"

   del_project "sched_messages_project_queue"
   del_project "sched_messages_project_host"
   del_project "sched_messages_project_global"

   if {[get_rqs_list rqs_names "" "" 0] == 0} {
      foreach elem $rqs_names {
         ts_log_fine "Removing resource quota sets $elem ...\n"
         del_rqs $elem
      }
   }
}

proc scheduler_messages_level_cleanup {} {
   global CHECK_ACT_LEVEL

   ts_log_fine "scheduler_messages_level_cleanup" 

   if {$CHECK_ACT_LEVEL == 1} {
      reset_schedd_config
   }
}

# -------- local test procedures: initialization ------------------------------

proc scheduler_messages_check {} {

   set errors "" 

   # no assignment due to queue pe_list missing PE association
   append errors [scheduler_messages_single_check "PE" false "pe_slots20"]
   append errors [scheduler_messages_single_check "PE" false "pe_slots1"]
   append errors [scheduler_messages_single_check "PE" false "pe_slots"]

   # no assignment due to queue/host/global h_rt limit
   append errors [scheduler_messages_single_check "queue" false "h_rt"]
   append errors [scheduler_messages_single_check "host" false "h_rt"]
   append errors [scheduler_messages_single_check "global" false "h_rt"]

   # no assignment due to queue/host/global h_rt resource quota
   mod_attr "resource_quota" "enabled" "true" "queue_h_rt"
   append errors [scheduler_messages_single_check "queue" true "h_rt"]
   mod_attr "resource_quota" "enabled" "false" "queue_h_rt"

   mod_attr "resource_quota" "enabled" "true" "host_h_rt"
   append errors [scheduler_messages_single_check "host" true "h_rt"]
   mod_attr "resource_quota" "enabled" "false" "host_h_rt"

   mod_attr "resource_quota" "enabled" "true" "global_h_rt"
   append errors [scheduler_messages_single_check "global" true "h_rt"]
   mod_attr "resource_quota" "enabled" "false" "global_h_rt"

   # no assignment due to queue/host/global project
   append errors [scheduler_messages_single_check "queue" false "project"]
   append errors [scheduler_messages_single_check "host" false "project"]
   append errors [scheduler_messages_single_check "global" false "project"]

   # no assignment due to queue ckpt
   append errors [scheduler_messages_single_check "queue" false "checkpointing"]

   if {$errors != ""} {
      ts_log_severe $errors
   }

   return 0
}

proc scheduler_messages_single_check {resource_container via_quotas resource} {
   global first_host
   global second_host
   global CHECK_ACT_LEVEL

   set ret ""

   if {$via_quotas == true} {
      set h_rt "2:00:0"
   } else {
      switch -- $resource_container {
         "PE" -
         "queue" {
            set h_rt "6:30:0"
         }
         "host" {
            set h_rt "4:30:0"
         }
         "global" {
            set h_rt "8:30:0"
         }
      }
   }

   switch -- $resource {
      "h_rt"  {
         set job_args "-l h_rt=$h_rt"
      }
      "pe_slots"  {
         set job_args "-pe pe_slots 1"
      }
      "pe_slots1"  {
         set job_args "-pe pe_slots1 2"
      }
      "pe_slots20"  {
         set job_args "-pe pe_slots20 20"
      }
      "project"  {
         set job_args "-P sched_messages_project_$resource_container"
      }
      "checkpointing"  {
         set job_args "-ckpt sched_messages_ckpt"
      }
   }

   # TODO: this will not work for localized SGE versions L10N
   if {$resource == "project" } {
      # The project error message has a different format
      set expected_string "*$resource_container*$resource*"
   } else {
      set expected_string "*cannot run*$resource_container*$resource*"
   }

   # check the qsub messages
   set result [start_sge_bin "qsub" "-w v $job_args -q A,B -b y /bin/sleep 3600"]
   if {[string match $expected_string $result] == 1} {

      # now test the qalter messages
      set jobid [submit_job "$job_args -q A,B -b y /bin/sleep 3600"]
      set result [start_sge_bin "qalter" "-w v $jobid"]
      ts_log_fine "result of qalter: #$result#"

      if {[string match $expected_string $result] == 1} {
         # if enabled check qstat -j schedd_job_info messages
         if {$CHECK_ACT_LEVEL == 1} {
            # trigger scheduling to ensure messages are generated
            trigger_scheduling
            after 3000
            set result [start_sge_bin "qstat" "-j $jobid"]
            ts_log_fine "result of qstat: #$result#"
            if {[string match $expected_string $result] == 1} {
            } else {
               set ret "test failed for qstat with $resource_container $via_quotas $resource\n"
            }
         }
      } else {
         set ret "test failed for qalter with $resource_container $via_quotas $resource\n"
         ts_log_fine "$ret"
      }
      delete_job $jobid
   } else {
      set ret "test failed for qsub with $resource_container $via_quotas $resource\n"
      ts_log_fine "$ret"
   }

   return $ret
}

proc scheduler_messages_qmaster_crash {} {
   global ts_config

   submit_job "-w e -l a=bla -b y /bin/sleep 3600" 0
   if {[is_qmaster_alive $ts_config(master_host) [get_qmaster_spool_dir]] == 0} {
      ts_log_severe "qsub -w e crashed qmaster"
      startup_qmaster 0
   }
}
