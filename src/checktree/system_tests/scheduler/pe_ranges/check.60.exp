#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

#set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "pe_ranges_init_level"

# define test's name and run level descriptions
set check_name            "pe_ranges"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   1
set check_description(0)  "test pe-ranges"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function pe_ranges_setup
set check_cleanup_function pe_ranges_cleanup

# define test's procedure order
set check_functions "pe_ranges_test"


global pe_ranges_test_hosts
global pe_ranges_saved_slot_count

proc pe_ranges_init_level {} {
   global CHECK_ACT_LEVEL

   if { $CHECK_ACT_LEVEL == 0 } {
      return  0
   }

   return -1  ;# no other level 
}




# -------- local test procedures: initialization------------------------------


proc pe_ranges_setup  {} {
   global ts_config
   global pe_ranges_test_hosts
   global pe_ranges_saved_slot_count
   global consumable_complex_backup
   global CHECK_OUTPUT

   # backup complex - we will modify it during the test
   get_complex consumable_complex_backup

   set pe_ranges_test_hosts {}
   set pe_ranges_saved_slot_count ""
   set execd_count 0
   foreach host $ts_config(execd_nodes) {
      if { $execd_count < 2 } {
         incr execd_count 1
         lappend pe_ranges_test_hosts "$host"
         puts $CHECK_OUTPUT "using host $host"
      } 
   }

   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }

   disable_queue $queue_list
   puts $CHECK_OUTPUT "disabled $queue_list"
   
   set pe(pe_name)           "round_robin"
   set pe(slots)             "999"
   set pe(allocation_rule)   "\$round_robin"
   add_pe pe

   set queue_settings(slots) 1000
   set queue_settings(load_thresholds) "np_load_avg=11.75"
   set queue_settings(pe_list)          "round_robin"
   set qname "res.q"
   add_queue $qname $pe_ranges_test_hosts queue_settings
   puts $CHECK_OUTPUT "added queue $qname for hosts $pe_ranges_test_hosts"

   set_error 0 "ok"
}

proc pe_ranges_cleanup  {} {
   global CHECK_OUTPUT ts_config
   global pe_ranges_test_hosts
   global pe_ranges_saved_slot_count
   global consumable_complex_backup

   delete_all_jobs
   wait_for_end_of_all_jobs 60
   trigger_scheduling

   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }
   enable_queue $queue_list
   puts $CHECK_OUTPUT "disabled $queue_list"


   set qname "res.q"
   del_queue $qname $pe_ranges_test_hosts  0 1

   del_pe        "round_robin"

   # restore complex
   set_complex consumable_complex_backup

   set_error 0 "ok"
}

proc pe_ranges_submit_pejobs_and_wait { job_arguments job_count job_count_max run_job_count } {
   global ts_config CHECK_OUTPUT CHECK_ARCH

   set job_id [submit_job "-pe round_robin $job_count-$job_count_max $job_arguments $ts_config(product_root)/examples/jobs/sleeper.sh 100"]

   while { 1 } {
      trigger_scheduling
      set running_jobs 0
      set error 0
      
      set job_state [is_job_running $job_id "leeper"]
      if { $job_state == 1 } {
         set job_std_state [get_standard_job_info  $job_id 1 ]

         set running_jobs [llength $job_std_state]
      }

      if { $job_state == -1 } {
         add_proc_error "pe_ranges_submit_jobs_and_wait" -2 "job was not submitted - stop"
         set error 1
         break
      }

      puts $CHECK_OUTPUT "running jobs count: $running_jobs"
      if { $running_jobs == $run_job_count || $error != 0 } {
         break
      }
      if { $running_jobs != 0 } {
         add_proc_error "pe_ranges_submit_jobs_and_wait" -2 "job (range: $job_count-$job_count_max) ran with the wrong slot count $running_jobs expected $run_job_count"
         set error 1
         break
      }
   }

   delete_all_jobs  
   wait_for_end_of_all_jobs 60
}

proc pe_ranges_test1 {} {
   global pe_ranges_test_hosts check_description CHECK_ARCH
   global CHECK_OUTPUT ts_config CHECK_CORE_MASTER CHECK_ACT_LEVEL CHECK_SCRIPT_FILE_DIR

   set job_arguments "-l test1=1 -o /dev/null -e /dev/null"

   pe_ranges_submit_pejobs_and_wait $job_arguments 7 20 0

   for { set i 1 } { $i <= 6 } { incr i 1 } {
      pe_ranges_submit_pejobs_and_wait $job_arguments $i $i $i
   }  
   
   set job_count 6
   set run_job_count 6
   
   for { set i 1 } { $i <= 6 } { incr i 1 } {
      pe_ranges_submit_pejobs_and_wait $job_arguments $i 6 $run_job_count  
   }

   for { set i 1 } { $i <= 6 } { incr i 1 } {
      set max_count [expr $i + $run_job_count]
      pe_ranges_submit_pejobs_and_wait $job_arguments $i $max_count $run_job_count  
   }

   for { set i 6 } { $i <= 12 } { incr i 1 } {
      pe_ranges_submit_pejobs_and_wait $job_arguments 6 $i $run_job_count  
   }
}

proc pe_ranges_test {} {
   global pe_ranges_test_hosts check_description CHECK_ARCH
   global CHECK_OUTPUT ts_config CHECK_CORE_MASTER CHECK_ACT_LEVEL CHECK_SCRIPT_FILE_DIR


   puts $CHECK_OUTPUT $check_description($CHECK_ACT_LEVEL)

   if { $CHECK_ACT_LEVEL == 0 } {

      # case a)
      #        test auto select pe range alg.
      puts $CHECK_OUTPUT "\ncase a)"

      # create test1 complex
      set test1_complex(test1) "t1 INT <= YES YES 0 1000"
      set_complex test1_complex
   
      # get original global host coniguration
      get_exechost orig_global_host global
   
      # modify complex_values of global host
      set global_host(complex_values) "test1=6"
      set_exechost global_host global
  
      set schedconf(params) "pe_range_alg=auto"
      set result [ set_schedd_config schedconf ]

      pe_ranges_test1

      # case b)
      #          test hightest pe-range match alg.
      puts $CHECK_OUTPUT "\ncase b)"
      set schedconf(params) "pe_range_alg=highest"
      set result [ set_schedd_config schedconf ]
  
      pe_ranges_test1

      # case c)
      #          test bin pe-range match alg.
      puts $CHECK_OUTPUT "\ncase c)"

      set schedconf(params) "pe_range_alg=bin"
      set result [ set_schedd_config schedconf ]
  
      pe_ranges_test1

      # case d)
      #         test least pe-range match alg.
      puts $CHECK_OUTPUT "\ncase d)"
      
      set schedconf(params) "pe_range_alg=least"
      set result [ set_schedd_config schedconf ]
  
      pe_ranges_test1

      #clean up
      set queue_settings(load_thresholds) "np_load_avg=11.75"
      mod_queue "res.q" $pe_ranges_test_hosts queue_settings
      
      set global_host(complex_values) $orig_global_host(complex_values)
      set_exechost global_host global
      
      set test1_complex(test1) ""
      set_complex test1_complex
      puts $CHECK_OUTPUT "done"

      
   }
     
   set_error 0 "ok"
}


