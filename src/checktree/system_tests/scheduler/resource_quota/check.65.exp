#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "resource_quota_init_level"

# define test's name and run level descriptions
set check_name            "resource_quota"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "resource quota test"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function resource_quota_setup
set check_cleanup_function resource_quota_cleanup

# define test's procedure order
set check_functions ""
lappend check_functions "resource_quota_dynamic_limit"

global resource_quota_test_host
global resource_quota_test_qname

proc resource_quota_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0
      } 
   } 

   return -1  ;# no other level 
}

proc resource_quota_setup  {} {
   global CHECK_OUTPUT ts_config resource_quota_test_host resource_quota_test_qname

   set resource_quota_test_host [lindex $ts_config(execd_nodes) 0]
   set resource_quota_test_qname "resource_quota.q"

   # disable all.q
   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }
   disable_queue $queue_list
   puts $CHECK_OUTPUT "disabled $queue_list"

   # create test queue
   set queue_settings(slots) 1000
   set queue_settings(load_thresholds) "np_load_avg=11.75"
   add_queue $resource_quota_test_qname $resource_quota_test_host queue_settings
   puts $CHECK_OUTPUT "added queue $resource_quota_test_qname for hosts $resource_quota_test_host"

   set_error 0 "ok"
}

proc resource_quota_cleanup  {} {
   global CHECK_OUTPUT ts_config resource_quota_test_host resource_quota_test_qname

   set queue_list {}
   foreach host $ts_config(execd_nodes) {
      lappend queue_list [get_queue_instance "all.q" $host]
   }
   enable_queue $queue_list
   puts $CHECK_OUTPUT "enabled $queue_list"

   del_queue $resource_quota_test_qname $resource_quota_test_host 0 1

   if {[get_rqs_list rqs_names "" "" 0] == 0} {
      foreach elem $rqs_names {
         puts $CHECK_OUTPUT "Removing resource quota sets $elem ...\n"
         del_rqs $elem
      }
   }

   set_error 0 "ok"
}

proc resource_quota_dynamic_limit {} {
   global resource_quota_test_host resource_quota_test_qname
   global CHECK_OUTPUT ts_config
   global CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER

   set job_options "-o /dev/null -j y $ts_config(product_root)/examples/jobs/sleeper.sh 10000"

   set rqs_name "dynamic_rqs"
   set host_num_proc [node_get_processors $resource_quota_test_host]
   set max_slots [expr $host_num_proc * 2]

   puts $CHECK_OUTPUT "testing dynamic limit on host $resource_quota_test_host with num_proc=$host_num_proc"

   set rules ""
   lappend rules "users $CHECK_USER hosts `*` queues $resource_quota_test_qname to slots=\$num_proc*2"

   # Add resource quota sets with dynamic limit
   set rqs_charray($rqs_name,limit) "$rules"
   set rqs_charray($rqs_name,enabled) "true"
   set result [add_rqs rqs_charray]

   # fill up the queue with the maximal amount of jobs
   for {set act_job 0} {$act_job < $max_slots} {incr act_job 1} {
      set job_id [submit_job "$job_options"]
      trigger_scheduling
      wait_for_jobstart $job_id "leeper" 20
   }

   # try to start one more job
   set job_id [submit_job "$job_options"]
   trigger_scheduling
   set ret [wait_for_jobstart $job_id "leeper" 20 0]
   if { $ret == 0 } {
      add_proc_error "resource_quota_dynamic_limit" -1 "dynamic limit does not work. To many jobs were started"
   }
  
   # try to start one job as a different user (not affected by resource quota 
   set job_id [submit_job "$job_options" 1 60 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER]
   trigger_scheduling
   wait_for_jobstart $job_id "leeper" 20

   delete_all_jobs
   wait_for_end_of_all_jobs 20

   set_error 0 "ok"
}
