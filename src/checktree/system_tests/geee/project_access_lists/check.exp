#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"


# define a level initialization procedure:
set check_init_level_procedure "project_access_lists_init_level"

# define test's name and run level descriptions
set check_name            "project_access_lists"
set check_category        "COMPATIBILITY SYSTEM L10N"
set check_highest_level   0
set check_description(0)  "Test project access for queue/cluster/pe"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function "project_access_lists_setup"
set check_cleanup_function "project_access_lists_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "project_access_lists_global_host"
lappend check_functions "project_access_lists_exec_host"
lappend check_functions "project_access_lists_queue"
lappend check_functions "project_access_lists_cluster_config"
lappend check_functions "project_access_lists_project"

proc project_access_lists_init_level {} {
   global CHECK_ACT_LEVEL
   global CHECK_PRODUCT_TYPE
 
   if {[string compare $CHECK_PRODUCT_TYPE "sgeee"] != 0} {
      return -1
   }
 
   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1
}

# -------- local test procedures -----------------------------------------------

global project_access_lists_queue
global project_access_lists_host

global project_access_lists_host_conf
global project_access_lists_global_host_conf
global project_access_lists_cluster_conf
global project_access_lists_schedd_conf

proc project_access_lists_setup {} {
   global ts_config CHECK_OUTPUT
   global CHECK_GROUP
   global CHECK_FIRST_FOREIGN_SYSTEM_GROUP CHECK_SECOND_FOREIGN_SYSTEM_GROUP
   global CHECK_FIRST_FOREIGN_SYSTEM_USER CHECK_SECOND_FOREIGN_SYSTEM_USER

   global project_access_lists_queue
   global project_access_lists_host
   global project_access_lists_host_conf
   global project_access_lists_global_host_conf
   global project_access_lists_cluster_conf
   global project_access_lists_schedd_conf

   # we'll use this host for testing
   set project_access_lists_host  [lindex $ts_config(execd_nodes) 0]

   # setup an own queue - we'll change a lot of config params - better not touch all.q
   set queue_values(load_thresholds)       "np_load_avg=11.00"
   set queue_values(qtype)                 "BATCH INTERACTIVE CHECKPOINTING PARALLEL"
   add_queue "prjacc" "@allhosts" queue_values
   # ... and disable all.q
   foreach host $ts_config(execd_nodes) {
      disable_queue [get_queue_instance "all.q" $host]
   }

   # we'll submit into this queue instance
   set project_access_lists_queue [get_queue_instance "prjacc" $project_access_lists_host]

   puts $CHECK_OUTPUT "using queue $project_access_lists_queue"
   puts $CHECK_OUTPUT "using host $project_access_lists_host"

   #saving original configurations
   get_exechost      project_access_lists_host_conf $project_access_lists_host  
   get_exechost      project_access_lists_global_host_conf "global"       
   get_config        project_access_lists_cluster_conf 
   get_schedd_config project_access_lists_schedd_conf
   set my_schedd_config(schedule_interval)       "0:0:01"
   if { $ts_config(gridengine_version) == 53 } {
      set my_schedd_config(sgeee_schedule_interval) "0:0:02"
   }
   set_schedd_config my_schedd_config

   set group1 [lindex $CHECK_FIRST_FOREIGN_SYSTEM_GROUP 0]

   add_access_list "@${group1}"  userA_group
   add_access_list "@${CHECK_SECOND_FOREIGN_SYSTEM_GROUP}" userB_group
   add_access_list "$CHECK_FIRST_FOREIGN_SYSTEM_USER"   userA_name
   add_access_list "$CHECK_SECOND_FOREIGN_SYSTEM_USER"  userB_name

   set my_project(name) "userA_project_group"
   set my_project(acl)  "userA_group"
   add_prj my_project

   set my_project(name) "userB_project_group"
   set my_project(acl)  "userB_group"
   add_prj my_project
 
   set my_project(name) "userA_project_name"
   set my_project(acl)  "userA_name"
   add_prj my_project

   set my_project(name) "userB_project_name"
   set my_project(acl)  "userB_name"
   add_prj my_project

   if { [string first "unknown" $CHECK_GROUP] >= 0 } {
      add_proc_error "project_access_lists_setup" -1 "CHECK_GROUP set to unknown"
   }


   set_error 0 "ok"
}

proc project_access_lists_cleanup {} {
   global ts_config CHECK_OUTPUT

   global project_access_lists_queue
   global project_access_lists_host

   global project_access_lists_host_conf
   global project_access_lists_global_host_conf
   global project_access_lists_cluster_conf
   global project_access_lists_schedd_conf

   delete_all_jobs
   wait_for_end_of_all_jobs 60

   # delete the test queue
   del_queue "prjacc" 0 1
  
   # restore hosts and configurations
   set_exechost  project_access_lists_host_conf $project_access_lists_host 
   set_exechost  project_access_lists_global_host_conf "global"
   set_config    project_access_lists_cluster_conf
   set_schedd_config project_access_lists_schedd_conf

   # enable all.q
   foreach host $ts_config(execd_nodes) {
      enable_queue [get_queue_instance "all.q" $host]
   }

   # delete test projects
   del_prj "userA_project_group"
   del_prj "userB_project_group"
   del_prj "userA_project_name"
   del_prj "userB_project_name"

   # delete access lists
   del_access_list "userA_group"  ;# A
   del_access_list "userB_group"  ;# B
   del_access_list "userA_name"   ;# C
   del_access_list "userB_name"   ;# D

   set_error 0 "ok"
}



proc test_job_run {id_string job_id} {
   global ts_config CHECK_OUTPUT

   if {$job_id < 1} {
     add_proc_error "test_job_run" -1 "wrong job id: $job_id, id_string: $id_string\n[get_submit_error $job_id]" 
   } else {
      wait_for_jobpending $job_id "leeper" 60 1

      trigger_scheduling

      if {[wait_for_jobstart $job_id "leeper" 120] != 0} {
         add_proc_error "test_job_run" -1 "$id_string, job $job_id should be dispatched"
      }

      delete_job $job_id 1
   }
}

proc run_user_denied_jobs { id_string jobargs A_ok B_ok C_ok D_ok { E_ok "-1" } } {
   global CHECK_PRODUCT_ROOT CHECK_OUTPUT project_access_lists_host CHECK_USER
   global CHECK_FIRST_FOREIGN_SYSTEM_USER CHECK_SECOND_FOREIGN_SYSTEM_USER   
   global project_access_lists_queue

   # "userA_project_group"   A
   # "userB_project_group"   B
   # "userA_project_name"    C
   # "userB_project_name"    D

   
   puts $CHECK_OUTPUT "\nid_string is $id_string"
   puts $CHECK_OUTPUT "jobargs are: $jobargs"
   sleep 2
   
   set job_id_A [ submit_job "-P userA_project_group $jobargs" 0 30 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER  ]
   if { $A_ok == 1 } {
      test_job_run "$id_string (A)" $job_id_A
   }
   set job_id_B [ submit_job "-P userB_project_group $jobargs" 0 30 "" $CHECK_SECOND_FOREIGN_SYSTEM_USER ]
   if { $B_ok == 1 } {
      test_job_run "$id_string (B)" $job_id_B
   }

   set job_id_C [ submit_job "-P userA_project_name $jobargs" 0 30 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER  ]
   if { $C_ok == 1 } {
      test_job_run "$id_string (C)" $job_id_C
   }

   set job_id_D [ submit_job "-P userB_project_name $jobargs" 0 30 "" $CHECK_SECOND_FOREIGN_SYSTEM_USER ]
   if { $D_ok == 1 } {
      test_job_run "$id_string (D)" $job_id_D
   }

   if { $E_ok != -1 } {
      set job_id_E [ submit_job "-P mytestproject $jobargs" 0 30 "" $CHECK_USER ]
      if { $E_ok == 1 } {
         test_job_run "$id_string (E)" $job_id_E
      } else {
         if { $job_id_E > 0 } {
            add_proc_error "run_user_denied_jobs" "-1" "$id_string, job $job_id_E (E) should not run"
         } 
      }
   }

   if { $A_ok == 0 } {
      if { $job_id_A > 0 } {
         add_proc_error "run_user_denied_jobs" "-1" "$id_string, job $job_id_A (A) should not run"
      }
   }
 
   if { $B_ok == 0 } {
      if { $job_id_B > 0 } {
         add_proc_error "run_user_denied_jobs" "-1" "$id_string, job $job_id_B (B) should not run"
      }
   }
   if { $C_ok == 0 } {
      if { $job_id_C > 0 } {
         add_proc_error "run_user_denied_jobs" "-1" "$id_string, job $job_id_C (C) should not run"
      }
   }
 
   if { $D_ok == 0 } {
      if { $job_id_D > 0 } {
         add_proc_error "run_user_denied_jobs" "-1" "$id_string, job $job_id_D (D) should not run"
      }
   }

}

proc check_user_job_info { job_id } {

   global CHECK_HOST CHECK_L10N CHECK_OUTPUT

   if {$CHECK_L10N == 1} {
      set NOT_THE_CORRECT_PROJECT [translate_macro MSG_SCHEDD_INFO_HASINCORRECTPRJ_SSS "*" "*" "*"]
      set NOT_ALLOWED_TO_RUN      [translate_macro MSG_SCHEDD_INFO_EXCLPRJ_SSS "*" "*" "*"]
      set NO_PERMISSION           [translate_macro MSG_SCHEDD_INFO_HASNOPERMISSION_SS "*" "*"]

      set scheduling_info_text [get_scheduling_info $job_id]
      puts $CHECK_OUTPUT "schedd info : \"$scheduling_info_text\""
      puts $CHECK_OUTPUT "matchstring1: \"$NOT_THE_CORRECT_PROJECT\""
      puts $CHECK_OUTPUT "matchstring2: \"$NOT_ALLOWED_TO_RUN\""
      puts $CHECK_OUTPUT "matchstring3: \"$NO_PERMISSION\""

      set match1 [string match "*$NOT_THE_CORRECT_PROJECT*"       $scheduling_info_text ]
      set match2 [string match "*$NOT_ALLOWED_TO_RUN*"            $scheduling_info_text ]
      set match3 [string match "*$NO_PERMISSION*"                 $scheduling_info_text ]
      puts $CHECK_OUTPUT $match1
      puts $CHECK_OUTPUT $match2
      puts $CHECK_OUTPUT $match3
      if {$match1 != 1 && $match2 != 1 && $match3 != 1} {
         return 1
      }
      return 0
   }

   set scheduling_info_text [get_scheduling_info $job_id]
   if { [string first "no permission"                $scheduling_info_text ] < 0 && 
        [string first "not allowed to run"           $scheduling_info_text ] < 0 &&
        [string first "not have the correct project" $scheduling_info_text ] < 0 
   } {
      return 1
   }
   return 0
}

proc run_user_jobs {id_string jobargs A_ok B_ok C_ok D_ok { E_ok "-1"} } {
   global CHECK_PRODUCT_ROOT CHECK_OUTPUT project_access_lists_host CHECK_USER
   global CHECK_FIRST_FOREIGN_SYSTEM_USER CHECK_SECOND_FOREIGN_SYSTEM_USER   
   global project_access_lists_queue CHECK_HOST

   # "userA_project_group"   A
   # "userB_project_group"   B
   # "userA_project_name"    C
   # "userB_project_name"    D


   
   puts $CHECK_OUTPUT "\nid_string is $id_string"
   puts $CHECK_OUTPUT "jobargs are: $jobargs"

   sleep 2
 
   if { [ string first "-P" $jobargs] >= 0 } {
      set no_P 1
   } else {
      set no_P 0
   }   
   if { $no_P == 0 } {
      set job_id_A [ submit_job "-P userA_project_group $jobargs" 1 30 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER  ]
   } else {
      set job_id_A [ submit_job "$jobargs" 1 30 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER  ]
   }
   if { $A_ok == 1 } {
      test_job_run "$id_string (A)" $job_id_A
   }
   if { $no_P == 0 } {
      set job_id_B [ submit_job "-P userB_project_group $jobargs" 1 30 "" $CHECK_SECOND_FOREIGN_SYSTEM_USER ]
   } else {
      set job_id_B [ submit_job "$jobargs" 1 30 "" $CHECK_SECOND_FOREIGN_SYSTEM_USER ]
   }
   if { $B_ok == 1 } {
      test_job_run "$id_string (B)" $job_id_B
   }
  
   if { $no_P == 0 } {
      set job_id_C [ submit_job "-P userA_project_name $jobargs" 1 30 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER  ]
   } else {
      set job_id_C [ submit_job "$jobargs" 1 30 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER  ]
   }
   if { $C_ok == 1 } {
      test_job_run "$id_string (C)" $job_id_C
   }

   if { $no_P == 0 } {
      set job_id_D [ submit_job "-P userB_project_name $jobargs" 1 30 "" $CHECK_SECOND_FOREIGN_SYSTEM_USER ]
   } else {
      set job_id_D [ submit_job "$jobargs" 1 30 "" $CHECK_SECOND_FOREIGN_SYSTEM_USER ]
   }
   if { $D_ok == 1 } {
      test_job_run "$id_string (D)" $job_id_D
   }


   if { $E_ok != -1 } {
      if { $no_P == 0 } { 
         set job_id_E [ submit_job "-P mytestproject $jobargs" 1 30 "" $CHECK_USER ] 
      } else {
         set job_id_E [ submit_job "$jobargs" 1 30 "" $CHECK_USER ] 
      }
      if { $E_ok == 1 } {
         test_job_run "$id_string (E)" $job_id_E
      } else {
         if { [check_user_job_info $job_id_E] } {
            add_proc_error "run_user_jobs" "-1" "$id_string, job $job_id_E (E) should not run"
         }
         wait_for_jobpending $job_id_E "leeper" 30
         delete_job $job_id_E 1
      }
   }

   if { $A_ok == 0 } {
      if { [check_user_job_info $job_id_A] } {
         add_proc_error "run_user_jobs" "-1" "$id_string, job $job_id_A (A) should not run"
      }
      wait_for_jobpending $job_id_A "leeper" 30
      delete_job $job_id_A 1
   }
 
   if { $B_ok == 0 } {
      if { [check_user_job_info $job_id_B]  } {
         add_proc_error "run_user_jobs" "-1" "$id_string, job $job_id_B (B) should not run"
      }
      wait_for_jobpending $job_id_B "leeper" 30
      delete_job $job_id_B 1
   }

   if { $C_ok == 0 } {
      if { [check_user_job_info $job_id_C]   } {
         add_proc_error "run_user_jobs" "-1" "$id_string, job $job_id_C (C) should not run"
      }
      wait_for_jobpending $job_id_C "leeper" 30
      delete_job $job_id_C 1
   }
   if { $D_ok == 0 } {
      if { [check_user_job_info $job_id_D]  } {
         add_proc_error "run_user_jobs" "-1" "$id_string, job $job_id_D (D) should not run"
      }
      wait_for_jobpending $job_id_D "leeper" 30
      delete_job $job_id_D 1
   }
   

}

proc project_access_lists_global_host {} {
   global CHECK_PRODUCT_ROOT CHECK_OUTPUT project_access_lists_host CHECK_USER
   global CHECK_FIRST_FOREIGN_SYSTEM_USER CHECK_SECOND_FOREIGN_SYSTEM_USER   
   global CHECK_SECOND_FOREIGN_SYSTEM_GROUP CHECK_FIRST_FOREIGN_SYSTEM_GROUP
   global CHECK_GROUP 
   global project_access_lists_queue

   set jobargs "-o /dev/null -e /dev/null -q $project_access_lists_queue $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 30" 

   # testing user and group
   set project_access_lists {userA_project_name userB_project_name}
   foreach elem $project_access_lists {
      set A_USER [lindex $elem 0]
      set B_USER [lindex $elem 1]
      puts $CHECK_OUTPUT "A_USER = $A_USER"
      puts $CHECK_OUTPUT "B_USER = $B_USER"

      # case 1
      set my_global_host(xprojects) "$A_USER"
      set my_global_host(projects)  "NONE"
      set_exechost my_global_host "global"
      run_user_jobs "case 1,$A_USER,$B_USER" "$jobargs" 1 1 0 1   ;# A = 0 (not running) B = 1 (should run)

      # case 2
      set my_global_host(xprojects) "NONE"
      set my_global_host(projects)  "$A_USER"
      set_exechost my_global_host "global"
      run_user_jobs "case 2,$A_USER,$B_USER" "$jobargs" 0 0 1 0
   
      # case 3
      set my_global_host(xprojects) "$B_USER"
      set my_global_host(projects)  "$A_USER"
      set_exechost my_global_host "global"
      run_user_jobs "case 3,$A_USER,$B_USER" "$jobargs" 0 0 1 0
   
      #case 4
      set my_global_host(xprojects) "$A_USER"
      set my_global_host(projects)  "$B_USER"
      set_exechost my_global_host "global"
      run_user_jobs "case 4,$A_USER,$B_USER" "$jobargs" 0 0 0 1
   
      #case 5
      set my_global_host(xprojects) "NONE"
      set my_global_host(projects)  "NONE"
      set_exechost my_global_host "global"
      run_user_jobs "case 5,$A_USER,$B_USER" "$jobargs" 1 1 1 1
   
      #case 6
      set my_global_host(xprojects) "$A_USER $B_USER"
      set my_global_host(projects)  "NONE"
      set_exechost my_global_host "global"
      run_user_jobs "case 6,$A_USER,$B_USER" "$jobargs" 1 1 0 0
   
      #case 7
      set my_global_host(xprojects) "NONE"
      set my_global_host(projects)  "$A_USER $B_USER"
      set_exechost my_global_host "global"
      run_user_jobs "case 7,$A_USER,$B_USER" "$jobargs" 0 0 1 1
  
      #restore
      set my_global_host(xprojects) "NONE"
      set my_global_host(projects)  "NONE"
      set_exechost my_global_host "global"
   }


   # test group/user combinations
   # userA_name userB_name userA_group userB_group
   set my_global_host(xprojects) "userA_project_group"
   set my_global_host(projects)  "userA_project_name"
   set_exechost my_global_host "global"
   run_user_jobs "group/user case 1" "$jobargs" 0 0 1 0 0

   set my_global_host(xprojects) "NONE"
   set my_global_host(projects)  "userA_project_name userA_project_group"
   set_exechost my_global_host "global"
   run_user_jobs "group/user case 2" "$jobargs" 1 0 1 0 0

   set my_global_host(xprojects) "userA_project_name userA_project_group"
   set my_global_host(projects)  "NONE"
   set_exechost my_global_host "global"
   run_user_jobs "group/user case 3" "$jobargs" 0 1 0 1 1

   set my_global_host(xprojects) "userA_project_name"
   set my_global_host(projects)  "userA_project_group"
   set_exechost my_global_host "global"
   run_user_jobs "group/user case 4" "$jobargs" 1 0 0 0 0

   #restore
   set my_global_host(xprojects) "NONE"
   set my_global_host(projects)  "NONE"
   set_exechost my_global_host "global"

   set_error 0 "ok"
}

proc project_access_lists_exec_host {} {
   global CHECK_PRODUCT_ROOT CHECK_OUTPUT project_access_lists_host CHECK_USER
   global CHECK_FIRST_FOREIGN_SYSTEM_USER CHECK_SECOND_FOREIGN_SYSTEM_USER   
   global CHECK_SECOND_FOREIGN_SYSTEM_GROUP CHECK_FIRST_FOREIGN_SYSTEM_GROUP
   global CHECK_GROUP project_access_lists_queue

   set jobargs "-o /dev/null -e /dev/null -q $project_access_lists_queue $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 30"

   # testing user and group
   set project_access_lists "{userA_project_name userB_project_name }"
   foreach elem $project_access_lists {
      set A_USER [lindex $elem 0]
      set B_USER [lindex $elem 1]
      puts $CHECK_OUTPUT "A_USER = $A_USER"
      puts $CHECK_OUTPUT "B_USER = $B_USER"

      # case 1
      set my_local_host(xprojects) "$A_USER"
      set my_local_host(projects)  "NONE"
      set_exechost my_local_host $project_access_lists_host
      run_user_jobs "case 1,$A_USER,$B_USER" "$jobargs" 1 1 0 1   ;# A = 0 (not running) B = 1 (should run)
   
      # case 2
      set my_local_host(xprojects) "NONE"
      set my_local_host(projects)  "$A_USER"
      set_exechost my_local_host $project_access_lists_host
      run_user_jobs "case 2,$A_USER,$B_USER" "$jobargs" 0 0 1 0
   
      # case 3
      set my_local_host(xprojects) "$B_USER"
      set my_local_host(projects)  "$A_USER"
      set_exechost my_local_host $project_access_lists_host
      run_user_jobs "case 3,$A_USER,$B_USER" "$jobargs" 0 0 1 0
   
      #case 4
      set my_local_host(xprojects) "$A_USER"
      set my_local_host(projects)  "$B_USER"
      set_exechost my_local_host $project_access_lists_host
      run_user_jobs "case 4,$A_USER,$B_USER" "$jobargs" 0 0 0 1
   
      #case 5
      set my_local_host(xprojects) "NONE"
      set my_local_host(projects)  "NONE"
      set_exechost my_local_host $project_access_lists_host
      run_user_jobs "case 5,$A_USER,$B_USER" "$jobargs" 1 1 1 1
   
      #case 6
      set my_local_host(xprojects) "$A_USER $B_USER"
      set my_local_host(projects)  "NONE"
      set_exechost my_local_host $project_access_lists_host
      run_user_jobs "case 6,$A_USER,$B_USER" "$jobargs" 1 1 0 0
   
      #case 7
      set my_local_host(xprojects) "NONE"
      set my_local_host(projects)  "$A_USER $B_USER"
      set_exechost my_local_host $project_access_lists_host
      run_user_jobs "case 7,$A_USER,$B_USER" "$jobargs" 0 0 1 1
  
      #restore
      set my_local_host(xprojects) "NONE"
      set my_local_host(projects)  "NONE"
      set_exechost my_local_host $project_access_lists_host
   }


   # test group/user combinations
   # userA_name userB_name userA_group userB_group
   set my_local_host(xprojects) "userA_project_group"
   set my_local_host(projects)  "userA_project_name"
   set_exechost my_local_host $project_access_lists_host
   run_user_jobs "group/user case 1" "$jobargs" 0 0 1 0 0

   set my_local_host(xprojects) "NONE"
   set my_local_host(projects)  "userA_project_name userA_project_group"
   set_exechost my_local_host $project_access_lists_host
   run_user_jobs "group/user case 2" "$jobargs" 1 0 1 0 0

   set my_local_host(xprojects) "userA_project_name userA_project_group"
   set my_local_host(projects)  "NONE"
   set_exechost my_local_host $project_access_lists_host
   run_user_jobs "group/user case 3" "$jobargs" 0 1 0 1 1

   set my_local_host(xprojects) "userA_project_name"
   set my_local_host(projects)  "userA_project_group"
   set_exechost my_local_host $project_access_lists_host
   run_user_jobs "group/user case 4" "$jobargs" 1 0 0 0 0

   #restore
   set my_local_host(xprojects) "NONE"
   set my_local_host(projects)  "NONE"
   set_exechost my_local_host $project_access_lists_host

   set_error 0 "ok"
}

proc project_access_lists_queue {} {
   global CHECK_PRODUCT_ROOT CHECK_OUTPUT CHECK_USER
   global CHECK_FIRST_FOREIGN_SYSTEM_USER CHECK_SECOND_FOREIGN_SYSTEM_USER   
   global CHECK_SECOND_FOREIGN_SYSTEM_GROUP CHECK_FIRST_FOREIGN_SYSTEM_GROUP
   global CHECK_GROUP
   global project_access_lists_queue project_access_lists_host

   set jobargs "-o /dev/null -e /dev/null -q $project_access_lists_queue $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 30"

   # testing user and group
   set project_access_lists "{userA_project_name userB_project_name }"
   foreach elem $project_access_lists {
      set A_USER [lindex $elem 0]
      set B_USER [lindex $elem 1]
      puts $CHECK_OUTPUT "A_USER = $A_USER"
      puts $CHECK_OUTPUT "B_USER = $B_USER"

      # case 1
      set my_queue_conf(xprojects) "$A_USER"
      set my_queue_conf(projects)  "NONE"
      mod_queue "prjacc" $project_access_lists_host my_queue_conf
      run_user_jobs "case 1,$A_USER,$B_USER" "$jobargs" 1 1 0 1   ;# A = 0 (not running) B = 1 (should run)
   
      # case 2
      set my_queue_conf(xprojects) "NONE"
      set my_queue_conf(projects)  "$A_USER"
      mod_queue "prjacc" $project_access_lists_host my_queue_conf
      run_user_jobs "case 2,$A_USER,$B_USER" "$jobargs" 0 0 1 0
   
      # case 3
      set my_queue_conf(xprojects) "$B_USER"
      set my_queue_conf(projects)  "$A_USER"
      mod_queue "prjacc" $project_access_lists_host my_queue_conf
      run_user_jobs "case 3,$A_USER,$B_USER" "$jobargs" 0 0 1 0
   
      #case 4
      set my_queue_conf(xprojects) "$A_USER"
      set my_queue_conf(projects)  "$B_USER"
      mod_queue "prjacc" $project_access_lists_host my_queue_conf
      run_user_jobs "case 4,$A_USER,$B_USER" "$jobargs" 0 0 0 1
   
      #case 5
      set my_queue_conf(xprojects) "NONE"
      set my_queue_conf(projects)  "NONE"
      mod_queue "prjacc" $project_access_lists_host my_queue_conf
      run_user_jobs "case 5,$A_USER,$B_USER" "$jobargs" 1 1 1 1
   
      #case 6
      set my_queue_conf(xprojects) "$A_USER $B_USER"
      set my_queue_conf(projects)  "NONE"
      mod_queue "prjacc" $project_access_lists_host my_queue_conf
      run_user_jobs "case 6,$A_USER,$B_USER" "$jobargs" 1 1 0 0
   
      #case 7
      set my_queue_conf(xprojects) "NONE"
      set my_queue_conf(projects)  "$A_USER $B_USER"
      mod_queue "prjacc" $project_access_lists_host my_queue_conf
      run_user_jobs "case 7,$A_USER,$B_USER" "$jobargs" 0 0 1 1
  
      #restore
      set my_queue_conf(xprojects) "NONE"
      set my_queue_conf(projects)  "NONE"
      mod_queue "prjacc" $project_access_lists_host my_queue_conf
   }


   # test group/user combinations
   # userA_name userB_name userA_group userB_group
   set my_queue_conf(xprojects) "userA_project_group"
   set my_queue_conf(projects)  "userA_project_name"
   mod_queue "prjacc" $project_access_lists_host my_queue_conf
   run_user_jobs "group/user case 1" "$jobargs" 0 0 1 0 0

   set my_queue_conf(xprojects) "NONE"
   set my_queue_conf(projects)  "userA_project_name userA_project_group"
   mod_queue "prjacc" $project_access_lists_host my_queue_conf
   run_user_jobs "group/user case 2" "$jobargs" 1 0 1 0 0

   set my_queue_conf(xprojects) "userA_project_name userA_project_group"
   set my_queue_conf(projects)  "NONE"
   mod_queue "prjacc" $project_access_lists_host my_queue_conf
   run_user_jobs "group/user case 3" "$jobargs" 0 1 0 1 1

   set my_queue_conf(xprojects) "userA_project_name"
   set my_queue_conf(projects)  "userA_project_group"
   mod_queue "prjacc" $project_access_lists_host my_queue_conf
   run_user_jobs "group/user case 4" "$jobargs" 1 0 0 0 0

   #restore
   set my_queue_conf(xprojects) "NONE"
   set my_queue_conf(projects)  "NONE"
   mod_queue "prjacc" $project_access_lists_host my_queue_conf
     

   set_error 0 "ok"
}

proc project_access_lists_cluster_config {} {
   global CHECK_PRODUCT_ROOT CHECK_OUTPUT project_access_lists_queue CHECK_USER
   global CHECK_FIRST_FOREIGN_SYSTEM_USER CHECK_SECOND_FOREIGN_SYSTEM_USER   
   global CHECK_SECOND_FOREIGN_SYSTEM_GROUP CHECK_FIRST_FOREIGN_SYSTEM_GROUP
   global CHECK_GROUP project_access_lists_queue
  

   set jobargs "-o /dev/null -e /dev/null -q $project_access_lists_queue $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 30"  

   # testing user and group
   set project_access_lists "{userA_project_name userB_project_name }"
   foreach elem $project_access_lists {
      set A_USER [lindex $elem 0]
      set B_USER [lindex $elem 1]
      puts $CHECK_OUTPUT "A_USER = $A_USER"
      puts $CHECK_OUTPUT "B_USER = $B_USER"

      # case 1
      set my_cluster_conf(xprojects) "$A_USER"
      set my_cluster_conf(projects)  "NONE"
      set_config my_cluster_conf
      run_user_denied_jobs "case 1,$A_USER,$B_USER" "$jobargs" 1 1 0 1   ;# A = 0 (not running) B = 1 (should run)
   
      # case 2
      set my_cluster_conf(xprojects) "NONE"
      set my_cluster_conf(projects)  "$A_USER"
      set_config my_cluster_conf
      run_user_denied_jobs "case 2,$A_USER,$B_USER" "$jobargs" 0 0 1 0
   
      # case 3
      set my_cluster_conf(xprojects) "$B_USER"
      set my_cluster_conf(projects)  "$A_USER"
      set_config my_cluster_conf
      run_user_denied_jobs "case 3,$A_USER,$B_USER" "$jobargs" 0 0 1 0
   
      #case 4
      set my_cluster_conf(xprojects) "$A_USER"
      set my_cluster_conf(projects)  "$B_USER"
      set_config my_cluster_conf
      run_user_denied_jobs "case 4,$A_USER,$B_USER" "$jobargs" 0 0 0 1
   
      #case 5
      set my_cluster_conf(xprojects) "NONE"
      set my_cluster_conf(projects)  "NONE"
      set_config my_cluster_conf
      run_user_denied_jobs "case 5,$A_USER,$B_USER" "$jobargs" 1 1 1 1
   
      #case 6
      set my_cluster_conf(xprojects) "$A_USER $B_USER"
      set my_cluster_conf(projects)  "NONE"
      set_config my_cluster_conf
      run_user_denied_jobs "case 6,$A_USER,$B_USER" "$jobargs" 1 1 0 0
   
      #case 7
      set my_cluster_conf(xprojects) "NONE"
      set my_cluster_conf(projects)  "$A_USER $B_USER"
      set_config my_cluster_conf
      run_user_denied_jobs "case 7,$A_USER,$B_USER" "$jobargs" 0 0 1 1
  
      #restore
      set my_cluster_conf(xprojects) "NONE"
      set my_cluster_conf(projects)  "NONE"
      set_config my_cluster_conf
   }


   # test group/user combinations
   # userA_name userB_name userA_group userB_group
   set my_cluster_conf(xprojects) "userA_project_group"
   set my_cluster_conf(projects)  "userA_project_name"
   set_config my_cluster_conf
   run_user_denied_jobs "group/user case 1" "$jobargs" 0 0 1 0 0

   set my_cluster_conf(xprojects) "NONE"
   set my_cluster_conf(projects)  "userA_project_name userA_project_group"
   set_config my_cluster_conf
   run_user_denied_jobs "group/user case 2" "$jobargs" 1 0 1 0 0

   set my_cluster_conf(xprojects) "userA_project_name userA_project_group"
   set my_cluster_conf(projects)  "NONE"
   set_config my_cluster_conf
   run_user_denied_jobs "group/user case 3" "$jobargs" 0 1 0 1 1

   set my_cluster_conf(xprojects) "userA_project_name"
   set my_cluster_conf(projects)  "userA_project_group"
   set_config my_cluster_conf
   run_user_denied_jobs "group/user case 4" "$jobargs" 1 0 0 0 0

   #restore
   set my_cluster_conf(xprojects) "NONE"
   set my_cluster_conf(projects)  "NONE"
   set_config my_cluster_conf
     

   set_error 0 "ok"

}

proc project_access_lists_project {} {
   global CHECK_PRODUCT_ROOT CHECK_OUTPUT project_access_lists_queue CHECK_USER
   global CHECK_FIRST_FOREIGN_SYSTEM_USER CHECK_SECOND_FOREIGN_SYSTEM_USER   
   global CHECK_SECOND_FOREIGN_SYSTEM_GROUP CHECK_FIRST_FOREIGN_SYSTEM_GROUP
   global CHECK_GROUP

   set jobargs "-o /dev/null -e /dev/null -P access_test_project -q $project_access_lists_queue $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 30"
   # second -P switch will overwrite first one in run_user_denied_jobs !

   set my_project(name)     "access_test_project"

   # testing user and group
   set access_lists "{userA_name userB_name 0} {userA_group userB_group 1}"
   foreach elem $access_lists {
      set A_USER [lindex $elem 0]
      set B_USER [lindex $elem 1]
      set group_test [lindex $elem 2]
      puts $CHECK_OUTPUT "A_USER = $A_USER"
      puts $CHECK_OUTPUT "B_USER = $B_USER"

      # case 1
      set my_project(xacl) "$A_USER"
      set my_project(acl)  "NONE"
      add_prj my_project
      run_user_denied_jobs "case 1,$A_USER,$B_USER" $jobargs 0 1 0 1       ;# A = 0 (not running) B = 1 (should run)
      del_prj "access_test_project"  
 
      # case 2
      set my_project(xacl) "NONE"
      set my_project(acl)  "$A_USER"
      add_prj my_project
      run_user_denied_jobs "case 2,$A_USER,$B_USER" $jobargs 1 0 1 0
      del_prj "access_test_project"

      # case 3
      set my_project(xacl) "$B_USER"
      set my_project(acl)  "$A_USER"
      add_prj my_project
      run_user_denied_jobs "case 3,$A_USER,$B_USER" $jobargs 1 0 1 0
      del_prj "access_test_project"

   
      #case 4
      set my_project(xacl) "$A_USER"
      set my_project(acl)  "$B_USER"
      add_prj my_project
      run_user_denied_jobs "case 4,$A_USER,$B_USER" $jobargs 0 1 0 1
      del_prj "access_test_project"

   
      #case 5
      set my_project(xacl) "NONE"
      set my_project(acl)  "NONE"
      add_prj my_project
      run_user_denied_jobs "case 5,$A_USER,$B_USER" $jobargs 1 1 1 1 1
      del_prj "access_test_project"

   
      #case 6
      set my_project(xacl) "$A_USER $B_USER"
      set my_project(acl)  "NONE"
      add_prj my_project
      if { $group_test == 1 } {
         puts $CHECK_OUTPUT "group test active"
         set group1 [ lindex $CHECK_FIRST_FOREIGN_SYSTEM_GROUP 0 ]

         puts $CHECK_OUTPUT "CHECK_GROUP is $CHECK_GROUP"
         puts $CHECK_OUTPUT "group1 is $group1"
         puts $CHECK_OUTPUT "CHECK_SECOND_FOREIGN_SYSTEM_GROUP is $CHECK_SECOND_FOREIGN_SYSTEM_GROUP"

         if { [string first $CHECK_GROUP $group1] >= 0 ||
              [string first $CHECK_GROUP $CHECK_SECOND_FOREIGN_SYSTEM_GROUP] >= 0 } {
            set C_run 0
         } else {
            set C_run 1
         }
      } else {
         puts $CHECK_OUTPUT "no group test"
         set C_run 1
      }
      puts $CHECK_OUTPUT "C_run is $C_run"
      run_user_denied_jobs "case 6,$A_USER,$B_USER" $jobargs 0 0 0 0 $C_run
      del_prj "access_test_project"
      puts "case 6 done"
   
      #case 7
      set my_project(xacl) "NONE"
      set my_project(acl)  "$A_USER $B_USER"
      add_prj my_project
      if { $group_test == 1 } {
         set group1 [ lindex $CHECK_FIRST_FOREIGN_SYSTEM_GROUP 0 ]
         if { [string first $CHECK_GROUP $group1] >= 0 ||
              [string first $CHECK_GROUP $CHECK_SECOND_FOREIGN_SYSTEM_GROUP] >= 0 } {
            set C_run 1
         } else {
            set C_run 0
         }
      } else {
         set C_run 0
      }
      run_user_denied_jobs "case 7,$A_USER,$B_USER" $jobargs 1 1 1 1 $C_run
      del_prj "access_test_project"
   }
   


   # test group/user combinations
   # userA_name userB_name userA_group userB_group
   set my_project(xacl) "userA_group"
   set my_project(acl)  "userA_name"
   add_prj my_project
   run_user_denied_jobs "group/user case 1" "$jobargs" 0 0 0 0 
   del_prj "access_test_project"

   set my_project(xacl) "NONE"
   set my_project(acl)  "userA_name userA_group"
   add_prj my_project
   run_user_denied_jobs "group/user case 2" "$jobargs" 1 0 1 0
   del_prj "access_test_project"

   set my_project(xacl) "userA_name userA_group"
   set my_project(acl)  "NONE"
   add_prj my_project
   run_user_denied_jobs "group/user case 3" "$jobargs" 0 1 0 1
   del_prj "access_test_project"

   set my_project(xacl) "userA_name"
   set my_project(acl)  "userA_group"
   add_prj my_project
   run_user_denied_jobs "group/user case 4" "$jobargs" 0 0 0 0
   del_prj "access_test_project"

   set_error 0 "ok"
}

