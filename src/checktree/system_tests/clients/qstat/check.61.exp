#!/vol2/TCL_TK/glinux/bin/expect
# global variables ... (defined in main check routine, but you can use it)
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

global check_functions
lappend check_functions  "qstat_profile"
lappend check_functions "test_qstat_j_xml"


proc qstat_profile {} {
   global CHECK_OUTPUT CHECK_FIRST_FOREIGN_SYSTEM_USER
   global CHECK_FIRST_FOREIGN_SYSTEM_USER CHECK_SECOND_FOREIGN_SYSTEM_USER
   global  CHECK_USER
   global ts_config
   global hostname job_id_list

   #
   # Test Plan
   # =========
   #
   # Phase 1
   # - submit one dummy job each for check user, sgetest1 and sgetest2 user
   # - create and populate cluster qstat profile with option -u sgetest1
   #   plus one comment line with option -u sgetest2 
   # - run qstat w/o command line options
   # - check if we got only one line of output for user sgetest1. No data
   #   expected for user sgetest2.
   # Phase 2 check cummulative semanitic local/global profile
   # - create and populate local qstat profile with option -u s<check_user>
   # - run qstat w/o command line options
   # - check if we got two lines of output
   # Phase 3 check override semanitic command line/local profile
   # - run qstat with command line option -u sgetest2
   # - check if we got only one line of output for this user
   #
   puts $CHECK_OUTPUT "checking sge_qstat file functionality ...."

   set home [glob ~/]

   file delete "$ts_config(product_root)/$ts_config(cell)/common/sge_qstat"
   file delete "$home/.sge_qstat"
   #
   # Create test queue and submit dummy jobs as check user and user sgetest1.
   #
   set hostname $ts_config(master_host)
   set testq(slots) 10
   add_queue test.q $hostname testq
   set qname [get_queue_instance test.q $hostname]
   puts $CHECK_OUTPUT "Created test queue $qname"
   set job_id_list ""
   set job_args "-o /dev/null -e /dev/null -q $qname"
   set job_id_list {}
   #
   #
   #
   foreach user "$CHECK_SECOND_FOREIGN_SYSTEM_USER $CHECK_FIRST_FOREIGN_SYSTEM_USER $CHECK_USER" {
      set job_id [submit_job "$job_args $ts_config(product_root)/examples/jobs/sleeper.sh 60" 1 30 "" $user]
      if {$job_id <= 0} {
         add_proc_error "qstat_profile" -1 "can't start job for qstat profile test user $user"
         return -1
      }

      lappend job_id_list $job_id
   }

   # wait for the jobs to run
   trigger_scheduling
   foreach job_id $job_id_list {
      wait_for_jobstart $job_id "Sleeper" 60
   }
   #
   # Ok, now we know that all required jobs are in the correct state to
   # to get picked up by qstat. The life time of the jobs should be
   # sufficiently long.
   #
   # Create global qstat profile. File gets truncated (paranoia!).
   #
   set sge_global_qstat_profile "$ts_config(product_root)/$ts_config(cell)/common/sge_qstat"
   set fd [open $sge_global_qstat_profile w+ 0777]
   #
   # Populate global sge_qstat file. Make user sgetest1 default user option.
   # User sgetest2 is commented out; we don't like to see this job.
   #
   puts $fd "-u $CHECK_FIRST_FOREIGN_SYSTEM_USER"
#   puts $fd "#-u $CHECK_SECOND_FOREIGN_SYSTEM_USER"
   close $fd
   wait_for_remote_file $ts_config(master_host) $CHECK_USER $sge_global_qstat_profile
   #
   # The real test begins right now.
   #
   puts $CHECK_OUTPUT "\nrunning qstat without any command line options...."
   set result [start_sge_bin "qstat" "" $ts_config(master_host)]
   puts $CHECK_OUTPUT $result
   if {$prg_exit_state == 0} {
      if { [info exists jobinfo] } {
         unset jobinfo
      }
      #
      # To succeed we require just ONE entry for sgetest1 user.
      #
      parse_qstat result jobinfo
      set shown_jobs $jobinfo(index)
      set nr_jobs [llength $shown_jobs]
      if { $nr_jobs != 1 || [lsearch $result $CHECK_FIRST_FOREIGN_SYSTEM_USER] == -1 } {
         add_proc_error "qstat_profile" -1 "qstat using cluster profile should show one entry for user $CHECK_FIRST_FOREIGN_SYSTEM_USER"
      }
   } else {
      add_proc_error "qstat_profile" -1 "qstat using cluster profile: exit != 0"
   }
   #
   #
   # Now, populate local qstat profile and make check user default user option.
   #
   set sge_local_qstat_profile "$home/.sge_qstat"
   set fd [open $sge_local_qstat_profile w+ 0777]
   puts $fd "-u $CHECK_USER"
   close $fd
   wait_for_remote_file $ts_config(master_host) $CHECK_USER $sge_local_qstat_profile
   #
   # Issue qstat command without any further options. We should see entries
   # of check user and sgetest1 user.
   #
   set result [start_sge_bin "qstat" "" $ts_config(master_host)]
   puts $CHECK_OUTPUT $result
   if { $prg_exit_state == 0 } {
      if { [info exists jobinfo] } {
         unset jobinfo
      }
      #
      # To succeed we require two lines of output for check test
      # user and second foreign tester.
      #
      parse_qstat result jobinfo 
      set shown_jobs $jobinfo(index)
      set nr_jobs [llength $shown_jobs]
      if { $nr_jobs != 2 || \
       [lsearch $result $CHECK_FIRST_FOREIGN_SYSTEM_USER] == -1 || \
       [lsearch $result $CHECK_USER] == -1 } {
         add_proc_error "qstat_profile" -1 "qstat using local profile should show two active jobs"
      }
   } else {
      add_proc_error "qstat_profile" -1 "qstat using local profile: exit != 0"
   }
   #
   # Now with global and local profile active, select second foreign
   # test user from command line.
   #
   set result [start_sge_bin "qstat" "-u $CHECK_SECOND_FOREIGN_SYSTEM_USER"]
   puts $CHECK_OUTPUT $result
   if { $prg_exit_state == 0 } {
      if { [info exists jobinfo] } {
         unset jobinfo
      }
      #
      # To succeed we require just ONE entry for user sgetest2.
      #
      #set user_found [lsearch $result $CHECK_SECOND_FOREIGN_SYSTEM_USER]
      parse_qstat result jobinfo
      set shown_jobs $jobinfo(index)
      set nr_jobs [llength $shown_jobs]
      if { $nr_jobs != 1 || [lsearch $result $CHECK_SECOND_FOREIGN_SYSTEM_USER] == -1 } {
         add_proc_error  \
               "qstat_profile" -1 "qstat started with -u command line option should show one entry for user $CHECK_SECOND_FOREIGN_SYSTEM_USER"
      }
   } else {
      add_proc_error "qstat_profile" -1 "qstat started with -u command line option: exit != 0"
   }
   #
   # OK, cleanup.
   #
   file delete $sge_global_qstat_profile
   file delete $sge_local_qstat_profile

   delete_all_jobs
   wait_for_end_of_all_jobs

   #
   # Paranoia....
   #
   get_queue_list queue_list
   if {[lsearch $queue_list "test.q"] != -1} {
      puts $CHECK_OUTPUT "Deleting test.q"
      del_queue test.q $hostname 0 1
   }
}

proc test_qstat_j_xml {} {
   global ts_config CHECK_OUTPUT CHECK_USER CHECK_HAVE_TDOM
   global stored_configuration
   
   # verify if we can perform the qstat -xml tests
   if {$CHECK_HAVE_TDOM == 0} {
      return
   }

   #change load_report_time to allow usage stastics to be the same.
   if {[info exists stored_configuration]} {
      unset stored_configuration
   }
   get_config stored_configuration
   set myconfig(load_report_time) "00:00:20"
   set_config myconfig
   

   # submit job sleeper.sh
   set host [host_conf_get_suited_hosts]
   set arch [resolve_arch $host]
   set queue_name [get_queue_instance "all.q" $host]   
   set arguments "-o /dev/null -j y -hard -q $queue_name -l a=$arch -soft -l h=$host -q $queue_name"
   set job_id [submit_job "$arguments $ts_config(product_root)/examples/jobs/worker.sh 1000"]
    
   wait_for_jobstart $job_id "worker.sh" 60 1 1
   sleep 30

   set plainoutput [start_sge_bin "qstat" "-j $job_id"]
   set xmloutput [start_sge_bin "qstat" "-j $job_id -xml"]
   
   set result1 [qstat_j_xml_par xml $job_id $xmloutput]
   set result1 [plain_j_parse plain $job_id $plainoutput]
      
   set var_array {account exec_file gid group job_name job_number \
      jobshare vmem notify owner "scheduling info" script_file sge_o_home \
      sge_o_host sge_o_path sge_o_shell maxvmem sge_o_workdir uid \
      hard_queue_list "hard resource_list" soft_queue_list "soft resource_list"
      mail_list sge_o_tz}

   # for each job test that the xml and plain outputs are the same
   
   foreach elem $var_array {
      if {[ string compare [string trim $xml($elem)] \
         [string trim $plain($elem)]] != 0} {
         add_proc_error "test_xml_tdom" -1 "outputs do not match from \
         plain and xml for $elem."
         add_proc_error "test_xml_tdom" -1 "xml output: [string trim $xml($elem)] \
         plain output: [string trim $plain($elem)]"
         return
      }
   } 
   delete_all_jobs 
   set_config stored_configuration
}

