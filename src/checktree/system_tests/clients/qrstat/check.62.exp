#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env
global qrstat_help_lines
global qrstat_queue qrstat_host

set qrstat_help_lines 11

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "qrstat_test_init_level"

# define test's name and run level descriptions
set check_name            "qrstat_test"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function qrstat_test_setup
set check_cleanup_function qrstat_test_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "qrstat_help"
lappend check_functions "qrstat_option_u"
lappend check_functions "qrstat_option_explain"

proc qrstat_test_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }
   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc qrstat_test_setup {} {
   global CHECK_FIRST_FOREIGN_SYSTEM_USER
   global CHECK_SECOND_FOREIGN_SYSTEM_USER
   global qrstat_queue qrstat_host

   add_user_to_access_list $CHECK_FIRST_FOREIGN_SYSTEM_USER "arusers"
   add_user_to_access_list $CHECK_SECOND_FOREIGN_SYSTEM_USER "arusers"

   set qrstat_host [host_conf_get_suited_hosts]
   set qrstat_queue "qrstat_queue"
   set queue_conf(slots) 1
   add_queue $qrstat_queue $qrstat_host queue_conf
}

proc qrstat_test_cleanup {} {
   global CHECK_FIRST_FOREIGN_SYSTEM_USER
   global CHECK_SECOND_FOREIGN_SYSTEM_USER
   global qrstat_queue qrstat_host

   del_user_from_access_list $CHECK_FIRST_FOREIGN_SYSTEM_USER "arusers"
   del_user_from_access_list $CHECK_SECOND_FOREIGN_SYSTEM_USER "arusers"

   delete_all_ars

   del_queue $qrstat_queue $qrstat_host 0 1
}

proc qrstat_help {} {
   global ts_config CHECK_OUTPUT CHECK_PRODUCT_VERSION_NUMBER
   global qrstat_help_lines

   delete_all_jobs
   wait_for_end_of_all_jobs 60

   set output [start_sge_bin "qrstat" "-help"]

   puts $CHECK_OUTPUT "qrstat output    : \n---"
   puts $CHECK_OUTPUT "$output"
   puts $CHECK_OUTPUT "---\n"
   puts $CHECK_OUTPUT "qrstat exit state: $prg_exit_state"

   if {$prg_exit_state != 0} {
      add_proc_error "qrstat_help" -1 "exit state is not 0"
      return
   }

   set output [string trim $output]

   if {[string first $CHECK_PRODUCT_VERSION_NUMBER $output] < 0} {
      add_proc_error "qrstat_help" -1 "version string ($CHECK_PRODUCT_VERSION_NUMBER) not found"
   } 
 
   set lines [split $output "\n"]
   set nr_of_lines [llength $lines] 

   puts $CHECK_OUTPUT "Output has $nr_of_lines lines"

   if {$nr_of_lines != $qrstat_help_lines} {
      add_proc_error "qrstat_help" -1 "help output has $nr_of_lines, but expected are $qdel_help_lines lines:\n$output"
   }
}

proc qrstat_count_entries { qrstat_options expected_entries } {
   puts $CHECK_OUTPUT "\nrunning qrstat $qrstat_options"
   set result [start_sge_bin "qrstat" "$qrstat_options" "" "" exit_code]
   puts $CHECK_OUTPUT $result
   if {$exit_code == 0} {
      set tmp [split $result "\n"]
      set nr_entries [llength $tmp]

      if {$tmp > 0} {
         # Remove \n from the end
         incr nr_entries -1

         # Two lines are the header header
         incr nr_entries -2
      }

      puts $CHECK_OUTPUT "number of entries: $nr_entries"
      if {$nr_entries != $expected_entries} {
         add_proc_error "qrstat_count_entries" -1 "qrstat $qrstat_options broken, got $nr_entries but expected $expected_entries"
      }
   } else {
      add_proc_error "qrstat_count_entries" -1 "qrstat $qrstat_options exit status not 0"
   }
}

proc qrstat_option_u {} {
   global CHECK_USER
   global CHECK_FIRST_FOREIGN_SYSTEM_USER
   global CHECK_SECOND_FOREIGN_SYSTEM_USER

   # cleanup ars from other tests
   delete_all_ars

   # for an empty cluster the output must be 0 
   qrstat_count_entries "" 0
   qrstat_count_entries "-u '*'" 0
   qrstat_count_entries "-u $CHECK_FIRST_FOREIGN_SYSTEM_USER" 0

   # submit 1 AR for every user
   submit_ar "-d 3600" 
   submit_ar "-d 3600" "" "$CHECK_FIRST_FOREIGN_SYSTEM_USER"
   submit_ar "-d 3600" "" "$CHECK_SECOND_FOREIGN_SYSTEM_USER"
   qrstat_count_entries "" 1
   qrstat_count_entries "-u $CHECK_FIRST_FOREIGN_SYSTEM_USER" 1
   qrstat_count_entries "-u $CHECK_SECOND_FOREIGN_SYSTEM_USER" 1
   qrstat_count_entries "-u $CHECK_USER,$CHECK_FIRST_FOREIGN_SYSTEM_USER" 2
   qrstat_count_entries "-u $CHECK_USER,$CHECK_FIRST_FOREIGN_SYSTEM_USER,$CHECK_SECOND_FOREIGN_SYSTEM_USER" 3
   qrstat_count_entries "-u '*'" 3

   # submit in addition 1 for every user
   submit_ar "-d 3600" 
   submit_ar "-d 3600" "" "$CHECK_FIRST_FOREIGN_SYSTEM_USER"
   submit_ar "-d 3600" "" "$CHECK_SECOND_FOREIGN_SYSTEM_USER"
   qrstat_count_entries "" 2
   qrstat_count_entries "-u $CHECK_FIRST_FOREIGN_SYSTEM_USER" 2 
   qrstat_count_entries "-u $CHECK_SECOND_FOREIGN_SYSTEM_USER" 2 
   qrstat_count_entries "-u $CHECK_USER,$CHECK_FIRST_FOREIGN_SYSTEM_USER" 4
   qrstat_count_entries "-u $CHECK_USER,$CHECK_FIRST_FOREIGN_SYSTEM_USER,$CHECK_SECOND_FOREIGN_SYSTEM_USER" 6
   qrstat_count_entries "-u '*'" 6
   
   delete_all_ars
}

proc parse_explain_option {message} {
   set output [start_sge_bin "qrstat" "-explain"]
   if {$prg_exit_state != 0} {
      add_proc_error "parse_explain_option" -1 "exit state is not 0"
      return
   }
   set output [string trim $output]
   set output [split $output "\n"]

   if {[string match "*$message*" [lindex $output 3]] < 0} {
      add_proc_error "parse_explain_option" -1 "message was not found in qrstat -explain output"
   } 
}

proc qrstat_option_explain {} {
   global qrstat_queue qrstat_host

   delete_all_ars

   set qdisabled [translate_macro MSG_QINSTANCE_DISABLED]
   set qsuspended [translate_macro MSG_QINSTANCE_SUSPENDED]
   set qunknown [translate_macro MSG_QINSTANCE_UNKNOWN]
   set qerror [translate_macro MSG_QINSTANCE_ERROR]

   set queue [get_queue_instance $qrstat_queue $qrstat_host]

   set ar_id [submit_ar "-d 3600 -q $qrstat_queue"]
   if {$ar_id <= 0} {
      add_proc_error "qrstat_option_explain" -1 "AR submit failed"
      return
   }

   disable_queue $qrstat_queue
   set msg [translate_macro MSG_AR_RESERVEDQUEUEHASERROR_SS $queue $qdisabled]
   set check_values(state)   "E"
   set check_values(message) "$msg"
   parse_qrstat_check $ar_id check_values; #qrstat -ar output
   parse_explain_option $msg; #qrstat -explain output
   enable_queue $qrstat_queue

   suspend_queue $qrstat_queue
   set msg [translate_macro MSG_AR_RESERVEDQUEUEHASERROR_SS $queue $qsuspended]
   set check_values(state)   "E"
   set check_values(message) "$msg"
   parse_qrstat_check $ar_id check_values; #qrstat -ar output
   parse_explain_option $msg; #qrstat -explain output
   unsuspend_queue $qrstat_queue

   start_sge_bin "qconf" "-ke $qrstat_host"
   set msg [translate_macro MSG_AR_RESERVEDQUEUEHASERROR_SS $queue $qunknown]
   set check_values(state)   "E"
   set check_values(message) "$msg"
   parse_qrstat_check $ar_id check_values; #qrstat -ar output
   parse_explain_option $msg; #qrstat -explain output
   startup_execd $qrstat_host
   wait_for_load_from_all_queues 60

   replace_attr "queue" "prolog" "non_existing_prolog" $qrstat_queue
   set job_id [submit_job "-ar $ar_id -o /dev/null -j y -b y echo test"]
   trigger_scheduling
   sleep 3
   set msg [translate_macro MSG_AR_RESERVEDQUEUEHASERROR_SS $queue $qerror]
   set check_values(state)   "E"
   set check_values(message) "$msg"
   parse_qrstat_check $ar_id check_values; #qrstat -ar output
   parse_explain_option $msg; #qrstat -explain output
   delete_job $job_id
   replace_attr "queue" "prolog" "NONE" $qrstat_queue
   start_sge_bin "qmod" "-c $qrstat_queue"

   delete_ar $ar_id
}
