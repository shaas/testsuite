#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


lappend check_functions "qrsh_wd"                    ;# test the -wd <dir>/-cwd options

#                                                             max. column:     |
#****** qrsh/replace_automount_prefix() ***************************************
#
#  NAME
#     replace_automount_prefix -- Replaces the automount prefix of a path with
#                                 the replacement defined in 
#                                 $SGE_ROOT/$SGE_CELL/common/sge_aliases
#
#  SYNOPSIS
#     replace_automount_prefix path
#
#  FUNCTION
#     Checks if the passed path has one of the automount prefixes defined in
#     the $SGE_ROOT/$SGE_CELL/common/sge_aliases file. If yes, it replaces
#     the automount prefix with the replacement defined in the sge_aliases file.
#
#  INPUTS
#     path  - The path whose automount prefix is to be replaced
#
#  RETURN VALUE
#     The path with replaced automount prefix
#
#  EXAMPLE
#     sge_aliases:
#     /tmp_mnt/   *   *  /
#
#
#     set path_in "/tmp_mnt/this/is/my/path"
#     set path_out [replace_automount_prefix $path_in]
#     ts_log_fine "path_out = $path_out"
#
#     path_out = /this/is/my/path
#
#  SEE ALSO
#
#***************************************************************************
#
proc replace_automount_prefix {path} {
   global ts_config
   set do_loop 1

   # Open sge_aliases file
   set error [catch {
      set f [open $ts_config(product_root)/$ts_config(cell)/common/sge_aliases "r"]
      } output]

   if {$error != 0} {
      ts_log_severe "error opening $ts_config(product_root)/$ts_config(cell)/"
                    "common/sge_aliases file:\n$output"
   } else {
      while {[gets $f line] >= 0 && $do_loop == 1} {
         # Search first non-blank character, if it is a '#' then skip line,
         # else read it's contents and compare with the passed path.
         set tmp_list [split $line] ;# Need to split explicitely, a ");" in the
                                    ;# sge_aliases would stop the lindex otherwise
         if {[string index [lindex $tmp_list 0] 0] != "#"} {
            # Here it's no comment line
            set prefix [lindex $line 0]
            set replace [lindex $line 3]
            if {[string compare -length [string length $prefix] $prefix $path] == 0} {
               # The passed path has this automounter prefix - strip it!
               set path [string range $path [string length $prefix] end] 
               # Add the replacement for the automount prefix to beginning of path
               set path "$replace$path"

               # The automounter prefix is stripped from the path ->
               # exit for loop and while loop
               set do_loop 0
            }
         }
      }
      close $f
   }
   return $path
}

#****** qrsh/qrsh_wd() ******
# 
#  NAME
#     qrsh_wd -- test if -wd/-cwd work
#
#  SYNOPSIS
#     qrsh_wd { } 
#
#*******************************
proc qrsh_wd {} {
   global ts_config
   global qrsh_submithost qrsh_hostlist

   # Set a directory
   set wdir "/tmp"
   set cwdir [pwd]

   foreach host $qrsh_hostlist {
      # Test1 -wd $wdir
      set output [start_sge_bin "qrsh" "-l h=$host -wd $wdir pwd"]
      set output [string trim $output]
      set output [replace_automount_prefix $output]
      if {[string compare $output $wdir] != 0} {
         set error_text "qrsh did not set the correct working dir: $wdir != $output"
         ts_log_fine "started qrsh -l h=$host -wd $wdir pwd"
         ts_log_severe $error_text
      }

      # Test2 -cwd
      set output [start_sge_bin "qrsh" "-l h=$host -cwd pwd" "" "" exit_state 5 $cwdir]
      set output [string trim $output]
      set output [replace_automount_prefix $output]
      if {[string compare $output $cwdir] != 0} {
         set error_text "qrsh did not set the correct working dir: $cwdir != $output"
         ts_log_fine "started qrsh -l h=$host -cwd pwd  in directory $cwdir"
         ts_log_severe $error_text
      }

      # Test3 -cwd -wd $wdir
      set output [start_sge_bin "qrsh" "-l h=$host -cwd -wd $wdir pwd" "" "" exit_state 5 $cwdir]
      set output [string trim $output]
      set output [replace_automount_prefix $output]
      if {[string compare $output $wdir] != 0} {
         set error_text "qrsh did not set the correct working dir: $wdir != $output"
         ts_log_fine "started qrsh -l h=$host -cwd -wd $wdir pwd  in directory $cwdir"
         ts_log_severe $error_text
      }

      # Test4 -wd $wdir -cwd
      set output [start_sge_bin "qrsh" "-l h=$host -wd $wdir -cwd pwd" "" "" exit_state 5 $cwdir]
      set output [string trim $output]
      set output [replace_automount_prefix $output]
      if {[string compare $output $cwdir] != 0} {
         set error_text "qrsh did not set the correct working dir: $cwdir != $output"
         ts_log_fine "started qrsh -l h=$host -wd $wdir -cwd pwd  in directory $cwdir"
         ts_log_severe $error_text
      }
   }

   delete_all_jobs
   wait_for_end_of_all_jobs
}
