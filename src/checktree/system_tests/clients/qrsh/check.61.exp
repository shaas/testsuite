#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

lappend check_functions "qrsh_wd"                    ;# test the -wd <dir>/-cwd options
lappend check_functions "qrsh_w_v_test"
lappend check_functions "qrsh_pty_yes_redirect"

#                                                             max. column:     |
#****** qrsh/replace_automount_prefix() ***************************************
#
#  NAME
#     replace_automount_prefix -- Replaces the automount prefix of a path with
#                                 the replacement defined in 
#                                 $SGE_ROOT/$SGE_CELL/common/sge_aliases
#
#  SYNOPSIS
#     replace_automount_prefix path
#
#  FUNCTION
#     Checks if the passed path has one of the automount prefixes defined in
#     the $SGE_ROOT/$SGE_CELL/common/sge_aliases file. If yes, it replaces
#     the automount prefix with the replacement defined in the sge_aliases file.
#
#  INPUTS
#     path  - The path whose automount prefix is to be replaced
#
#  RETURN VALUE
#     The path with replaced automount prefix
#
#  EXAMPLE
#     sge_aliases:
#     /tmp_mnt/   *   *  /
#
#
#     set path_in "/tmp_mnt/this/is/my/path"
#     set path_out [replace_automount_prefix $path_in]
#     ts_log_fine "path_out = $path_out"
#
#     path_out = /this/is/my/path
#
#  SEE ALSO
#
#***************************************************************************
#
proc replace_automount_prefix {path} {
   global ts_config
   set do_loop 1

   # Open sge_aliases file
   set error [catch {
      set f [open $ts_config(product_root)/$ts_config(cell)/common/sge_aliases "r"]
      } output]

   if {$error != 0} {
      ts_log_severe "error opening $ts_config(product_root)/$ts_config(cell)/"
                    "common/sge_aliases file:\n$output"
   } else {
      while {[gets $f line] >= 0 && $do_loop == 1} {
         # Search first non-blank character, if it is a '#' then skip line,
         # else read it's contents and compare with the passed path.
         set tmp_list [split $line] ;# Need to split explicitely, a ");" in the
                                    ;# sge_aliases would stop the lindex otherwise
         if {[string index [lindex $tmp_list 0] 0] != "#"} {
            # Here it's no comment line
            set prefix [lindex $line 0]
            set replace [lindex $line 3]
            if {[string compare -length [string length $prefix] $prefix $path] == 0} {
               # The passed path has this automounter prefix - strip it!
               set path [string range $path [string length $prefix] end] 
               # Add the replacement for the automount prefix to beginning of path
               set path "$replace$path"

               # The automounter prefix is stripped from the path ->
               # exit for loop and while loop
               set do_loop 0
            }
         }
      }
      close $f
   }
   return $path
}

#****** qrsh/qrsh_wd() ******
# 
#  NAME
#     qrsh_wd -- test if -wd/-cwd work
#
#  SYNOPSIS
#     qrsh_wd { } 
#
#*******************************
proc qrsh_wd {} {
   global ts_config
   global qrsh_submithost qrsh_hostlist

   # Set a directory
   set wdir "/tmp"
   set cwdir [pwd]

   foreach host $qrsh_hostlist {
      # Test1 -wd $wdir
      set output [start_sge_bin "qrsh" "-l h=$host -wd $wdir pwd"]
      set output [replace_automount_prefix $output]
      if {![qrsh_output_contains $output $wdir]} {
         set error_text "qrsh did not set the correct working dir: $wdir != $output"
         ts_log_fine "started qrsh -l h=$host -wd $wdir pwd"
         ts_log_severe $error_text
      }

      # Test2 -cwd
      set output [start_sge_bin "qrsh" "-l h=$host -cwd pwd" "" "" exit_state 5 $cwdir]
      set output [replace_automount_prefix $output]
      if {![qrsh_output_contains $output $cwdir]} {
         set error_text "qrsh did not set the correct working dir: $cwdir != $output"
         ts_log_fine "started qrsh -l h=$host -cwd pwd  in directory $cwdir"
         ts_log_severe $error_text
      }

      # Test3 -cwd -wd $wdir
      set output [start_sge_bin "qrsh" "-l h=$host -cwd -wd $wdir pwd" "" "" exit_state 5 $cwdir]
      set output [replace_automount_prefix $output]
      if {![qrsh_output_contains $output $wdir]} {
         set error_text "qrsh did not set the correct working dir: $wdir != $output"
         ts_log_fine "started qrsh -l h=$host -cwd -wd $wdir pwd  in directory $cwdir"
         ts_log_severe $error_text
      }

      # Test4 -wd $wdir -cwd
      set output [start_sge_bin "qrsh" "-l h=$host -wd $wdir -cwd pwd" "" "" exit_state 5 $cwdir]
      set output [replace_automount_prefix $output]
      if {![qrsh_output_contains $output $cwdir]} {
         set error_text "qrsh did not set the correct working dir: $cwdir != $output"
         ts_log_fine "started qrsh -l h=$host -wd $wdir -cwd pwd  in directory $cwdir"
         ts_log_severe $error_text
      }
   }

   delete_all_jobs
   wait_for_end_of_all_jobs
}

#****** qrsh/qrsh_w_v_test() ******
#
#  NAME
#     qrsh_w_v_test
#
#  SYNOPSIS
#     qrsh_w_v_test { }
#
#  FUNCTION
#     Tests if qrsh -w v verifies and sends user notification about job verification
#
#  SEE ALSO
#     
#*******************************
proc qrsh_w_v_test {} {
   global ts_config CHECK_USER
   global qrsh_hostlist qrsh_submithost

   ts_log_fine "qrsh -w v verification test"
   set arch [resolve_arch $qrsh_submithost]
   
   #submit qrsh -w v hostname job
   set qrsh_id [open_remote_spawn_process $qrsh_submithost $CHECK_USER $ts_config(product_root)/bin/$arch/qrsh "-w v hostname"]
   set sp_id [lindex $qrsh_id 1]
   set exitStatus 1
   #check for correct user notification
   set Job_Verify [translate_macro MSG_JOB_VERIFYFOUNDQ]
   set timeout 60
   expect {
      -i $sp_id full_buffer {
         ts_log_severe "buffer overflow please increment CHECK_EXPECT_MATCH_MAX_BUFFER value"
      }
      -i $sp_id "$Job_Verify" {
         ts_log_fine "qrsh successfully verified"
         exp_continue 
      }
      -i $sp_id "_exit_status_:(*)*\n" {
         set exitStatus [string index [string trimleft $expect_out(buffer)] 15]
      }
      -i $sp_id default {
         ts_log_severe "qrsh to host $host failed"
      }
   }

   close_spawn_process $qrsh_id
   
   #if the exit status of qrsh is anyting but 0 an error occurred
   if { $exitStatus != 0 } {
      ts_log_severe "Expected return value of 0 was not found. Return value was $prg_exit_state"
   }

   wait_for_end_of_all_jobs
}

#****** qrsh/qrsh_pty_yes_redirect() ******
#
#  NAME
#     qrsh_pty_yes_redirect
#
#  SYNOPSIS
#     proc qrsh_pty_yes_redirect { }
#
#  FUNCTION
#     Tests if "qrsh -pty yes > out.txt" works properly.
#     To do this, this test starts a "qrsh -verbose -pty yes > $tmpfile",
#     checks the verbose output, checks if the job runs, enters "exit" in
#     the qrsh client, checks if the job ends properly and then checks
#     if there is output in the $tmpfile.
#     In runlevel long, this is done for hosts of all different architectures
#     in the test cluster, from all architectures to all architectures.
#
#     This test tests the fix for Issue 3025, 3031 and a part of 2735.
#
#  SEE ALSO
#     
#*******************************
proc qrsh_pty_yes_redirect {} {
   global ts_config CHECK_USER
   global qrsh_hostlist
  
   foreach submit_host $qrsh_hostlist {
      foreach host $qrsh_hostlist {
         set arch [resolve_arch $submit_host]
         set tmpfile [get_tmp_file_name $submit_host]

         # Start "qrsh -pty yes > $tmpfile"
         ts_log_fine "executing $ts_config(product_root)/bin/$arch/qrsh -verbose\
                      -l h=$host -pty yes > $tmpfile on host $submit_host as $CHECK_USER"
         set qrsh_id [open_remote_spawn_process $submit_host $CHECK_USER \
                      $ts_config(product_root)/bin/$arch/qrsh "-verbose -l h=$host -pty yes > $tmpfile"]
         set sp_id [lindex $qrsh_id 1]

         # Scan the verbose output of qrsh for job id and check if an error message was print
         ts_log_fine "waiting for qrsh -pty yes to be scheduled"
         set job_id 0
         set remote_host ""

         set HAS_BEEN_SCHEDULED [translate_macro MSG_QSH_INTERACTIVEJOBHASBEENSCHEDULED_S "*"]
         set ESTABLISHING_SESSION [translate_macro MSG_QSH_ESTABLISHINGREMOTESESSIONTO_SS "*" "*"]
         set timeout 60
         expect {
            -i $sp_id full_buffer {
               ts_log_severe "buffer overflow please increment CHECK_EXPECT_MATCH_MAX_BUFFER value"
               close_spawn_process $qrsh_id
               return
            }
            -i $sp_id timeout {
               # If qrsh prints no error message, we get this timeout, but $job_id
               # is != 0 then.
               if {$job_id == 0} {
                  # if $job_id is still 0, there was an error
                  ts_log_severe "timeout waiting for qrsh -pty yes to be submitted"
                  close_spawn_process $qrsh_id
                  return
               }
            }
            -i $sp_id eof {
               ts_log_severe "eof waiting for qrsh -pty yes to be submitted"
               close_spawn_process $qrsh_id
               return
            }
            -i $sp_id $HAS_BEEN_SCHEDULED {
               set job_id [lindex $expect_out(0,string) 3]
               # After this we expect the "Establishing session..." message
               exp_continue
            }
            -i $sp_id $ESTABLISHING_SESSION {
               set remote_host [lindex $expect_out(0,string) 5]
               # After this we expect either a error message or the login message
               exp_continue
            }
            -i $sp_id "*Error*" {
               # The command works not properly, likely it's the
               # "stdout is redirected" error.
               ts_log_severe "qrsh printed an error: $expect_out(0,string)"
               close_spawn_process $qrsh_id
               return
            }
            -i $sp_id "?*\n" {
               # If $job_id and $remote_host is set, this line
               # is either an error message (which is already caugh
               # by the block above, so we don't get here) or the first
               # lines of a login message (which we should catch here).
               # We can stop parsing then.
               # If $job_id or $remote_host is not yet set, the next
               # line is just an intermediate message we can skip and
               # continue parsing.
               if {$job_id == 0 || $remote_host == "" } {
                  exp_continue
               }
            }
         }
         if {$job_id != 0 && $remote_host != ""} {
            ts_log_fine "qrsh job $job_id correctly scheduled to remote host $remote_host"
         } else {
            ts_log_severe "qrsh job wasn't submitted"
            close_spawn_process $qrsh_id
            return
         }
         
         # Wait until job runs
         ts_log_fine "waiting until the job runs"
         if {[wait_for_jobstart $job_id "QRLOGIN" 60] != 0} {
            ts_log_severe "job $job_id does not start"
            close_spawn_process $qrsh_id
            delete_all_jobs
            return
         }

         # Write "exit" to the qrsh
         ts_log_fine "sending \"exit\" to the qrsh"
         ts_send $sp_id "exit\n"
         close_spawn_process $qrsh_id

         # Wait until job ends
         ts_log_fine "waiting until the job ends"
         wait_for_jobend $job_id "QRLOGIN" 60 0 0

         # Check if tmp.txt contains some login message
         get_file_content $submit_host $CHECK_USER $tmpfile file_content
         ts_log_finer "there are $file_content(0) lines in $tmpfile"
         for {set i 1} {$i<=$file_content(0)} {incr i} {
            ts_log_finer "line $i: $file_content($i)"
         }
         if {$file_content(0) == 0} {
            ts_log_severe "no output was redirected!"
            delete_all_jobs
            return
         }
      }
   }
   wait_for_end_of_all_jobs 60 0
}
