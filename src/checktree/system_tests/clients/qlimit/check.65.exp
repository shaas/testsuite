#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "no"

# define a level initialization procedure:
set check_init_level_procedure "qlimit_init_level"

# define test's name and run level descriptions
set check_name            "qlimit"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "test qlimit functionality"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function qlimit_setup
set check_cleanup_function qlimit_cleanup


# define test's procedure order
set check_functions ""
lappend check_functions "qlimit_help"                   ;# print this help

proc qlimit_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level 
}

proc qlimit_setup {} {
   global CHECK_OUTPUT ts_config

   set_error 0 "ok"
}

proc qlimit_cleanup {} {
   global CHECK_OUTPUT ts_config

   set_error 0 "ok"
}

proc qlimit_help {} {
   global CHECK_PRODUCT_ROOT CHECK_ARCH CHECK_OUTPUT CHECK_PRODUCT_VERSION_NUMBER

   set qlimit_help_lines 10

   set output [start_sge_bin "qlimit" "-help"]

   puts $CHECK_OUTPUT "qlimit output    : \n---"
   puts $CHECK_OUTPUT "$output"
   puts $CHECK_OUTPUT "---\n"
   puts $CHECK_OUTPUT "qlimit exit state: $prg_exit_state"

   if {$prg_exit_state != 0} {
      set_error -1 "exit state is not 0"
   }

   set output [string trim $output]

   if {[string first $CHECK_PRODUCT_VERSION_NUMBER $output] < 0} {
      set_error -1 "version string ($CHECK_PRODUCT_VERSION_NUMBER) not found"
   } 
 
   set lines [split $output "\n"]
   set nr_of_lines [llength $lines] 

   puts $CHECK_OUTPUT "Output has $nr_of_lines lines"

   if {$nr_of_lines != $qlimit_help_lines} {
      add_proc_error "qlimit_help" -1 "help output has $nr_of_lines, but expected are $qlimit_help_lines lines:\n$output"
   }

   set_error 0 "ok"
}
