#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

# we need root access
set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "qmod_reschedule_init_level"

# define test's name and run level descriptions
set check_name            "qmod_reschedule"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "checking reschedule option of qmod"

# define test's dependencies
set check_needs           "init_core_system display_test"

# setup and cleanup functions
set check_setup_level_function "reschedule_setup"
set check_cleanup_level_function "reschedule_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "reschedule_submit_jobs"
lappend check_functions "reschedule_checkpointing"
lappend check_functions "reschedule_checkpointing_forced"
lappend check_functions "reschedule_qsh_qlogin_qrsh_qrlogin"
lappend check_functions "reschedule_pe_jobs"
lappend check_functions "reschedule_deleted_job"

# -------- local test procedures -----------------------------------------------
proc qmod_reschedule_init_level {} {
   global ts_config CHECK_ACT_LEVEL

   if {[llength $ts_config(execd_nodes)] < 2} {
      return -1
   }

   switch -- $CHECK_ACT_LEVEL {
      0 {
         return 0
      }
   }

   return -1  ;# no other level else
}

#
#                                                             max. column:     |
#
#****** check/reschedule_setup() ******
#  NAME
#     reschedule_setup -- ??? 
#
#  SYNOPSIS
#     reschedule_setup { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
#
proc reschedule_setup {} {
   global ts_config
   global pe_names pe_alloc_rule
   global rerun_host no_rerun_host
   global rerun_queue rerun_queue2 no_rerun_queue
   global stored_configuration

   # we'll do qrsh without command, and qsh
   # these are known not to work on some architectures
   # select only working platforms
   if {$ts_config(gridengine_version) >= 6.2} {
      # from SGE 6.2 on, this test should work on all platforms
      set hosts [host_conf_get_suited_hosts 2]
   } else {
      set hosts [host_conf_get_suited_hosts 2 {} {} {hp11 hp11-64 win32-x86}]
   }
   if {[llength $hosts] < 2} {
      ts_log_severe "Not enough suited hosts to perform this test!"
   }

   set rerun_host    [lindex $hosts 0]
   set no_rerun_host [lindex $hosts 1]

   set rerun_queue    "re_true.q"
   set rerun_queue2   "re_true2.q"
   set no_rerun_queue "resch_false.q"

   set pe_names      {}
   set pe_alloc_rule {}
   lappend pe_names      "reschpe_1" 
   lappend pe_alloc_rule "1"
   lappend pe_names      "reschpe_2" 
   lappend pe_alloc_rule "2"
   lappend pe_names      "reschpe_rr" 
   lappend pe_alloc_rule "\$round_robin"
   lappend pe_names      "reschpe_fill" 
   lappend pe_alloc_rule "\$fill_up"

   set schedd_config(schedule_interval) "0:0:4"
   set_schedd_config schedd_config

   if {[info exists stored_configuration]} {
      unset stored_configuration
   }
   get_config stored_configuration
   set myconfig(load_report_time) "00:00:6"
   set_config myconfig

   # disable the all.q
   foreach host $ts_config(execd_hosts) {
      disable_queue [get_queue_instance all.q $host]
   }

   ts_log_fine "using host \"$rerun_host\" for queue with rerun=TRUE"
   ts_log_fine "using host \"$no_rerun_host\" for queue with rerun=FALSE"

   set new_queue(rerun)    "TRUE"
   set new_queue(qtype)    "BATCH INTERACTIVE PARALLEL CHECKPOINTING"
   set new_queue(load_thresholds) "np_load_avg=8.00"
   set new_queue(slots)    "100"
   add_queue $rerun_queue $rerun_host new_queue
   add_queue $rerun_queue2 $no_rerun_host new_queue

   set new_queue(rerun)    "FALSE"
   add_queue $no_rerun_queue $no_rerun_host new_queue

   # add checkpointobject for test
   ts_log_fine "creating checkpointobjects ..."
   set new_checkpointobj(ckpt_name)  "qmod_with_r"
   set new_checkpointobj(interface)  "userdefined"
   set new_checkpointobj(when) "r"
   add_checkpointobj "new_checkpointobj"
   assign_queues_with_ckpt_object $rerun_queue $rerun_host qmod_with_r

   set new_checkpointobj(ckpt_name)  "qmod_without_r"
   set new_checkpointobj(when) "s"
   add_checkpointobj "new_checkpointobj"
   assign_queues_with_ckpt_object $rerun_queue $rerun_host qmod_without_r

   # add pe_object for test
   ts_log_fine "creating pe object ..."
   set new_peobj(slots)            "5"
   set index 0
   foreach elem $pe_names {
      set new_peobj(allocation_rule) [lindex $pe_alloc_rule $index]
      incr index 1
      add_pe $elem new_peobj
      assign_queues_with_pe_object $rerun_queue $rerun_host $new_peobj(pe_name)
      assign_queues_with_pe_object $rerun_queue2 $no_rerun_host $new_peobj(pe_name)
   }
}

#
#                                                             max. column:     |
#
#****** check/reschedule_cleanup() ******
#  NAME
#     reschedule_cleanup -- ??? 
#
#  SYNOPSIS
#     reschedule_cleanup { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
#
proc reschedule_cleanup {} {
   global ts_config
   global rerun_queue rerun_queue2 no_rerun_queue rerun_host no_rerun_host
   global stored_configuration pe_names

   delete_all_jobs
   wait_for_end_of_all_jobs

   reset_schedd_config
   set_config stored_configuration

   ts_log_fine "removing checkpointobjects ..."
   del_checkpointobj "qmod_with_r"
   del_checkpointobj "qmod_without_r"

   foreach elem $pe_names {
      del_pe $elem
   }

   ts_log_fine "removing queues ..."
   del_queue $rerun_queue $rerun_host 0 1
   del_queue $no_rerun_queue $no_rerun_host 0 1
   del_queue $rerun_queue2 $no_rerun_host 0 1

   ts_log_fine "enabling queues ..."
   foreach host $ts_config(execd_nodes) {
      enable_queue [get_queue_instance all.q $host]
   }
}

#
#                                                             max. column:     |
#
#****** check/reschedule_submit_jobs() ******
#  NAME
#     reschedule_submit_jobs -- ??? 
#
#  SYNOPSIS
#     reschedule_submit_jobs { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
#
proc reschedule_submit_jobs {} {
   global ts_config
   global rerun_queue no_rerun_queue rerun_host no_rerun_host
  
   set jobs {}
   set my_outputs "-o /dev/null -e /dev/null"
   set arguments "$my_outputs -q [get_queue_instance $rerun_queue $rerun_host] -r y $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]
   
   set arguments "$my_outputs -q [get_queue_instance $rerun_queue $rerun_host] -r n $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]

   set arguments "$my_outputs -q [get_queue_instance $rerun_queue $rerun_host] $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]

   set arguments "$my_outputs -q [get_queue_instance $no_rerun_queue $no_rerun_host] -r n $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]

   set arguments "$my_outputs -q [get_queue_instance $no_rerun_queue $no_rerun_host] -r y $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]
 
   set arguments "$my_outputs -q [get_queue_instance $no_rerun_queue $no_rerun_host] $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]

   set jobs_string ""
   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 60
      wait_for_end_of_transfer $elem 60
      append jobs_string "$elem "
   }

   ts_log_fine "running jobs: $jobs_string"

   ts_log_fine "disabling queues $no_rerun_queue and $rerun_queue"
   disable_queue [get_queue_instance $no_rerun_queue $no_rerun_host]
   disable_queue [get_queue_instance $rerun_queue $rerun_host]
   
   # send qmod -r to each job
   ts_log_fine "sending qmod -r to jobs $jobs_string"   
   set output [start_sge_bin "qmod" "-r $jobs_string"]
   ts_log_fine $output
  
   set sched_jobs    "[lindex $jobs 0] [lindex $jobs 2] [lindex $jobs 4]"
   set no_sched_jobs "[lindex $jobs 1] [lindex $jobs 3] [lindex $jobs 5]"
   ts_log_fine "jobs $sched_jobs should be pending ..."
   foreach elem $sched_jobs {
      wait_for_jobpending $elem "Sleeper" 60
   }

   ts_log_fine "jobs $no_sched_jobs should still run ..."
   foreach elem $no_sched_jobs {
      wait_for_jobstart $elem "Sleeper" 60
   }

   ts_log_fine "using force flag for job [lindex $jobs 1] ..."
   set output [start_sge_bin "qmod" "-f -r [lindex $jobs 1]"]
   ts_log_fine $output
   ts_log_fine "waiting for job [lindex $jobs 1] to get in pending state ..."
   wait_for_jobpending [lindex $jobs 1] "Sleeper" 60

   enable_queue [get_queue_instance $no_rerun_queue $no_rerun_host]
   enable_queue [get_queue_instance $rerun_queue $rerun_host]

   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 60
      wait_for_end_of_transfer $elem 300
   }

   ts_log_fine "disabling queues $no_rerun_queue and $rerun_queue"
   disable_queue [get_queue_instance $no_rerun_queue $no_rerun_host]
   disable_queue [get_queue_instance $rerun_queue $rerun_host]

   # send qmod -r to each job in queue 
   ts_log_fine "sending qmod -r to queues $no_rerun_queue and $rerun_queue"
   set output [start_sge_bin "qmod" "-r [get_queue_instance $no_rerun_queue $no_rerun_host] [get_queue_instance $rerun_queue $rerun_host]"]
   ts_log_fine $output

   ts_log_fine "jobs $sched_jobs should be pending ..."
   foreach elem $sched_jobs {
      wait_for_jobpending $elem "Sleeper" 60
   }

   ts_log_fine "jobs $no_sched_jobs should still run ..."
   foreach elem $no_sched_jobs {
      wait_for_jobstart $elem "Sleeper" 60
   }

   ts_log_fine "using force flag for job [lindex $jobs 1] ..."
   set output [start_sge_bin "qmod" "-f -r [lindex $jobs 1]"]
   ts_log_fine $output
   ts_log_fine "waiting for job [lindex $jobs 1] to get in pending state ..."
   wait_for_jobpending [lindex $jobs 1] "Sleeper" 60

   enable_queue [get_queue_instance $no_rerun_queue $no_rerun_host]
   enable_queue [get_queue_instance $rerun_queue $rerun_host]

   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 60
      wait_for_end_of_transfer $elem 60
   }

   # cleanup jobs
   foreach elem $jobs {
      delete_job $elem 1
   }
}

#
#                                                             max. column:     |
#
#****** check/reschedule_checkpointing() ******
#  NAME
#     reschedule_checkpointing -- ??? 
#
#  SYNOPSIS
#     reschedule_checkpointing { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
#
proc reschedule_checkpointing {} {
   global ts_config
   global rerun_queue no_rerun_queue rerun_host no_rerun_host
   
   set jobs {}
   set my_outputs "-o /dev/null -e /dev/null"
   set arguments "$my_outputs -ckpt qmod_with_r $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]

   set arguments "$my_outputs -ckpt qmod_without_r $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]

   set arguments "$my_outputs -ckpt qmod_with_r -r n $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]

   set arguments "$my_outputs -ckpt qmod_without_r -r y $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]

   set jobs_string ""
   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 60
      wait_for_end_of_transfer $elem 60
      append jobs_string "$elem "
   }

   ts_log_fine "running jobs: $jobs_string"

   ts_log_fine "disabling queue $rerun_queue"
   disable_queue [get_queue_instance $rerun_queue $rerun_host]
 
   # send qmod -r to each job
   ts_log_fine "sending qmod -r to jobs $jobs_string"
   set output [start_sge_bin "qmod" "-r $jobs_string"]
   ts_log_fine $output

   set sched_jobs    "[lindex $jobs 0]"
   set no_sched_jobs "[lindex $jobs 1] [lindex $jobs 2] [lindex $jobs 3]"
   ts_log_fine "jobs $sched_jobs should be pending ..."
   foreach elem $sched_jobs {
      wait_for_jobpending $elem "Sleeper" 60
   }

   ts_log_fine "jobs $no_sched_jobs should still run ..."
   foreach elem $no_sched_jobs {
      wait_for_jobstart $elem "Sleeper" 60
   }
   enable_queue [get_queue_instance $rerun_queue $rerun_host]
   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 60
      wait_for_end_of_transfer $elem 80
   }

   ts_log_fine "disabling queue $rerun_queue"
   disable_queue [get_queue_instance $rerun_queue $rerun_host]

   # send qmod -r to each job in queue
   ts_log_fine "sending qmod -r to queue $rerun_queue"
   set output [start_sge_bin "qmod" "-r [get_queue_instance $rerun_queue $rerun_host]"]
   ts_log_fine $output

   ts_log_fine "jobs $sched_jobs should be pending ..."
   foreach elem $sched_jobs {
      wait_for_jobpending $elem "Sleeper" 60
   }

   ts_log_fine "jobs $no_sched_jobs should still run ..."
   foreach elem $no_sched_jobs {
      wait_for_jobstart $elem "Sleeper" 60
   }

   enable_queue [get_queue_instance $rerun_queue $rerun_host]

   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 60
      wait_for_end_of_transfer $elem 60
   }

   # cleanup jobs
   foreach elem $jobs {
      delete_job $elem
      wait_for_jobend $elem "Sleeper" 60 0
   }
}

proc reschedule_checkpointing_forced {} {
   global ts_config
   global rerun_queue no_rerun_queue rerun_host no_rerun_host
 
   set jobs {}
   set my_outputs "-o /dev/null -e /dev/null"
   set arguments "$my_outputs -ckpt qmod_with_r $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]
 
   set arguments "$my_outputs -ckpt qmod_without_r $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]

   set arguments "$my_outputs -ckpt qmod_with_r -r n $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]
 
   set arguments "$my_outputs -ckpt qmod_without_r -r y $ts_config(product_root)/examples/jobs/sleeper.sh 1000"
   lappend jobs [submit_job $arguments]

   set jobs_string ""
   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 60
      wait_for_end_of_transfer $elem 60
      append jobs_string "$elem "
   }

   ts_log_fine "running jobs: $jobs_string"

   ts_log_fine "disabling queue $rerun_queue"
   disable_queue [get_queue_instance $rerun_queue $rerun_host]

   # send qmod -r to each job
   ts_log_fine "sending qmod -f -r to jobs $jobs_string"
   set output [start_sge_bin "qmod" "-f -r $jobs_string"]
   ts_log_fine $output

   set sched_jobs    "[lindex $jobs 0] [lindex $jobs 1] [lindex $jobs 2] [lindex $jobs 3]"
   set no_sched_jobs ""
   ts_log_fine "jobs $sched_jobs should be pending ..."
   foreach elem $sched_jobs {
      wait_for_jobpending $elem "Sleeper" 60
   }

   ts_log_fine "jobs $no_sched_jobs should still run ..."
   foreach elem $no_sched_jobs {
      wait_for_jobstart $elem "Sleeper" 60
   }
   enable_queue [get_queue_instance $rerun_queue $rerun_host]
   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 60
      wait_for_end_of_transfer $elem 60
   }

   ts_log_fine "disabling queue $rerun_queue"
   disable_queue [get_queue_instance $rerun_queue $rerun_host]

   # send qmod -r to each job in queue 
   ts_log_fine "sending qmod -f -r to queue $rerun_queue"
   set output [start_sge_bin "qmod" "-f -r [get_queue_instance $rerun_queue $rerun_host]"]
   ts_log_fine $output

   ts_log_fine "jobs $sched_jobs should be pending ..."
   foreach elem $sched_jobs {
      wait_for_jobpending $elem "Sleeper" 60
   }

   ts_log_fine "jobs $no_sched_jobs should still run ..."
   foreach elem $no_sched_jobs {
      wait_for_jobstart $elem "Sleeper" 60
   }

   enable_queue [get_queue_instance $rerun_queue $rerun_host]

   foreach elem $jobs {
      wait_for_jobstart $elem "Sleeper" 60
      wait_for_end_of_transfer $elem 60
   }

   # cleanup jobs
   foreach elem $jobs {
      delete_job $elem
      wait_for_jobend $elem "Sleeper" 60 0
   }
}


#
#                                                             max. column:     |
#
#****** check/reschedule_qsh_qlogin_qrsh_qrlogin() ******
#  NAME
#     reschedule_qsh_qlogin_qrsh_qrlogin -- ??? 
#
#  SYNOPSIS
#     reschedule_qsh_qlogin_qrsh_qrlogin { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
#
proc reschedule_qsh_qlogin_qrsh_qrlogin {} {
   global ts_config
   global CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER
   global rerun_queue no_rerun_queue rerun_host no_rerun_host
 
   set host $ts_config(master_host)
   set no_jobs 4
   set result ""
   set local_arch [resolve_arch [gethostname]]

   set args "-now no -q [get_queue_instance $rerun_queue $rerun_host]"
   set qrsh_id  [open_remote_spawn_process $host $CHECK_USER "$ts_config(product_root)/bin/$local_arch/qrsh" "$args"]

   set args "-now no -q [get_queue_instance $rerun_queue $rerun_host] sleep 10000"
   set qrsh_id2 [open_remote_spawn_process $host $CHECK_USER "$ts_config(product_root)/bin/$local_arch/qrsh" "$args"]

   set args "-now no -q [get_queue_instance $rerun_queue $rerun_host]"
   set qsh_id  [open_remote_spawn_process $host $CHECK_USER "$ts_config(product_root)/bin/$local_arch/qsh" "$args"]

   if {[ge_has_feature "new-interactive-job-support"] == true} {
      # new interactive job support
      set args "-now no -q [get_queue_instance $rerun_queue $rerun_host]"
      set qlogin_id [open_remote_spawn_process $host $CHECK_USER "$ts_config(product_root)/bin/$local_arch/qlogin" "$args"]
      set qlogin_spawn_id [lindex $qlogin_id 1]
   } else {
      # old interactive job support
      set qlogin_out_file [get_tmp_file_name "" "qlogin" "txt"]
      ts_log_fine "try to run scripts/qlogin.sh $qlogin_out_file $ts_config(product_root)/bin/$local_arch/qlogin -q [get_queue_instance $rerun_queue $rerun_host]"
      set args "$qlogin_out_file $ts_config(product_root)/bin/$local_arch/qlogin -now no -q [get_queue_instance $rerun_queue $rerun_host]"
      set qlogin_id [open_remote_spawn_process $host $CHECK_USER "$ts_config(testsuite_root_dir)/scripts/qlogin.sh" "$args"]
      set qlogin_spawn_id [lindex $qlogin_id 1]

      # wait for qlogin login and password prompt only in case telnet is configured
      set my_timeout [timestamp]
      incr my_timeout 30
      while {[string first "login" $result] < 0 && [string first "assword" $result] < 0} {
         set result [start_remote_prog $host $CHECK_USER "cat" $qlogin_out_file]
         ts_log_fine "qlogin output (1):\n$result"
         if {$my_timeout < [timestamp]} {
            break
         }
         after 1500
      }

      # on some systems (Solaris 10), telnet doesn't present a login, but tries 
      # to login current user first
      if {[string first "assword:" $result] < 0} {
         if {[string first "login:" $result] < 0} {
             ts_log_severe "qlogin error, expected login:, received $result"
         }

         ts_send $qlogin_spawn_id "$CHECK_USER\n" $ts_config(master_host) 1
         set timeout 5
         expect {
            -i $qlogin_spawn_id eof {
                ts_log_fine "got eof"
                ts_log_severe "qlogin unexpected eof"
            }
            -i $qlogin_spawn_id timeout {
                ts_log_fine "success, got timeout"
            }
         }
         set result ""
      }

      set my_timeout [timestamp]
      incr my_timeout 120
      set timeout 0
      while {[string first "assword:" $result] < 0} {
         set result [start_remote_prog $host $CHECK_USER "cat" $qlogin_out_file]
         ts_log_fine "qlogin output (2):\n$result"
         if {$my_timeout < [timestamp]} {
            ts_log_severe "timeout waiting for qlogin password question"
            break
         }
         after 1500
      }

      if {[string first "closed" $result] >= 0} {
          ts_log_severe "qlogin error, connection closed"
      }
   }

   set end_time [expr [timestamp] + 60]
   set ru_jobs 0
   while {$ru_jobs != $no_jobs} {
      get_extended_job_info ""
      set running_jobs $job_info(index)
      set jobs ""
      set jobs_string ""
      set job_names ""
      foreach elem $running_jobs {
         set jobid [string trim $elem]
         if {$jobid >= 0} {
            ts_log_fine "job $jobid running in queue \"$job_info($jobid,queue)\" and has state \"$job_info($jobid,state)\""
            if {[string first "r" $job_info($jobid,state)] >= 0} {
               lappend jobs $jobid
               append jobs_string "$jobid "
               lappend job_names "$job_info($jobid,name)"
            }
         }
      }
      set ru_jobs [llength $jobs]
      ts_log_fine "found ($ru_jobs/$no_jobs) jobs"
      unset job_info
      after 1000
      set now [timestamp]
      if {$now > $end_time} {
         ts_log_severe "timeout waiting for processes"
         break
      }
   }

   ts_log_fine "disabling queue $rerun_queue"
   disable_queue [get_queue_instance $rerun_queue $rerun_host]

   # send qmod -r to each job
   ts_log_fine "sending qmod -r to jobs $jobs_string"
   set output [start_sge_bin "qmod" "-r $jobs_string"]
   ts_log_fine $output
 
   ts_log_fine "jobs $jobs_string should still run ..."
   set index 0
   foreach elem $jobs_string {
      wait_for_jobstart $elem [lindex $job_names $index] 60
      wait_for_end_of_transfer $elem 60
      incr index 1
   }

   enable_queue [get_queue_instance $rerun_queue $rerun_host]
 
   foreach elem $jobs_string {
      delete_job $elem
   }

   ts_log_fine "closing jobs"
   close_spawn_process $qrsh_id 1
   close_spawn_process $qrsh_id2 1
   close_spawn_process $qsh_id 1
   if {$qlogin_id != -1} {
      close_spawn_process $qlogin_id 1
   }
}

#
#                                                             max. column:     |
#
#****** check/reschedule_pe_jobs() ******
#  NAME
#     reschedule_pe_jobs -- ??? 
#
#  SYNOPSIS
#     reschedule_pe_jobs { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
#
proc reschedule_pe_jobs {} {
   global ts_config
   global rerun_queue rerun_queue2 no_rerun_queue rerun_host no_rerun_host pe_names

   if {$ts_config(gridengine_version) == 53} {
      ts_log_config "test would fail in 5.3 systems, as queue names are truncated in qstat output\nWould have to call qstat -f to figure out master and slave queues"
      return
   }

   foreach pe $pe_names {
       ts_log_fine "submitting job to pe $pe ..."
       set my_outputs "-o /dev/null -e /dev/null"
       set my_job "$ts_config(product_root)/examples/jobs/sleeper.sh 5000"
       set arguments "$my_outputs -pe $pe 2 -masterq [get_queue_instance $rerun_queue $rerun_host] $my_job"
       set job [submit_job $arguments]
       ts_log_fine "job $job submitted"

       wait_for_jobstart $job "Sleeper" 60

       set mytime [expr [timestamp] + 100]
       set run 1
       set master_queue ""
       set slave_queue ""
       while {$run == 1} {
          set job_info [get_standard_job_info $job 1]
          foreach elem $job_info {
             ts_log_fine $elem
             if {[string first "MASTER" $elem] >= 0} {
                set master_queue [lindex $elem 7]
                ts_log_fine "master runs on queue $master_queue"
             }
             if {[string first "SLAVE" $elem] >= 0} {
                set slave_queue [lindex $elem 7]
                ts_log_fine "slave runs on queue $slave_queue"
             }
          }
          ts_log_fine "-----------"
          if {$master_queue != "" && $slave_queue != ""} {
             ts_log_fine "MASTER and SLAVE task are running!"
             set run 0
          }
          set nowtime [timestamp]
          if {$nowtime > $mytime} {
             set run 0
             ts_log_severe "timeout waiting for MASTER and SLAVE task of job $job, pe $pe"
          }
          sleep 1
       }

       if {[string first $rerun_queue $master_queue] != 0} {
          ts_log_fine "\"$master_queue\"\n\"$rerun_queue\""
          ts_log_severe "job $job: master task is not on queue $rerun_queue, pe $pe"
       }

       if {[string compare $pe "reschpe_1"] == 0} {
          if {[string first $rerun_queue2 $slave_queue] != 0} {
             ts_log_fine "\"$slave_queue\"\n\"$rerun_queue2\""
             ts_log_severe "job $job: slave task is not on queue $rerun_queue2, pe $pe"
          }
       }

       # ok jobs are running and we now his running queues now
       ts_log_fine "disabling queue $rerun_queue and $rerun_queue2"
       disable_queue [get_queue_instance $rerun_queue $rerun_host]
       disable_queue [get_queue_instance $rerun_queue2 $no_rerun_host]

       if {[string compare $slave_queue $master_queue] != 0} {
          ts_log_fine "rescheduling SLAVE task queue \"$slave_queue\""
          set output [start_sge_bin "qmod" "-r $slave_queue"]
          ts_log_fine $output

          sleep 10          

          ts_log_fine "job $job should still run ..."
          wait_for_jobstart $job "Sleeper" 60
       }
 
       ts_log_fine "rescheduling MASTER task queue \"$master_queue\""
       set output [start_sge_bin "qmod" "-r $master_queue"]
       ts_log_fine $output

       wait_for_jobpending $job "Sleeper" 60
       set run 1
       set job_info [get_standard_job_info $job 1]
       foreach elem $job_info {
          ts_log_fine $elem
          if {[string first "MASTER" $elem] >= 0} {
             ts_log_severe "no MASTER task should run, pe $pe"
          }
          if {[string first "SLAVE" $elem] >= 0} {
             ts_log_severe "no SLAVE task should run, pe $pe"
          }
       }

       ts_log_fine "enable queue $rerun_queue and $rerun_queue2"
       enable_queue [get_queue_instance $rerun_queue $rerun_host]
       enable_queue [get_queue_instance $rerun_queue2 $no_rerun_host]
 
       if {[wait_for_jobstart $job "Sleeper" 45] == 0} {
          set mytime [expr [timestamp] + 45]
          set run 1
          set master_queue ""
          set slave_queue ""
          while {$run == 1} {
             set job_info [get_standard_job_info $job 1]
             foreach elem $job_info {
                ts_log_fine $elem
                if {[string first "MASTER" $elem] >= 0} {
                   set master_queue [lindex $elem 7]
                   ts_log_fine "master runs on queue $master_queue"
                }
                if {[string first "SLAVE" $elem ] >= 0} {
                   set slave_queue [lindex $elem 7]
                   ts_log_fine "slave runs on queue $slave_queue"
                }
             }
             if {$master_queue != "" && $slave_queue != ""} {
                ts_log_fine "MASTER and SLAVE task are running!"
                set run 0
             }
             set nowtime [timestamp]
             if {$nowtime > $mytime} {
                set run 0
                ts_log_severe "timeout waiting for MASTER and SLAVE task of job $job, pe $pe"
             }
             sleep 1
          }
       } else {
          ts_log_severe "job $job does not start, pe $pe"
       }
       if {[is_job_running $job "Sleeper"] != 1} {
          ts_log_severe "job $job is not running!!"
       }

       delete_job $job
       # wait for job without check if he is already running
       # ==> when job is faster deleted, wait_for_jobend will not find the job and
       #     report an error

       wait_for_jobend $job "Sleeper" 60 0
   }
}

#
#                                                             max. column:     |
#
#****** check/reschedule_deleted_job() ******
#  NAME
#     reschedule_deleted_job -- ??? 
#
#  SYNOPSIS
#     reschedule_deleted_job { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
#
proc reschedule_deleted_job {} {
   global ts_config
   global rerun_queue no_rerun_queue rerun_host no_rerun_host
   global stored_configuration rerun_queue2
   global pe_names pe_alloc_rule

   ts_log_fine "submitting job to queue $no_rerun_queue ..."
   set my_outputs "-o /dev/null -e /dev/null"
   set arguments "$my_outputs -q [get_queue_instance $no_rerun_queue $no_rerun_host] -r y $ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id [submit_job $arguments]

   wait_for_jobstart $job_id "Sleeper" 60
   wait_for_end_of_transfer $job_id 60

   # shutdown execd
   ts_log_fine "shutdown execd on host $no_rerun_host ..."
   shutdown_system_daemon $no_rerun_host "execd"

   ts_log_fine "deleting job $job_id ..."
   # Make delete_job ignore errors: Beginning with 6.0, we get an error
   # when deleting a job while the execd is down.
   # Nevertheless the job is being registered for deletion, 
   # and gets deleted once the execd is up again.
   delete_job $job_id 0 0 0

   ts_log_fine "job should still be in queue, but in delete state ..."
   if {[is_job_running $job_id "Sleeper"] != 1} {
      ts_log_severe "job $job_id is not running!! (queue: $no_rerun_queue)"
   }

   ts_log_fine "reschedule of job $job_id ..."
   set output [start_sge_bin "qmod" "-r $job_id"]
   ts_log_fine $output

   # restart execd
   ts_log_fine "restarting execd on host $no_rerun_host ..."
   startup_execd $no_rerun_host
   wait_for_load_from_all_queues 60

   wait_for_jobend $job_id "Sleeper" 65 0
}
