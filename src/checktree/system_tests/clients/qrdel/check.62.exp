#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "qrdel_init_level"


# define test's name and run level descriptions
set check_name            "qrdel"
set check_category        "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_highest_level   0
set check_description(0)  "qrdel test"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function   "qrdel_setup"
set check_cleanup_function "qrdel_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "qrdel_help"                   ;# print this help
lappend check_functions "qrdel_submit_delete_when_transfered"
lappend check_functions "qrdel_submit_delete_when_transfered_parallel"
lappend check_functions "qrdel_delete_unknown_arbid"   ;# delete ar not running and id 0
lappend check_functions "qrdel_all"                   ;# delete all jobs of current user
lappend check_functions "qrdel_uall"                  ;# delete all jobs of all users
lappend check_functions "qrdel_user_list"             ;# delete all jobs of users specified in list
lappend check_functions "qrdel_force"                 ;# force action

# check's globals
global queue test_host pe

proc qrdel_init_level {} {
  global CHECK_ACT_LEVEL hold_state pending_state queue pe

  set queue "qrdel.q"
  set pe "qrdel_pe"

  switch -- $CHECK_ACT_LEVEL {
     "0" { return 0 }
  }

  return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------

proc qrdel_setup {} {
   global queue test_host pe
   global CHECK_FIRST_FOREIGN_SYSTEM_USER

   set pe_param(slots)                "50"
   set pe_param(pe_name)              "$pe"
   add_pe pe_param

   set q_param(load_thresholds)       "np_load_avg=7.00"
   set q_param(slots)                 "50"
   set q_param(pe_list)              "$pe"

   add_user_to_access_list $CHECK_FIRST_FOREIGN_SYSTEM_USER "arusers"

   set test_host [host_conf_get_suited_hosts]
   add_queue $queue $test_host q_param
}

proc qrdel_cleanup {} {
   global queue test_host pe
   global CHECK_FIRST_FOREIGN_SYSTEM_USER

   delete_all_jobs
   wait_for_end_of_all_jobs

   delete_all_ars

   after 5000

   del_queue $queue test_host 0 1
   del_pe $pe

   del_user_from_access_list $CHECK_FIRST_FOREIGN_SYSTEM_USER "arusers"

   start_sge_bin "qmod" "-c all.q"
}

proc qrdel_submit_delete_when_transfered {} {
   global ts_config
   global queue test_host pe
   global CHECK_OUTPUT

   # cleanup from earlier checks
   delete_all_ars
   wait_for_end_of_all_jobs 60

   set ar_id [submit_ar "-q $queue -pe $pe 50 -d 3600"]
   if {$ar_id > 0} {
      # we submit sleeper jobs and delete the AR after all of them are running
      set job_script "$ts_config(product_root)/examples/jobs/sleeper.sh 1000"
      set runs 5
      while { $runs > 0 } { 
         set arguments "-o /dev/null -j y -q $queue -ar $ar_id"
         set job_id [submit_job "$arguments $job_script"]
         if {$job_id > 0} {
            trigger_scheduling
            set job_state [wait_for_jobstart $job_id "leeper" 120]
            if {$job_state == -1} {
               set runs 0
            }
         }
         incr runs -1
      }
      delete_ar $ar_id 1
   } else {
      add_proc_error "qrdel_submit_delete_when_transfered" -1 "error submitting AR"
   }

   set output [start_sge_bin "qrstat" "-u '*'"]
   puts $CHECK_OUTPUT $output
   wait_for_end_of_all_jobs 2

   # clear possible error states of queues
   set output [start_sge_bin "qmod" "-c $queue"]
}

proc qrdel_submit_delete_when_transfered_parallel {} {
   global ts_config
   global queue test_host pe
   global CHECK_OUTPUT 

   # cleanup from earlier checks
   delete_all_ars
   wait_for_end_of_all_jobs 60

   set ar_id [submit_ar "-q $queue -pe $pe 50 -d 3600"]
   if {$ar_id > 0} {
      # we submit sleeper jobs and delete the AR after all of them are running
      set job_script "$ts_config(product_root)/examples/jobs/sleeper.sh 1000"
      set runs 5
      while { $runs > 0 } { 
         set arguments "-o /dev/null -e /dev/null -q $queue -ar $ar_id -pe $pe 10"
         set job_id [submit_job "$arguments $job_script"]
         if {$job_id > 0} {
            trigger_scheduling
            set job_state [wait_for_jobstart $job_id "leeper" 120]
            if {$job_state == -1} {
               set runs 0
            }
         }
         incr runs -1
      }
      delete_ar $ar_id 1
   } else {
      add_proc_error "qrdel_submit_delete_when_transfered_parallel" -1 "error submitting AR"
   }

   wait_for_end_of_all_jobs 2

   # clear possible error states of queues
   set output [start_sge_bin "qmod" "-c $queue"]
}

proc submit_testars {{user ""} {additional_ar_args ""} {with_job "0"} {testar_count "4" }} {
   global CHECK_USER queue ts_config

   set arlist ""

   set arargs "$additional_ar_args -q $queue -d 3600"

   # no user specified (using local user name (starter of testsuite))
   if {$user == ""} {
      set user $CHECK_USER
   }
  
   for {set count 1} {$count <= $testar_count} {incr count +1} {
      set arresult [submit_ar $arargs "" $user]     ;# submit_ar has it's own error handling
      if {$arresult > 0 } {
         lappend arlist $arresult

         if {$with_job != 0} {
            set job_id [submit_job "-o /dev/null -j y -ar $arresult $ts_config(product_root)/examples/jobs/sleeper.sh 3600" 1 30 "" $user]
            trigger_scheduling
            wait_for_jobstart $job_id "eeper" 10
         }
      }
   }

  return $arlist
}

proc qrdel_help {} {
   global CHECK_PRODUCT_VERSION_NUMBER CHECK_OUTPUT

   set qrdel_help_lines 7

   delete_all_jobs
   wait_for_end_of_all_jobs 60

   set output [start_sge_bin "qrdel" "-help"]

   puts $CHECK_OUTPUT "qrdel output    : \n---"
   puts $CHECK_OUTPUT "$output"
   puts $CHECK_OUTPUT "---\n"
   puts $CHECK_OUTPUT "qrdel exit state: $prg_exit_state"

   if {$prg_exit_state != 0} {
      add_proc_error "qrdel_help" -1 "exit state is not 0"
   }

   set output [string trim $output]

   if {[string first $CHECK_PRODUCT_VERSION_NUMBER $output] < 0} {
      add_proc_error "qrdel_help" -1 "version string ($CHECK_PRODUCT_VERSION_NUMBER) not found"
   } 
 
   set lines [split $output "\n"]
   set nr_of_lines [llength $lines] 

   puts $CHECK_OUTPUT "Output has $nr_of_lines lines"

   if {$nr_of_lines != $qrdel_help_lines} {
      add_proc_error "qrdel_help" -1 "help output has $nr_of_lines, but expected are $qrdel_help_lines lines:\n$output"
   }
}

proc qrdel_delete_unknown_arbid {} {

   delete_all_ars
   wait_for_end_of_all_jobs 60

   # delete a unknown ar_id
   set ret [delete_ar 1 0 0 "" "" 0] 
   if {$ret != -1} {
      add_proc_error "qrdel_delete_unknown_jobid" -1 "deleting unknown advance reservation does not show an error"
   }

   # delete a ar_id = 0
   set ret [delete_ar 0 0 0 "" "" 0] 
   if {$ret != -2} {
      add_proc_error "qrdel_delete_unknown_jobid" -1 "deleting ar_id=0 does not show an error"
   }
}

proc qrdel_check_deleted_running {ars_deleted_var ars_running_var} {
   global CHECK_OUTPUT

   upvar $ars_deleted_var ars_deleted
   upvar $ars_running_var ars_running

   set timeout 60
   while {1} {
      set deleted 0
      foreach ar_id $ars_deleted {
         if {[parse_qrstat $ar_id] != 0} {
            incr deleted 1
         }
      }
 
      if {$deleted == [llength $ars_deleted]} {
         break;
      }

      if {$timeout == 0} {
         add_proc_error "qrdel_check_deleted_running" -1 "timeout while waiting for end of testars $ars_deleted"
         break  
      }
      puts -nonewline $CHECK_OUTPUT "."
      flush $CHECK_OUTPUT
      incr timeout -1
      after 1000
   }     

   # now check ars are still running
   foreach ar_id $ars_running {
      if {[parse_qrstat $ar_id] != 0} {
         add_proc_error "qrdel_check_deleted_running" -1 "not all advance reservations are running" 
      }
   } 
}

proc qrdel_all {} {
   global ts_config
   global CHECK_OUTPUT CHECK_FIRST_FOREIGN_SYSTEM_USER

   delete_all_ars
   wait_for_end_of_all_jobs 60

   set all_args "'*'"

   # submit ars to delete
   set ar_list_user1 [submit_testars] 
   puts $CHECK_OUTPUT "user 1 has ars $ar_list_user1"
 

   set ar_list_user2 [submit_testars $CHECK_FIRST_FOREIGN_SYSTEM_USER]
   puts $CHECK_OUTPUT "user 2 has ars $ar_list_user2"
 
   
   # now delete ars of user 1
   set qrdel_output [start_sge_bin "qrdel" "$all_args"]
   puts $CHECK_OUTPUT "qrdel_result = $prg_exit_state"
   puts $CHECK_OUTPUT "qrdel_output = $qrdel_output" 
   if {$prg_exit_state != 0} {
       add_proc_error "qrdel_all" -1 "could not delete ars $ar_list_user1 (exit status: $prg_exit_state) "
   }

   qrdel_check_deleted_running ar_list_user1 ar_list_user2
  
   # now submit new jobs for user 1
   set ar_list_user1 [submit_testars]  
   puts $CHECK_OUTPUT "user 1 has ars $ar_list_user1"

   # now delete jobs of user 2
   set result [start_sge_bin "qrdel" "$all_args" "" $CHECK_FIRST_FOREIGN_SYSTEM_USER]
   puts $CHECK_OUTPUT "qrdel_output = \n$result" 

   qrdel_check_deleted_running ar_list_user2 ar_list_user1

   # now delete jobs of user1
   set qrdel_output [start_sge_bin "qrdel" "$all_args"]
   puts $CHECK_OUTPUT "qrdel_result = $prg_exit_state"
   puts $CHECK_OUTPUT "qrdel_output = $qrdel_output" 
   if { $prg_exit_state != 0 } {
       add_proc_error "qrdel_all" -1 "could not delete jobs $ar_list_user1 (exit status: $prg_exit_state) "
   }

   set ar_list_user2 ""
   qrdel_check_deleted_running ar_list_user1 ar_list_user2
}

proc qrdel_uall {} {
   global CHECK_OUTPUT CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER 

   delete_all_ars
   wait_for_end_of_all_jobs 60

   set uall_args "-u '*'"
   set empty_list ""

   # submit jobs to delete
   set ar_list_user1 [submit_testars]  
   puts $CHECK_OUTPUT "user 1 has jobs $ar_list_user1"
 
   set ar_list_user2 [submit_testars $CHECK_FIRST_FOREIGN_SYSTEM_USER]
   puts $CHECK_OUTPUT "user 2 has jobs $ar_list_user2"

   # now delete all jobs as user 2 (only submit user)
   set result [start_sge_bin "qrdel" $uall_args "" $CHECK_FIRST_FOREIGN_SYSTEM_USER]
   puts $CHECK_OUTPUT "qrdel_output = \n$result" 

   # test if all jobs are still there:
   set all_jobs "$ar_list_user1 $ar_list_user2"
   puts $CHECK_OUTPUT "following jobs must be in the system: $all_jobs"
   qrdel_check_deleted_running empty_list all_jobs

   # now delete all jobs as user 1 (manager)
   set result [start_sge_bin "qrdel" $uall_args]
   puts $CHECK_OUTPUT "qrdel_output = \n$result" 

   # now check if all jobs are deleted
   qrdel_check_deleted_running all_jobs empty_list
}

proc qrdel_user_list {} {
   global CHECK_OUTPUT CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER
   global CHECK_SECOND_FOREIGN_SYSTEM_USER

   set empty_list ""

   delete_all_jobs
   wait_for_end_of_all_jobs 60

   add_user_to_access_list $CHECK_SECOND_FOREIGN_SYSTEM_USER "arusers"

   # submit jobs to delete
   set ar_list_user1 [submit_testars]  
 
   set ar_list_user2 [submit_testars $CHECK_FIRST_FOREIGN_SYSTEM_USER]

   set ar_list_user3 [submit_testars $CHECK_SECOND_FOREIGN_SYSTEM_USER]

   # now delete all jobs as user 2 (only submit user) of user 3 (only submit user)
   set result [start_sge_bin "qrdel" "-u $CHECK_SECOND_FOREIGN_SYSTEM_USER" "" $CHECK_FIRST_FOREIGN_SYSTEM_USER]

   # now delete all jobs as user 2 (only submit user) of user 1 (manager)
   set result [start_sge_bin "qrdel" "-u $CHECK_USER" "" $CHECK_FIRST_FOREIGN_SYSTEM_USER]

   # now delete all jobs as user 2 (only submit user) of user 1 && user 3
   set result [start_sge_bin "qrdel" "-u $CHECK_USER,$CHECK_SECOND_FOREIGN_SYSTEM_USER" "" $CHECK_FIRST_FOREIGN_SYSTEM_USER]

   # test if all jobs are still there:
   set all_jobs "$ar_list_user1 $ar_list_user2 $ar_list_user3"
   qrdel_check_deleted_running empty_list all_jobs

   # now delete all jobs as user 2 (only submit user) of user 2 (himself) 
   set result [start_sge_bin "qrdel" "-u $CHECK_FIRST_FOREIGN_SYSTEM_USER" "" $CHECK_FIRST_FOREIGN_SYSTEM_USER]

   set running_ars "$ar_list_user1 $ar_list_user3"
   qrdel_check_deleted_running ar_list_user2 running_ars

   # submit new jobs for user 2
   set ar_list_user2 [submit_testars $CHECK_FIRST_FOREIGN_SYSTEM_USER]
   set all_jobs "$ar_list_user1 $ar_list_user2 $ar_list_user3"

   # now delete all jobs as user 2
   set result [start_sge_bin "qrdel" "-u $CHECK_FIRST_FOREIGN_SYSTEM_USER,$CHECK_USER,$CHECK_SECOND_FOREIGN_SYSTEM_USER" "" $CHECK_FIRST_FOREIGN_SYSTEM_USER]

   # now test if his jobs are deleted and the jobs of user1 and user3 are still there
   set running_ars "$ar_list_user1 $ar_list_user3"
   qrdel_check_deleted_running ar_list_user2 running_ars

   # submit new jobs for user 2
   set ar_list_user2 [submit_testars $CHECK_FIRST_FOREIGN_SYSTEM_USER]
   set all_jobs "$ar_list_user1 $ar_list_user2 $ar_list_user3"

   # now delete all jobs as user 1 (manager)
   set qrdel_output [start_sge_bin "qrdel" "-u $CHECK_FIRST_FOREIGN_SYSTEM_USER,$CHECK_USER,$CHECK_SECOND_FOREIGN_SYSTEM_USER"]
   if { $prg_exit_state != 0 } {
       add_proc_error "qrdel_user_list" -1 "Could not delete jobs $ar_list_user1 (exit status: $prg_exit_state)"
   }

   qrdel_check_deleted_running all_jobs empty_list 

   del_user_from_access_list $CHECK_SECOND_FOREIGN_SYSTEM_USER "arusers"
}

proc qrdel_force {} {
   global ts_config test_host
   global CHECK_OUTPUT CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER 
   global CHECK_SECOND_FOREIGN_SYSTEM_USER

   set empty_list ""

   delete_all_ars
   wait_for_end_of_all_jobs 60

   # submit jobs to delete
   set ar_list_user1 [submit_testars "" "" 1]
   puts $CHECK_OUTPUT "user 1 has jobs $ar_list_user1"

   set ar_list_user2 [submit_testars $CHECK_FIRST_FOREIGN_SYSTEM_USER "" 1]
   puts $CHECK_OUTPUT "user 2 has jobs $ar_list_user2"

   # shutdown execd
   set output [start_sge_bin "qconf" "-ke $test_host"]
   puts $output
   after 10000 

   # now test if his jobs still running or pending 
   set all_jobs "$ar_list_user1 $ar_list_user2"
   qrdel_check_deleted_running empty_list all_jobs

   # delete the jobs of user1 as user1 without -f switch
   set qrdel_output [start_sge_bin "qrdel" $ar_list_user1]

   puts $CHECK_OUTPUT "qrdel_result = $prg_exit_state"
   puts $CHECK_OUTPUT "qrdel_output = $qrdel_output"

   if {$prg_exit_state != 0} {
      add_proc_error "qrdel_force" -1 "exit state is not 0"
   }    

   # delete the jobs of user2 as user2 without -f switch
   set result [start_sge_bin "qrdel" "$ar_list_user2" "" $CHECK_FIRST_FOREIGN_SYSTEM_USER]
   puts $CHECK_OUTPUT "qrdel_output = \n$result" 

   qrdel_check_deleted_running empty_list all_jobs

   startup_execd $test_host

   # wait for deletion of the advance reservation
   qrdel_check_deleted_running all_jobs empty_list

   # ok - qrdel without execd is ok, now check the -f option 

   # submit jobs to delete
   set ar_list_user1 [submit_testars "" "" 1]
   puts $CHECK_OUTPUT "user 1 has jobs $ar_list_user1"

   set ar_list_user2 [submit_testars $CHECK_FIRST_FOREIGN_SYSTEM_USER "" 1]
   puts $CHECK_OUTPUT "user 2 has jobs $ar_list_user2"

   # shutdown execd
   set output [start_sge_bin "qconf" "-ke $test_host"]
   puts $output
   after 10000 

   # now test if his jobs still running or pending 
   set all_jobs "$ar_list_user1 $ar_list_user2"
   qrdel_check_deleted_running empty_list all_jobs

   # delete the jobs of user1 as user1 with -f switch
   set qrdel_output [start_sge_bin "qrdel" "-f $ar_list_user1"]

   puts $CHECK_OUTPUT "qrdel_result = $prg_exit_state"
   puts $CHECK_OUTPUT "qrdel_output = $qrdel_output"

   if {$prg_exit_state != 0} {
      add_proc_error "qrdel_force" -1 "exit state is not 0"
   }

   # jobs of user1 should be deleted
   qrdel_check_deleted_running ar_list_user1 ar_list_user2

   # delete the jobs of user 2 as user 2 with -f switch
   set result [start_sge_bin "qrdel" "-f $ar_list_user2" "" $CHECK_FIRST_FOREIGN_SYSTEM_USER prg_exit_state 120]
   puts $CHECK_OUTPUT "qrdel_output = \n$result" 

   # jobs of user2 should be deleted
   qrdel_check_deleted_running ar_list_user2 empty_list

   # now restart execd
   startup_execd $test_host
   wait_for_load_from_all_queues 300
}
