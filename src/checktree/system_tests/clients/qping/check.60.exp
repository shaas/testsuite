#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__



# Template for testsuite check
# 
# 1) replace the following symbols by your test specific names
#    o qping   name of your test (e.g. consumable_test)
#    o 
#
# 2) set check_root_access_needs to "yes" or "no" (if you need root access)
#
# 3) set check_category
#
# 4) set check_highest_level ( e.g.: runlevel "short" has reserved values from 0 to 99 ) 
#
# 5) set check_needs (e.g.: "init_core_system" this means that this test is not 
#    started without succesfull run of "init_core_system" test
# 6) implement the default functions (e.g.: qping_init_level)
#
# 7) you can add any function name to check_functions (all function (no paramters allowed) are started 
#    within each runlevel number
#    PLEASE finish each check_function with a set_error() function call
#    PLEASE use add_proc_error() to submit errors
#    add_proc_error() is used in many testsuite standard functions, so not every 
#    function call must check the return state.
# 



# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "qping_init_level"

#****** checks/qping *******************************************************
#  NAME
#     qping -- test qping specific bugs and functionality
#
#
#  FUNCTION
#     - check qping core dump with enabled message content dump (issue 1810)
#       a) start qping -dump as root with enabled content dump to the
#          qmaster daemon
#          (SGE_QPING_OUTPUT_FORMAT environment set to s:12)
#       b) do q qping -info to the qmaster daemon
#       c) check whether a <sirm> is sent or the qpind -dump does stop with
#          segmentation fault when sirm arives.
#
#*******************************************************************************

# define test's name and run level descriptions
set check_name            "qping"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "check qping core dump with enabled message content dump (issue 1810)"
set check_description(1)  ""
set check_description(2)  ""
set check_description(3)  ""
set check_description(4)  ""
set check_description(5)  ""
set check_description(6)  ""
set check_description(7)  ""
set check_description(8)  ""




# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function qping_setup
set check_cleanup_function qping_cleanup





# define test's procedure order
set check_functions ""
lappend check_functions "qping_issue_1810"


global qping_test_hosts
global qping_saved_slot_count

proc qping_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0
      } 
      "1" {
         return -1
      }
      "2" {
         return -1
      }
      "3" {
         return -1
      }
      "4" {
         return -1
      }
      "5" {
         return -1
      }
      "6" {
         return -1
      }
      "7" {
         return -1
      }
      "8" {
         return -1
      }
   } 

   return -1  ;# no other level 
}




# -------- local test procedures: initialization------------------------------


proc qping_setup  {} {
   global CHECK_OUTPUT ts_config

   set_error 0 "ok"
}

proc qping_cleanup  {} {
   global CHECK_OUTPUT ts_config

   set_error 0 "ok"
}


proc qping_issue_1810 {} {
   global qping_test_hosts check_description CHECK_ARCH CHECK_USER
   global CHECK_OUTPUT ts_config CHECK_CORE_MASTER CHECK_ACT_LEVEL CHECK_SCRIPT_FILE_DIR


   puts $CHECK_OUTPUT $check_description($CHECK_ACT_LEVEL)

   if { $CHECK_ACT_LEVEL == 0 } {
      set host $ts_config(master_host)
      set arch [resolve_arch $host]
      set qping_path $ts_config(product_root)/bin/$arch/qping
      puts "qping path: $CHECK_OUTPUT $qping_path"

      set qping_env(SGE_QPING_OUTPUT_FORMAT) "s:12"
      set id [ open_remote_spawn_process "$host" "root" $qping_path "-dump $host $ts_config(commd_port) qmaster 1" 0 qping_env ]
      set sp_id [ lindex $id 1 ]
      set timeout 15
      set sirm_received 0
      set sim_sent 0

      while { $sirm_received == 0 } {
         expect {
            -i $sp_id full_buffer {
               set return_value -1    
               add_proc_error "qping_issue_1810" "-1" "buffer overflow please increment CHECK_EXPECT_MATCH_MAX_BUFFER value"
               break
            }
            -i $sp_id timeout {
               puts $CHECK_OUTPUT "qping_issue_1810 - timeout(1)"
               add_proc_error "qping_issue_1810" "-1" "got timeout(1) error\nexpect_out(buffer):\n\"$expect_out(buffer)\""
               break
            }
            -i $sp_id eof {
               add_proc_error "qping_issue_1810" "-1" "got eof error\nexpect_out(buffer):\n\"$expect_out(buffer)\""
               break
            }
            -i $sp_id -- "<sim version*</sim>" {
               puts $CHECK_OUTPUT $expect_out(0,string)
               puts $CHECK_OUTPUT "found sim!"
               flush $CHECK_OUTPUT
            }

            -i $sp_id -- "<sirm version*</sirm>" {
               if { $sim_sent == 1 } {
                  puts $CHECK_OUTPUT $expect_out(0,string)
                  puts $CHECK_OUTPUT "found sirm - ok"
                  flush $CHECK_OUTPUT
                  set sirm_received 1
               }
            }


            -i $sp_id "_exit_status_" {
               puts $CHECK_OUTPUT $expect_out(0,string)
               flush $CHECK_OUTPUT
               add_proc_error "qping_issue_1810" "-1" "got unexpected exit_status output:\n\"$expect_out(buffer)\""
               break
            }

            "debug_client" {
               if { $sim_sent == 0 } {
                  puts $CHECK_OUTPUT "starting standard qping -info ..."
                  set output [start_remote_prog $host "$CHECK_USER" $qping_path "-info $host $ts_config(commd_port) qmaster 1"]
                  puts $CHECK_OUTPUT $output
                  set sim_sent 1
               }
            }
         }
      }

      close_spawn_process $id
   }

   set_error 0 "ok"
}


