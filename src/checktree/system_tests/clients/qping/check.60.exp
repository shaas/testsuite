#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_highest_level
global check_init_level_procedure
global check_root_access_needs

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "qping_init_level"

#****** checks/qping *******************************************************
#  NAME
#     qping -- test qping specific bugs and functionality
#
#
#  FUNCTION
#     - check qping core dump with enabled message content dump (issue 1810)
#       a) start qping -dump as root with enabled content dump to the
#          qmaster daemon
#          (SGE_QPING_OUTPUT_FORMAT environment set to s:12)
#       b) do q qping -info to the qmaster daemon
#       c) check whether a <sirm> is sent or the qpind -dump does stop with
#          segmentation fault when sirm arives.
#
#*******************************************************************************

# define test's name and run level descriptions
set check_name            "qping"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "check qping core dump with enabled message content dump (issue 1810)"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions

# define test's procedure order
set check_functions {}
lappend check_functions "qping_issue_1810"

proc qping_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc qping_issue_1810 {} {
   global ts_config CHECK_OUTPUT CHECK_USER

   # we have to start qping as root on the master host
   set host $ts_config(master_host)
   set arch [resolve_arch $host]
   set qping_path $ts_config(product_root)/bin/$arch/qping
   puts $CHECK_OUTPUT "qping path: $qping_path"

   set qping_env(SGE_QPING_OUTPUT_FORMAT) "s:12"
   set id [open_remote_spawn_process $host "root" $qping_path "-dump $host $ts_config(commd_port) qmaster 1" 0 "" qping_env]
   set sp_id [lindex $id 1]
   set timeout 15
   set sirm_received 0
   set sim_sent 0

   while {$sirm_received == 0} {
      expect {
         -i $sp_id full_buffer {
            set return_value -1
            add_proc_error "qping_issue_1810" "-1" "buffer overflow please increment CHECK_EXPECT_MATCH_MAX_BUFFER value"
            break
         }
         -i $sp_id timeout {
            add_proc_error "qping_issue_1810" "-1" "got timeout(1) error\nexpect_out(buffer):\n\"$expect_out(buffer)\""
            break
         }
         -i $sp_id eof {
            add_proc_error "qping_issue_1810" "-1" "got eof error\nexpect_out(buffer):\n\"$expect_out(buffer)\""
            break
         }

         -i $sp_id -- "<sim version*</sim>" {
            puts $CHECK_OUTPUT $expect_out(0,string)
            puts $CHECK_OUTPUT "found sim!"
         }

         -i $sp_id -- "<sirm version*</sirm>" {
            if {$sim_sent == 1} {
               puts $CHECK_OUTPUT $expect_out(0,string)
               puts $CHECK_OUTPUT "found sirm - ok"
               set sirm_received 1
            }
         }

         -i $sp_id "_exit_status_" {
            puts $CHECK_OUTPUT $expect_out(0,string)
            add_proc_error "qping_issue_1810" "-1" "got unexpected exit_status output:\n\"$expect_out(buffer)\""
            break
         }

         "debug_client" {
            if {$sim_sent == 0} {
               puts $CHECK_OUTPUT "starting standard qping -info ..."
               set output [start_remote_prog $host "$CHECK_USER" $qping_path "-info $host $ts_config(commd_port) qmaster 1"]
               puts $CHECK_OUTPUT $output
               set sim_sent 1
            }
         }
      }
   }

   close_spawn_process $id
}

