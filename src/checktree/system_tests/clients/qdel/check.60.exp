#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

global check_functions  check_highest_level
global qdel_help_lines

set qdel_help_lines 11

lappend check_functions "qdel_delete_by_job_name"                ;# Add another case 1
lappend check_functions "qdel_delete_by_job_wildcard"            ;# Add another case 2


#                                                             max. column:     |
#****** qdel/delete_by_job_name() ******
# 
#  NAME
#     delete_by_job_name -- ??? 
#
#  SYNOPSIS
#     delete_by_job_name { { delete_name "test_job" } { testjob_count "10" } } 
#
#  FUNCTION
#    Impliment new qdel scenarios:
#     Submit $testjob_count jobs with name $delete_name
#     delete by calling qdel $delete_name .
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc delete_by_job_name { { delete_name "test_job" } { testjob_count "10" } } {

   global CHECK_PRODUCT_ROOT queue hold_state pending_state CHECK_TESTSUITE_ROOT
   global CHECK_OUTPUT CHECK_ARCH CHECK_HOST ts_config
   global queue CHECK_HOST CHECK_USER actual_host

   set hostname [lindex $ts_config(execd_nodes) 0]
   set arch [resolve_arch $hostname]

   set qdel_program "$CHECK_PRODUCT_ROOT/bin/$arch/qdel"
   set qstat_program "$CHECK_PRODUCT_ROOT/bin/$arch/qstat"

   # submit jobs to delete
   set job_args "-o /dev/null -e /dev/null"

   # submit jobs with name "test_job" 
   for {set count7 1} {$count7 <= $testjob_count} {incr count7 +1} {
      set job_id7 [ submit_job "$job_args -N test_job $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 3000"  ] 
   }
   #puts $CHECK_OUTPUT "qsub_result = $job_id7"

   # submit jobs with name "test_do_not_delete"
  
   for {set count8 1} {$count8 <= $testjob_count} {incr count8 +1} {
      set job_id8 [ submit_job "$job_args -N test_do_not_delete $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 3000"  ] 
   }

   # Now delete the jobs with name "$delete_name"
   set result9 [ start_remote_prog $hostname $CHECK_USER $qdel_program "$delete_name" ]
   # set catch_result9 [ catch { eval exec  "$qdel_program $delete_name" } result9 ]

   # Sleep a little
   sleep 10

   # Now check what the qstat looks like

   set result10 [ start_remote_prog $hostname $CHECK_USER $qstat_program "" ]

   # Check that no jobs with name "$delete_name" are still around, but that
   # jobs with name "test_do_not_delete" are

   set string1 [translate $hostname 0 1 0 "$delete_name"]
   set string2 [translate $hostname 0 1 0 "test_do_no"]
  

   if { ( [ string first "$string1"  $result10 ] < 0 ) &&
        ( [ string first "$string2"  $result10 ] >= 0 ) } {
      return 0
   } else {
      return -1
   }
	
}

#****** qdel/qdel_delete_by_job_name() ******
#
#  NAME
#     qdel_delete_by_job_name -- ???
#
#  SYNOPSIS
#     qdel_delete_by_job_name {}
#     invoke delete_by_job_name with "test_job"
#
#  FUNCTION
#    Impliment new qdel scenarios:
#     1) Submit 10 jobs with name "test_job",
#     delete by calling qdel "test_job". 10 is the default
#     number of jobs
#
#  INPUTS
#
#  RESULT
#     ???
#
#  EXAMPLE
#     ???
#
#  NOTES
#     ???
#
#  BUGS
#     ???
#
#  SEE ALSO
#     ???/???
#*******************************

proc qdel_delete_by_job_name {} {

   global CHECK_OUTPUT check_highest_level

   set delete_by_job_name_return [delete_by_job_name]
   #puts $CHECK_OUTPUT "return from delete_by_job_name is $delete_by_job_name_return"

   if { $delete_by_job_name_return == 0 } {
      set_error 0 "ok"
   } else {
      set_error -1 "Extended case 1 of qdel failed"
   }
   delete_all_jobs

}

#                                                             max. column:     |
#****** qdel/qdel_delete_by_job_wildcard() ******
# 
#  NAME
#     qdel_delete_by_job_wildcard -- ??? 
#
#  SYNOPSIS
#     qdel_delete_by_job_wildcard { } 
#     invoke delete_by_job_name with "test_j*"
#
#  FUNCTION
#
#     2) Submit some jobs with name "test_job", some with name "test_do_not_delete",
#     delete "test_j*", make sure all "test_job" are gone,
#     test_do_not_delete" still there. ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qdel_delete_by_job_wildcard {} {

   global CHECK_OUTPUT check_highest_level

   set delete_by_job_wildcard_return [delete_by_job_name "test_j*"]
   #puts $CHECK_OUTPUT "return from delete_by_job_name is $delete_by_job_wildcard_return"

   if { $delete_by_job_wildcard_return == 0 } {
      set_error 0 "ok"
   } else {
      set_error -1 "Extended case 2 of qdel failed"
   }
   delete_all_jobs

}

