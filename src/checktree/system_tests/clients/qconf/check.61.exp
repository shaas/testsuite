#!/vol2/TCL_TK/glinux/bin/expect
# global variables ... (defined in main check routine, but you can use it)
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_functions 

#### define test's procedure order
lappend check_functions "qconf_add_rqs";           # add resource quota set
lappend check_functions "qconf_modify_rqs";        # modify resource quota set
lappend check_functions "qconf_modifyreplace_rqs"; # modify/replace resource quota set
lappend check_functions "qconf_remove_rqs";        # delete resource quota set
lappend check_functions "qconf_dynamic_limit";      # add a dynamic limit
lappend check_functions "qconf_rqs_Xattr";          # resource quota set Xattr
lappend check_functions "qconf_rqs_rattr_qmaster_dump"; # verify error handling
lappend check_functions "qconf_issue_2383" ;# TS case for IZ 2383

global rqs_name_fast
global rqs_name_cli

proc qconf_add_rqs {} {
   global ts_config env rqs_name_fast rqs_name_cli
   global CHECK_OUTPUT CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER

   set rqs_name_fast "qconf_rqs_fast"
   set rqs_name_cli "qconf_rqs_cli"
   set rqs_name_invalid "qconf_rqs_invalid"

   set rules ""
   lappend rules "to slots=10"

   # Add resource quota sets fast
   set rqs_charray($rqs_name_fast,limit) "$rules"
   set result [add_rqs rqs_charray]

   # Add resource quota set from CLI
   unset rqs_charray
   set rqs_charray($rqs_name_cli,limit) "$rules"
   set result [add_rqs rqs_charray 0]

   # Try to add invalid fast 
   set rules ""
   lappend rules "user bla to slots=10"
   unset rqs_charray
   set rqs_charray($rqs_name_invalid,limit) "$rules"
   set result [add_rqs rqs_charray 1 "" "" 0]
   if { $result != -2 } {
      add_proc_error "qconf_add_rqs" -1 "qconf -Arqs with invalid RQS returned wrong message"
   }
   if { [get_rqs tmp_rqs_charray $rqs_name_invalid  "" "" 0] == 0} {
      add_proc_error "qconf_add_rqs" -1 "qconf -Arqs added invalid RQS"
      del_rqs $rqs_name_invalid
   }

   # Try to add invalid CLI
   set result [add_rqs rqs_charray 0 "" "" 0]
   if { [get_rqs tmp_rqs_charray $rqs_name_invalid "" "" 0] == 0} {
      add_proc_error "qconf_add_rqs" -1 "qconf -arqs added invalid RQS"
      del_rqs $rqs_name_invalid
   }

   # Try to create resource quota set with insufficient permissions
   # - as non admin user
   # - from non admin host
   set rqs_name "non_admin_user_rqs"
   set rules ""
   lappend rules "to slots=10"

   set ret [add_rqs rqs_charray  1 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER 0]
   if {$ret != -210} {
      add_proc_error "qconf_add_rqs" -1 "qconf -Arqs should have failed for user $CHECK_FIRST_FOREIGN_SYSTEM_USER"
      del_rqs $rqs_name
   }
   set non_cluster_host [host_conf_get_unused_host]
   if {$non_cluster_host != ""} {
      set ret [add_rqs rqs_charray  1 $non_cluster_host "" 0]
      if {![check_for_non_cluster_host_error $ret "any"]} {
         add_proc_error "qconf_add_rqs" -1 "qconf -Arqs should have failed on host $non_cluster_host"
      }
   }
}

proc qconf_modify_rqs {} {
   global ts_config env rqs_name_fast rqs_name_cli
   global CHECK_OUTPUT CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER

   get_rqs_list old_rqs
   set old_rqs_count [llength $old_rqs]

   # Modify resource quota sets fast
   set rules     ""
   lappend rules "users * projects * hosts * pes * queues * to arch=sol-sparc64"
   lappend rules "users * projects * hosts * pes * queues * to arch=sol-amd64"
   lappend rules "users * projects * hosts * pes * to arch=sol-amd64"
   lappend rules "users * projects * hosts * to arch=sol-amd64"
   lappend rules "users * projects * to arch=sol-amd64"
   lappend rules "users * to arch=sol-amd64"
   lappend rules "to arch=sol-amd64"

   set new_rqs_charray($rqs_name_fast,limit) "$rules"
   set result [mod_rqs new_rqs_charray "$rqs_name_fast"]

   get_rqs_list result
   set new_rqs_count [llength $result]

   if { $old_rqs_count != $new_rqs_count } {
      add_proc_error "qconf_modify_rqs" -1 "modify fast replaced wrongly all resource quota sets"
   }

   # Modify from CLI
   unset new_rqs_charray
   set new_rqs_charray($rqs_name_cli,limit) "$rules"
   set result [mod_rqs new_rqs_charray "$rqs_name_cli" 0]

   get_rqs_list result
   set new_rqs_count [llength $result]

   if { $old_rqs_count != $new_rqs_count } {
      add_proc_error "qconf_modify_rqs" -1 "modify cli replaced wrongly all resource quota sets"
   }

   # Modify unknown rqs
   unset new_rqs_charray
   set new_rqs_charray("unknown_rqs",limit) "$rules"
   set result [mod_rqs new_rqs_charray "unknown_rqs" 1 "" "" 0]
   if { $result == 0 } {
      add_proc_error "qconf_modify_rqs" -1 "no error was reported for modifing unknown rqs"
   }

   # try to modify resource quota set with insufficient permissions
   # - as non admin user
   # - from non admin host
   unset new_rqs_charray
   set rules ""
   lappend rules "to slots=10"
   set new_rqs_charray($rqs_name_fast,limit) "$rules"
   set ret [mod_rqs new_rqs_charray "$rqs_name_fast" 1 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER 0]
   if {$ret != -210} {
      add_proc_error "qconf_modify_rqs" -1 "qconf -Mrqs should have failed for user $CHECK_FIRST_FOREIGN_SYSTEM_USER"
   }
   set non_cluster_host [host_conf_get_unused_host]
   if {$non_cluster_host != ""} {
      set ret [mod_rqs new_rqs_charray "$rqs_name_fast" 1 $non_cluster_host "" 0]
      if {![check_for_non_cluster_host_error $ret "any"]} {
         add_proc_error "qconf_modify_rqs" -1 "qconf -Mrqs should have failed on host $non_cluster_host"
      }
   }

   # try to enter duplicate rqs names - they have to be rejected
   set filename [get_tmp_file_name]
   set fd [open $filename "w"]
   puts $fd "{"
   puts $fd "name $rqs_name_fast"
   puts $fd "description first instance of $rqs_name_fast"
   puts $fd "enabled true"
   puts $fd "limit to slots=10"
   puts $fd "}"
   puts $fd "{"
   puts $fd "name $rqs_name_fast"
   puts $fd "description second instance of $rqs_name_fast"
   puts $fd "enabled true"
   puts $fd "limit to slots=20"
   puts $fd "}"
   close $fd
   set result [start_sge_bin "qconf" "-Mrqs $filename" $ts_config(master_host)]

   if {$prg_exit_state == 0} {
      add_proc_error "qconf_modify_rqs" -1 "qconf should have failed:\n$result"
   } else {
      set expected_message [translate_macro MSG_RQS_REQUEST_DUPLICATE_NAME_S $rqs_name_fast]
      if {[string match "*$expected_message*" $result] == 0} {
         add_proc_error "qconf_modify_rqs" -1 "qconf should have failed with the error message\n$expected_message\nbut returned\n$result"
      }
   }
}

proc qconf_modifyreplace_rqs {} {
   global ts_config env
   global CHECK_OUTPUT CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER

   get_rqs old_rqs_config

   get_rqs_list result
   set old_rqs_count [llength $result]

   set rqs_name "qconf_modifyreplace_rqs"

   set rules     ""
   lappend rules "to arch=sol-amd64"
   set new_rqs_charray($rqs_name,limit) "$rules"

   # Replace from CLI
   set result [mod_rqs new_rqs_charray "" 0]

   get_rqs_list result
   set new_rqs_count [llength $result]

   if { $old_rqs_count == $new_rqs_count } {
      add_proc_error "qconf_modifyreplace_rqs" -1 "modify replace fast doesn't replaced all resource quota sets"
   }

   # Replace resource quota sets fast
   set result [mod_rqs old_rqs_config ""]

   get_rqs_list result
   set new_rqs_count [llength $result]

   if { $old_rqs_count != $new_rqs_count } {
      add_proc_error "qconf_modifyreplace_rqs" -1 "modify replace cli doesn't replaced all resource quota sets"
   }

   # try to replace resource quota set with insufficient permissions
   # - as non admin user
   # - from non admin host
   set ret [mod_rqs old_rqs_config "" 1 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER 0]
   if {$ret != -210} {
      add_proc_error "qconf_modifyreplace_rqs" -1 "qconf -Mrqs should have failed for user $CHECK_FIRST_FOREIGN_SYSTEM_USER"
   }
   set non_cluster_host [host_conf_get_unused_host]
   if {$non_cluster_host != ""} {
      set ret [mod_rqs old_rqs_config "" 1 $non_cluster_host "" 0]
      if {![check_for_non_cluster_host_error $ret "any"]} {
         add_proc_error "qconf_modifyreplace_rqs" -1 "qconf -Mrqs should have failed on host $non_cluster_host"
      }
   }
}

proc qconf_remove_rqs {} {
   global ts_config env rqs_name_fast rqs_name_cli
   global CHECK_OUTPUT CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER

   # try to delete resource quota set with insufficient permissions
   # - as non admin user
   # - from non admin host
   set ret [del_rqs $rqs_name_fast "" $CHECK_FIRST_FOREIGN_SYSTEM_USER 0]
   if {$ret != -210} {
      add_proc_error "qconf_remove_rqs" -1 "qconf -drqs should have failed for user $CHECK_FIRST_FOREIGN_SYSTEM_USER"
   }
   set non_cluster_host [host_conf_get_unused_host]
   if {$non_cluster_host != ""} {
      set ret [del_rqs $rqs_name_fast $non_cluster_host "" 0]
      if {![check_for_non_cluster_host_error $ret "admin"]} {
         add_proc_error "qconf_remove_rqs" -1 "qconf -drqs should have failed on host $non_cluster_host"
      }
   }

   # delete rqs the first time, should be OK 
   puts $CHECK_OUTPUT "deleting resource quota set \"$rqs_name_fast\""
   del_rqs $rqs_name_fast
   puts $CHECK_OUTPUT "deleting resource quota set \"$rqs_name_cli\""
   del_rqs $rqs_name_cli

   # delete rqs the second time, should be not OK
   puts $CHECK_OUTPUT "deleting resource quota set \"$rqs_name_fast\" the second time"
   set result [del_rqs $rqs_name_fast "" "" 0]
   if {$result == 0} {
      add_proc_error "qconf_remove_rqs" -1 "qconf -drqs shows no error for invalid rule set"
   }
}

proc qconf_dynamic_limit {} {
   global ts_config env
   global CHECK_OUTPUT CHECK_USER

   set rqs_name "dynamic_rqs"

   set rules ""
   lappend rules "hosts {*} to slots=\$num_proc*2"

   # Add resource quota sets with dynamic limit
   set rqs_charray($rqs_name,limit) "$rules"
   set result [add_rqs rqs_charray]

   # Try to add invalid dynamic limit (1)
   set rules ""
   lappend rules "hosts * to slots=\$num_proc*2"

   unset rqs_charray
   set rqs_charray($rqs_name,limit) "$rules"
   set ret [mod_rqs rqs_charray "$rqs_name" 1 "" "" 0]
   if { $ret == 0 } {
      add_proc_error "qconf_dynamic_limit" -1 "invalid dynamic limit was accepted (1)"
   }

   # Try to add invalid dynamic limit (2)
   set rules ""
   lappend rules "hosts {*} to slots=\$arch*2"

   unset rqs_charray
   set rqs_charray($rqs_name,limit) "$rules"
   set ret [mod_rqs rqs_charray "$rqs_name" 1 "" "" 0]
   if { $ret == 0 } {
      add_proc_error "qconf_dynamic_limit" -1 "invalid dynamic limit was accepted (2)"
   }

   del_rqs $rqs_name
}

proc qconf_rqs_Xattr {} {
   global ts_config CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER

   # setup two resource quota sets
   set rqs_name1 "qconf_rqs_Xattr1"
   set rqs_name2 "qconf_rqs_Xattr2"
   set object_name "resource_quota"
   set rules ""
   lappend rules "name rule_1 users $CHECK_USER to slots=0"
   lappend rules "name rule_2 users $CHECK_FIRST_FOREIGN_SYSTEM_USER to slots=0"
   lappend rules "name rule_3 to slots=0"

   set rqs_charray($rqs_name1,description) "none"
   set rqs_charray($rqs_name1,enabled) "false"
   set rqs_charray($rqs_name1,limit) "$rules"
   set rqs_charray($rqs_name2,description) "none"
   set rqs_charray($rqs_name2,enabled) "false"
   set rqs_charray($rqs_name2,limit) "$rules"

   set result [add_rqs rqs_charray]

   # test mattr for name
   set result [mod_attr "$object_name" "name" "bla" "$rqs_name1" 0 "" "" 0]
   if { $result != -2 } {
      add_proc_error "qconf_rqs_Xattr" -1 "qconf -mattr $object_name name bla $rqs_name1 should have failed"
   }

   # test mattr for enabled
   set result [mod_attr "$object_name" "enabled" "true" "$rqs_name1" 0]
   get_rqs modified_rqs
   if { $modified_rqs($rqs_name1,enabled) == "FALSE" || $modified_rqs($rqs_name2,enabled) == "TRUE" } {
      add_proc_error "qconf_rqs_Xattr" -1 "qconf -mattr $object_name enabled true $rqs_name1 failed"
   }

   # test mattr for description
   set descr "qconf xattr test description"
   set result [mod_attr "$object_name" "description" "\"$descr\"" "$rqs_name2" 0]
   get_rqs modified_rqs
   if { $modified_rqs($rqs_name1,description) == $descr || $modified_rqs($rqs_name2,description) != $descr } {
      add_proc_error "qconf_rqs_Xattr" -1 "qconf -mattr $object_name description \"$descr\" $rqs_name1 failed"
   }

   # test mattr for limit
   set result [mod_attr "$object_name" "limit" "slots=100" "$rqs_name2/3" 0]
   get_rqs modified_rqs
   set org_value [lindex $rqs_charray($rqs_name2,limit) 2]
   set new_value [lindex $modified_rqs($rqs_name2,limit) 2]
   if { $org_value == $new_value } {
      add_proc_error "qconf_rqs_Xattr" -1 "qconf -mattr $object_name limit slots=3 $rqs_name1/3 failed"
   }

   # test aattr for limit
   set result [add_attr "$object_name" "limit" "arch=bla" "$rqs_name1/rule_2" 0]
   get_rqs modified_rqs
   set org_value [lindex $rqs_charray($rqs_name1,limit) 1]
   set new_value [lindex $modified_rqs($rqs_name1,limit) 1]
   if { $org_value == $new_value } {
      add_proc_error "qconf_rqs_Xattr" -1 "qconf -aattr $object_name limit arch=bla $rqs_name1/rule_2 failed"
   }

   # rattr/dattr are not rqs specific and need to be tested generally for all objects
   
   # cleanup
   del_rqs $rqs_name1
   del_rqs $rqs_name2
}

proc qconf_rqs_rattr_qmaster_dump {} {
   global ts_config env
   global CHECK_OUTPUT CHECK_USER

   set object_name "resource_quota"

   set rqs_name "qconf_rqs_Xattr_qmaster_dump"
   set rules ""
   lappend rules "hosts {*} to slots=\$num_proc*2"

   set rqs_charray($rqs_name,enabled) "true"
   set rqs_charray($rqs_name,limit) "$rules"

   set result [add_rqs rqs_charray]

   set job_options "-o /dev/null -j y -t 1:10 $ts_config(product_root)/examples/jobs/sleeper.sh 10000"
   set job_id [submit_job "$job_options"]
   trigger_scheduling
   wait_for_jobstart $job_id "leeper" 20

   after 2000
   set result [mod_attr "$object_name" "limit" "slots=\$num_proc" "$rqs_name" 0 "" "" 0]
   after 2000
   if {[is_qmaster_alive $ts_config(master_host) [get_qmaster_spool_dir]] == 0} {
      add_proc_error "qconf_rqs_rattr_qmaster_dump" -1 "modattr with invalid rule name crashed qmaster"
      startup_qmaster 0
   }

   delete_job $job_id

   del_rqs $rqs_name
}


############# qconf/qconf_issue_2383() *********************************************
#  NAME
#     issue_2383() -- test qconf -mc with incorrect complex
#
#  SYNOPSIS
#     issue_2383 { }
#
#  FUNCTION
#     Test adding incorrect complex with qconf -mc
#
#     The complex is defined as
#     newone            new      STRING      ==    NO          NO         NONE
#     so it is missing the urgency value. It is a negative test.
#     The install should report message MSG_CENTRY_NULL_URGENCY
#
#*******************************************************************************
proc qconf_issue_2383 {} {
   global CHECK_OUTPUT  ts_config
    
   # Create a faulty complex. note that there is NO urgency value

   set wrong_complex(newone) "new STRING  ==  NO  NO NONE "   
   # Call set_complex with null_urgency set to "1", the last var
   set result [set_complex wrong_complex ]
      
   # check that we get the correct error message MSG_CENTRY_NULL_URGENCY
   if {$result != -6 } {
      add_proc_error "issue_2383" -3 "qconf -mc test for IZ 2383 failed"
   } else {
      puts $CHECK_OUTPUT " qconf -mc test for IZ 2383 passed \n"
   }

}

