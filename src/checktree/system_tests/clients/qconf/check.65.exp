#!/vol2/TCL_TK/glinux/bin/expect
# global variables ... (defined in main check routine, but you can use it)
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_functions 

# define test's procedure order
lappend check_functions "qconf_add_lirs";           # add limitation rule set
lappend check_functions "qconf_modify_lirs";        # modify limitation rule set
lappend check_functions "qconf_modifyreplace_lirs"; # modify/replace limitation rule set
lappend check_functions "qconf_remove_lirs";        # delete limitation rule set
lappend check_functions "qconf_dynamic_limit";      # add a dynamic limit
lappend check_functions "qconf_rqs_Xattr";          # resource quota set Xattr

global lirs_name_fast
global lirs_name_cli

proc qconf_add_lirs {} {
   global ts_config env lirs_name_fast lirs_name_cli
   global CHECK_OUTPUT CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER

   set lirs_name_fast "qconf_lirs_fast"
   set lirs_name_cli "qconf_lirs_cli"

   set rules ""
   lappend rules "to slots=10"

   # Add limitation rule sets fast
   set lirs_charray($lirs_name_fast,limit) "$rules"
   set result [add_lirs lirs_charray]

   # Add limitation rule set from CLI
   unset lirs_charray
   set lirs_charray($lirs_name_cli,limit) "$rules"
   set result [add_lirs lirs_charray 0]

   # try to create resource quota set with insufficient permissions
   # - as non admin user
   # - from non admin host
   set lirs_name "non_admin_user_lirs"
   set rules ""
   lappend rules "to slots=10"

   set ret [add_lirs lirs_charray  1 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER 0]
   if {$ret != -210} {
      add_proc_error "qconf_add_lirs" -1 "qconf -Alrs should have failed for user $CHECK_FIRST_FOREIGN_SYSTEM_USER"
      del_lirs $lirs_name
   }
   set non_cluster_host [host_conf_get_unused_host]
   set ret [add_lirs lirs_charray  1 $non_cluster_host "" 0]
   if {![check_for_non_cluster_host_error $ret "any"]} {
      add_proc_error "qconf_add_lirs" -1 "qconf -Alrs should have failed on host $non_cluster_host"
   }
   set_error 0 "ok"
}

proc qconf_modify_lirs {} {
   global ts_config env lirs_name_fast lirs_name_cli
   global CHECK_OUTPUT CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER

   get_lirs_list old_lirs
   set old_lirs_count [llength $old_lirs]

   # Modify limitation rule sets fast
   set rules     ""
   lappend rules "users * projects * hosts * pes * queues * to arch=sol-sparc64"
   lappend rules "users * projects * hosts * pes * queues * to arch=sol-amd64"
   lappend rules "users * projects * hosts * pes * to arch=sol-amd64"
   lappend rules "users * projects * hosts * to arch=sol-amd64"
   lappend rules "users * projects * to arch=sol-amd64"
   lappend rules "users * to arch=sol-amd64"
   lappend rules "to arch=sol-amd64"

   set new_lirs_charray($lirs_name_fast,limit) "$rules"
   set result [mod_lirs new_lirs_charray "$lirs_name_fast"]

   get_lirs_list result
   set new_lirs_count [llength $result]

   if { $old_lirs_count != $new_lirs_count } {
      add_proc_error "qconf_modify_lirs" -1 "modify fast replaced wrongly all limitation rule sets"
   }

   # Modify from CLI
   unset new_lirs_charray
   set new_lirs_charray($lirs_name_cli,limit) "$rules"
   set result [mod_lirs new_lirs_charray "$lirs_name_cli" 0]

   get_lirs_list result
   set new_lirs_count [llength $result]

   if { $old_lirs_count != $new_lirs_count } {
      add_proc_error "qconf_modify_lirs" -1 "modify cli replaced wrongly all limitation rule sets"
   }

   # Modify unknown lirs
   unset new_lirs_charray
   set new_lirs_charray("unknown_lirs",limit) "$rules"
   set result [mod_lirs new_lirs_charray "unknown_lirs" 1 "" "" 0]
   if { $result == 0 } {
      add_proc_error "qconf_modify_lirs" -1 "no error was reported for modifing unknown lirs"
   }

   # try to modify resource quota set with insufficient permissions
   # - as non admin user
   # - from non admin host
   unset new_lirs_charray
   set rules ""
   lappend rules "to slots=10"
   set new_lirs_charray($lirs_name_fast,limit) "$rules"
   set ret [mod_lirs new_lirs_charray "$lirs_name_fast" 1 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER 0]
   if {$ret != -210} {
      add_proc_error "qconf_modify_lirs" -1 "qconf -Mlrs should have failed for user $CHECK_FIRST_FOREIGN_SYSTEM_USER"
   }
   set non_cluster_host [host_conf_get_unused_host]
   set ret [mod_lirs new_lirs_charray "$lirs_name_fast" 1 $non_cluster_host "" 0]
   if {![check_for_non_cluster_host_error $ret "any"]} {
      add_proc_error "qconf_modify_lirs" -1 "qconf -Mlrs should have failed on host $non_cluster_host"
   }
   set_error 0 "ok"
}

proc qconf_modifyreplace_lirs {} {
   global ts_config env
   global CHECK_OUTPUT CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER

   get_lirs old_lirs_config

   get_lirs_list result
   set old_lirs_count [llength $result]

   set lirs_name "qconf_modifyreplace_lirs"

   set rules     ""
   lappend rules "to arch=sol-amd64"
   set new_lirs_charray($lirs_name,limit) "$rules"

   # Replace from CLI
   set result [mod_lirs new_lirs_charray "" 0]

   get_lirs_list result
   set new_lirs_count [llength $result]

   if { $old_lirs_count == $new_lirs_count } {
      add_proc_error "qconf_modifyreplace_lirs" -1 "modify replace fast doesn't replaced all limitation rule sets"
   }

   # Replace limitation rule sets fast
   set result [mod_lirs old_lirs_config ""]

   get_lirs_list result
   set new_lirs_count [llength $result]

   if { $old_lirs_count != $new_lirs_count } {
      add_proc_error "qconf_modifyreplace_lirs" -1 "modify replace cli doesn't replaced all limitation rule sets"
   }

   # try to replace resource quota set with insufficient permissions
   # - as non admin user
   # - from non admin host
   set ret [mod_lirs old_lirs_config "" 1 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER 0]
   if {$ret != -210} {
      add_proc_error "qconf_modifyreplace_lirs" -1 "qconf -Mlrs should have failed for user $CHECK_FIRST_FOREIGN_SYSTEM_USER"
   }
   set non_cluster_host [host_conf_get_unused_host]
   set ret [mod_lirs old_lirs_config "" 1 $non_cluster_host "" 0]
   if {![check_for_non_cluster_host_error $ret "any"]} {
      add_proc_error "qconf_modifyreplace_lirs" -1 "qconf -Mlrs should have failed on host $non_cluster_host"
   }

   set_error 0 "ok"
}

proc qconf_remove_lirs {} {
   global ts_config env lirs_name_fast lirs_name_cli
   global CHECK_OUTPUT CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER

   # try to delete resource quota set with insufficient permissions
   # - as non admin user
   # - from non admin host
   set ret [del_lirs $lirs_name_fast "" $CHECK_FIRST_FOREIGN_SYSTEM_USER 0]
   if {$ret != -210} {
      add_proc_error "qconf_remove_lirs" -1 "qconf -dlrs should have failed for user $CHECK_FIRST_FOREIGN_SYSTEM_USER"
   }
   set non_cluster_host [host_conf_get_unused_host]
   set ret [del_lirs $lirs_name_fast $non_cluster_host "" 0]
   if {![check_for_non_cluster_host_error $ret "admin"]} {
      add_proc_error "qconf_remove_lirs" -1 "qconf -dlrs should have failed on host $non_cluster_host"
   }

   # delete lirs the first time, should be OK 
   puts $CHECK_OUTPUT "deleting limitation rule set \"$lirs_name_fast\""
   del_lirs $lirs_name_fast
   puts $CHECK_OUTPUT "deleting limitation rule set \"$lirs_name_cli\""
   del_lirs $lirs_name_cli

   # delete lirs the second time, should be not OK
   puts $CHECK_OUTPUT "deleting limitation rule set \"$lirs_name_fast\" the second time"
   set result [del_lirs $lirs_name_fast "" "" 0]
   if {$result == 0} {
      add_proc_error "qconf_remove_lirs" -1 "qconf -dlrs shows no error for invalid rule set"
   }

   set_error 0 "ok"
}

proc qconf_dynamic_limit {} {
   global ts_config env
   global CHECK_OUTPUT CHECK_USER

   set lirs_name "dynamic_lirs"

   set rules ""
   lappend rules "hosts `*` to slots=\$num_proc*2"

   # Add limitation rule sets with dynamic limit
   set lirs_charray($lirs_name,limit) "$rules"
   set result [add_lirs lirs_charray]

   # Try to add invalid dynamic limit (1)
   set rules ""
   lappend rules "hosts * to slots=\$num_proc*2"

   unset lirs_charray
   set lirs_charray($lirs_name,limit) "$rules"
   set ret [mod_lirs lirs_charray "$lirs_name" 1 "" "" 0]
   if { $ret == 0 } {
      add_proc_error "qconf_dynamic_limit" -1 "invalid dynamic limit was accepted (1)"
   }

   # Try to add invalid dynamic limit (2)
   set rules ""
   lappend rules "hosts `*` to slots=\$arch*2"

   unset lirs_charray
   set lirs_charray($lirs_name,limit) "$rules"
   set ret [mod_lirs lirs_charray "$lirs_name" 1 "" "" 0]
   if { $ret == 0 } {
      add_proc_error "qconf_dynamic_limit" -1 "invalid dynamic limit was accepted (2)"
   }

   del_lirs $lirs_name
   
   set_error 0 "ok"
}

proc qconf_rqs_Xattr {} {
   global ts_config CHECK_USER CHECK_FIRST_FOREIGN_SYSTEM_USER

   # setup two resource quota sets
   set lirs_name1 "qconf_rqs_Xattr1"
   set lirs_name2 "qconf_rqs_Xattr2"
   set object_name "limitation_ruleset"
   set rules ""
   lappend rules "name rule_1 users $CHECK_USER to slots=0"
   lappend rules "name rule_2 users $CHECK_FIRST_FOREIGN_SYSTEM_USER to slots=0"
   lappend rules "name rule_3 to slots=0"

   set lirs_charray($lirs_name1,description) "none"
   set lirs_charray($lirs_name1,enabled) "false"
   set lirs_charray($lirs_name1,limit) "$rules"
   set lirs_charray($lirs_name2,description) "none"
   set lirs_charray($lirs_name2,enabled) "false"
   set lirs_charray($lirs_name2,limit) "$rules"

   set result [add_lirs lirs_charray]

   # test mattr for name
   set result [mod_attr "$object_name" "name" "bla" "$lirs_name1" 0 "" "" 0]
   if { $result != -2 } {
      add_proc_error "qconf_rqs_Xattr" -1 "qconf -mattr $object_name name bla $lirs_name1 should have failed"
   }

   # test mattr for enabled
   set result [mod_attr "$object_name" "enabled" "true" "$lirs_name1" 0]
   get_lirs modified_lirs
   if { $modified_lirs($lirs_name1,enabled) == "FALSE" || $modified_lirs($lirs_name2,enabled) == "TRUE" } {
      add_proc_error "qconf_rqs_Xattr" -1 "qconf -mattr $object_name enabled true $lirs_name1 failed"
   }

   # test mattr for description
   set descr "qconf xattr test description"
   set result [mod_attr "$object_name" "description" "\"$descr\"" "$lirs_name2" 0]
   get_lirs modified_lirs
   if { $modified_lirs($lirs_name1,description) == $descr || $modified_lirs($lirs_name2,description) != $descr } {
      add_proc_error "qconf_rqs_Xattr" -1 "qconf -mattr $object_name description \"$descr\" $lirs_name1 failed"
   }

   # test mattr for limit
   set result [mod_attr "$object_name" "limit" "slots=100" "$lirs_name2/3" 0]
   get_lirs modified_lirs
   set org_value [lindex $lirs_charray($lirs_name2,limit) 2]
   set new_value [lindex $modified_lirs($lirs_name2,limit) 2]
   if { $org_value == $new_value } {
      add_proc_error "qconf_rqs_Xattr" -1 "qconf -mattr $object_name limit slots=3 $lirs_name1/3 failed"
   }

   # test aattr for limit
   set result [add_attr "$object_name" "limit" "arch=bla" "$lirs_name1/rule_2" 0]
   get_lirs modified_lirs
   set org_value [lindex $lirs_charray($lirs_name1,limit) 1]
   set new_value [lindex $modified_lirs($lirs_name1,limit) 1]
   if { $org_value == $new_value } {
      add_proc_error "qconf_rqs_Xattr" -1 "qconf -aattr $object_name limit arch=bla $lirs_name1/rule_2 failed"
   }

   # rattr/dattr are not lirs specific and need to be tested generally for all objects
   
   # cleanup
   del_lirs $lirs_name1
   del_lirs $lirs_name2

   set_error 0 "ok"
}
