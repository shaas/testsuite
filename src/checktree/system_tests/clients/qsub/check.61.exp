#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

lappend check_functions "qsub_wd"         ;# test the -wd <dir>/-cwd options
lappend check_functions "check_qsub_ts_iz_145" ; # Testcase for TS IZ 145
lappend check_functions "check_sync_failover" ;# Testcase for TS IZ 3



#****** qsub/qsub_wd() ******
# 
#  NAME
#     qsub_wd -- test if -wd/-cwd work
#
#  SYNOPSIS
#     qsub_wd { } 
#
#*******************************
proc qsub_wd {} {
   global ts_config

   # Set a directory
   set wdir "/tmp"
   set cwdir [pwd]

   # Test1 -wd $wdir
   set jobargs "-h -wd $wdir -o /dev/null -j y $ts_config(product_root)/examples/jobs/sleeper.sh 90"
   set hold_job1 [submit_job $jobargs 1 60 "" "" $cwdir 1]
   get_qstat_j_info $hold_job1
   if {[string compare "$qstat_j_info(cwd)" "$wdir"] != 0} {
      set error_text "qsub did not set the correct working dir(1): $wdir != $qstat_j_info(cwd)\n"
      ts_log_severe $error_text
   }
   delete_job $hold_job1

   # Test2 -cwd
   set jobargs "-h -cwd -o /dev/null -j y $ts_config(product_root)/examples/jobs/sleeper.sh 90"
   set hold_job1 [submit_job $jobargs 1 60 "" "" $cwdir 1]
   get_qstat_j_info $hold_job1
   if {[string compare "$qstat_j_info(cwd)" "$cwdir"] != 0} {
      set error_text "qsub did not set the correct working dir(2): $cwdir != $qstat_j_info(cwd)\n"
      ts_log_severe $error_text
   }
   delete_job $hold_job1

   # Test3 -cwd -wd $wdir
   set jobargs "-h -cwd -wd $wdir -o /dev/null -j y $ts_config(product_root)/examples/jobs/sleeper.sh 90"
   set hold_job1 [submit_job $jobargs 1 60 "" "" $cwdir 1]
   get_qstat_j_info $hold_job1
   if {[string compare "$qstat_j_info(cwd)" "$wdir"] != 0} {
      set error_text "qsub did not set the correct working dir(3): $wdir != $qstat_j_info(cwd)\n"
      ts_log_severe $error_text
   }
   delete_job $hold_job1

   # Test4 -wd $wdir -cwd
   set jobargs "-h -wd $wdir -cwd -o /dev/null -j y $ts_config(product_root)/examples/jobs/sleeper.sh 90"
   set hold_job1 [submit_job $jobargs 1 60 "" "" $cwdir 1]
   get_qstat_j_info $hold_job1
   if {[string compare "$qstat_j_info(cwd)" "$cwdir"] != 0} {
      set error_text "qsub did not set the correct working dir(4): $cwdir != $qstat_j_info(cwd)\n"
      ts_log_severe $error_text
   }
   delete_job $hold_job1
   wait_for_end_of_all_jobs
}
	   

#****** qsub/check_qsub_ts_iz_145() ***********************************************
#  NAME
#     check_qsub_ts_iz_145() -- Testcase for TS IZ 145.
#
#  SYNOPSIS
#     1. Run qsub -t 1-100:100 -cwd sleep.sh
#     2. Check that  the output file looks correct
#        This file will be in the local dir, called
#        sleep.sh.o<jobid>.1
#     3 Repeat for qsub -t 1-95:100 -cwd sleep.sh
#     4.Repeat for qsub -t 1-100:50 -cwd sleep.sh
#        In this case, we have TWO output files,
#        sleep.sh.o<jobid>.1 and sleep.sh.o<jobid>.51
#     5. Repeat for qsub -t 1-100:50 -cwd sleep.sh
#
#  FUNCTION
#     Check if TS IZ 145 has been fixed.
#  INPUTS
#
#*******************************************************************************
proc check_qsub_ts_iz_145 {} {
   
   # Call with -t 1-100:100
   set SGE_TASK_FIRST 1
   set SGE_TASK_LAST 100
   set SGE_TASK_STEPSIZE 100
   
   qsub_ts_iz_145 $SGE_TASK_FIRST $SGE_TASK_LAST $SGE_TASK_STEPSIZE
   
   # Call with -t 1-95:100
   set SGE_TASK_FIRST 1
   set SGE_TASK_LAST 95
   set SGE_TASK_STEPSIZE 100
   
   qsub_ts_iz_145 $SGE_TASK_FIRST $SGE_TASK_LAST $SGE_TASK_STEPSIZE
   
   # Call with -t 1-100:50
   set SGE_TASK_FIRST 1
   set SGE_TASK_LAST 100
   set SGE_TASK_STEPSIZE 50
   
   qsub_ts_iz_145 $SGE_TASK_FIRST $SGE_TASK_LAST $SGE_TASK_STEPSIZE
   
   # Call with -t 1-95:50
   set SGE_TASK_FIRST 1
   set SGE_TASK_LAST 95
   set SGE_TASK_STEPSIZE 50
   
   qsub_ts_iz_145 $SGE_TASK_FIRST $SGE_TASK_LAST $SGE_TASK_STEPSIZE
   
}

proc qsub_ts_iz_145 { {t_sge_task_first "1"} {t_sge_task_last "4"}
                      {t_sge_task_stepsize "4" } } {
   global ts_config env                     
   global CHECK_USER CHECK_ACTUAL_TEST_PATH

   set SGE_TASK_FIRST $t_sge_task_first
   set SGE_TASK_LAST $t_sge_task_last
   set SGE_TASK_STEPSIZE $t_sge_task_stepsize

   set host $ts_config(master_host)
   set output_tmpfile [get_tmp_file_name]

   # Delete any remaining jobs
   delete_all_jobs
   
	#1. First submit
   set job_id [submit_job "-t $SGE_TASK_FIRST-$SGE_TASK_LAST:$SGE_TASK_STEPSIZE -o $output_tmpfile -e /dev/null $CHECK_ACTUAL_TEST_PATH/step.sh"]
   trigger_scheduling
      
   # Sleep until the jobs are finished
   wait_for_jobend $job_id "step" 10 0
   
   set result [start_remote_prog $host $CHECK_USER cat $output_tmpfile exit_code]
   # echo first $SGE_TASK_FIRST last $SGE_TASK_LAST step $SGE_TASK_STEPSIZE
   # ts_log_fine "result is \n $result"
   
   if {$exit_code != 0 || $result == ""} {
      ts_log_severe "error reading from output file on host $host:\n$result"
   } else {
      if {[scan $result "first  %d last %d step %d" sge_task_first sge_task_last sge_task_stepsize] != 3 } {
         ts_log_severe "error parsing output file from host $host:\n$result"
      } else {
         # sge_task_first should be $SGE_TASK_FIRST 
         if {$sge_task_first != $SGE_TASK_FIRST} {
            ts_log_severe "SGE_TASK_FIRST is incorrect:\n$sge_task_first, expected $SGE_TASK_FIRST"
         } else {
            ts_log_fine "SGE_TASK_FIRST is $sge_task_first \n"
         }
         
         # sge_task_last should be $SGE_TASK_LAST 
         if {$sge_task_last != $SGE_TASK_LAST} {
            ts_log_severe "SGE_TASK_LAST is incorrect:\n$sge_task_last, expected $SGE_TASK_LAST"
         } else {
            ts_log_fine "SGE_TASK_LAST is $sge_task_last \n"
         }
            
         # sge_task_stepsize should be $SGE_TASK_STEPSIZE
         if {$sge_task_stepsize != $SGE_TASK_STEPSIZE} {
            ts_log_severe "SGE_TASK_STEPSIZE is incorrect:\n$sge_task_stepsize, expected $SGE_TASK_STEPSIZE"
         } else {
            ts_log_fine "SGE_TASK_STEPSIZE is $sge_task_stepsize \n"
         }
      }
   }
   
   #clean up
   file delete $output_tmpfile
}   

#****** check.61/check_sync_failover() *****************************************
#  NAME
#     check_sync_failover() -- Testcase for TS IZ 3 
#
#  SYNOPSIS
#     1. Qmaster down before qsub -sync y
#     2. Qmaster down after qsub -sync y
#     3. qconf -km after qsub -sync y
#     4. qconf -kec after qsub -sync y
#
#  FUNCTION
#     Checks the qsub-output of the in synapsis described scenarios
#
#  BUGS
#     TS IZ 3
#     TS 2934 
#
#*******************************************************************************
proc check_sync_failover {} {
   global ts_config   
   global CHECK_USER

   # Delete any remaining jobs
   delete_all_jobs
   
   set spool_dir [get_spool_dir $ts_config(master_host) "qmaster"] 
   set host $ts_config(master_host)
   set arch [resolve_arch $host]
   set error_text ""
   set error 0
   set timeout 60

   # qconf -km before qsub -sync y
   shutdown_master_and_scheduler $ts_config(master_host) $spool_dir
   set output [start_sge_bin "qsub" "-sync y $ts_config(product_root)/examples/jobs/sleeper.sh 10" $host $CHECK_USER]
   set text [translate_macro MSG_GDI_UNABLE_TO_CONNECT_SUS "qmaster" "*" "*"]
   set text2 [translate_macro MSG_GDI_CANT_SEND_MSG_TO_PORT_ON_HOST_SUSS "qmaster" "*" "*" "*"]
   if {[string match "*$text*" $output] == 0 && [string match "*$text2*" $output] == 0} {
      append error_text "\"qconf -km before qsub -sync y\" FAILED due to an unexpected output\n"
      set error 1
   }
   startup_qmaster 1

   # qconf -km after qsub -sync y
   set id [open_remote_spawn_process $host $CHECK_USER \
      "$ts_config(product_root)/bin/$arch/qsub" "-sync y $ts_config(product_root)/examples/jobs/sleeper.sh 30" 1]
 
   set output 0
   set recon 0
   set sp_id [lindex $id 1]
   set text [translate_macro MSG_JAPI_QMASTER_DOWN]
   set text2 [translate_macro MSG_JAPI_RECONNECTED]
   shutdown_master_and_scheduler $ts_config(master_host) $spool_dir 
   if {[startup_qmaster 1] != 0} {
      ts_log_severe "qmaster could not be started"
   }
   expect {
      -i $sp_id timeout {
         append error_text "Timeout in \"qconf -km after qsub -sync y\" test\n"
         set error 1
      }
      -i $sp_id eof { 
         append error_text "Unexpected EOF in \"qconf -km after qsub -sync y\" test\n"
         set error 1
      }
      # The qmaster has gone down.  Waiting to reconnect.error:
      $text {
         ts_log_fine "Qsub output: The qmaster has gone down."
         set output 1
         exp_continue
      }
      # Reconnected to qmaster 
      $text2 {
         ts_log_fine "Qsub output: Reconnected to qmaster."
         set recon 1
      }
   }

   close_spawn_process $id 

   if {$output != 1} {
      append error_text "\"qconf -km after qsub -sync y\" FAILED due to an unexpected output\n"
      set error 1 
   }
   if {$recon != 1} {
      append error_text "\"qconf -km after qsub -sync y\" FAILED because the execd was unable to reconnect\n"
      set error 1
   }

   # qconf -kec after qsub -sync y
   set id [open_remote_spawn_process $host $CHECK_USER \
      "$ts_config(product_root)/bin/$arch/qsub" "-sync y $ts_config(product_root)/examples/jobs/sleeper.sh 30"]

   ts_log_fine "qsub -sync y sleeper.sh 30"
   set output 0
   set found_eof 0
   # TODO: This macro is not existing for other branches
   set text [translate_macro MSG_JAPI_KILLED_EVENT_CLIENT]
   # TODO: END
   set sp_id [lindex $id 1]
   set events [get_event_client_list $host $CHECK_USER 0]
   del_event_client_list "all" [lindex $events 1]
   expect {
      -i $sp_id timeout {
         append error_text "Timeout in \"qconf -kec after qsub -sync y\" test\n"
         set error 1
      }
      -i $sp_id eof {
         append error_text "Unexpected EOF in \"qconf -kec after qsub -sync y\" test\n"
         set error 1
      }
      # Unable to wait for job because of error: Event client got shutdown signal 
      $text {
         ts_log_fine "Qsub output: Unable to wait for job because of error:  Event client got shutdown signal"
         set output 1
         exp_continue
      }
      "_END_OF_FILE_" {
         set found_eof 1
      }
   }
   close_spawn_process $id 

   if {$output != 1} {
      append error_text "\"qconf -kec after qsub -sync y\" FAILED due to an unexpected output\n"
      set error 1
   }
   
   if {$found_eof != 1} {
      append error_text "\"qconf -kec after qsub -sync y\" FAILED because qsub doesn't terminate\n"
      set error 1
   }
   
   # Qmaster down before qsub -sync y
   set qmaster_pid [get_qmaster_pid $ts_config(master_host) $spool_dir]
   start_remote_prog "$ts_config(master_host)" "root" "kill" "-9 $qmaster_pid"
   set text [translate_macro MSG_GDI_UNABLE_TO_CONNECT_SUS "qmaster" "*" "*"]
   set text2 [translate_macro MSG_GDI_CANT_SEND_MSG_TO_PORT_ON_HOST_SUSS "qmaster" "*" "*" "*"]
   set output [start_remote_prog $host $CHECK_USER "$ts_config(product_root)/bin/$arch/qsub" "-sync y $ts_config(product_root)/examples/jobs/sleeper.sh 10"]

   if {[string match "*$text*" $output] == 0 && [string match "*$text2*" $output] == 0} {
      append error_text "\"Qmaster down before qsub -sync y\" FAILED due to an unexpected output\n"
      set error 1
   }
   startup_qmaster 0

   # Qmaster down after qsub -sync y 
   ts_log_fine "Qmaster down after qsub -sync y test"
   set id [open_remote_spawn_process $host $CHECK_USER \
      "$ts_config(product_root)/bin/$arch/qsub" "-sync y $ts_config(product_root)/examples/jobs/sleeper.sh 120" 1]
 
   set output 0
   set recon 0
   set text [translate_macro MSG_JAPI_DISCONNECTED]
   set text2 [translate_macro MSG_JAPI_RECONNECTED]
   set sp_id [lindex $id 1]

   set qmaster_pid [get_qmaster_pid $ts_config(master_host) $spool_dir]
   start_remote_prog "$ts_config(master_host)" "root" "kill" "-9 $qmaster_pid"

   if {[startup_qmaster 0] != 0} {
      ts_log_severe "qmaster could not be started"
   }
   expect {
      -i $sp_id timeout {
         append error_text "Timeout in \"Qmaster down after qsub -sync y\" test\n"
         set error 1
      }
      -i $sp_id eof { 
         append error_text "Unexpected EOF in \"Qmaster down after qsub -sync y\" test\n"
         set error 1
      }
      # The qmaster has become unreachable 
      $text {
         ts_log_fine "Qsub output: The qmaster has become unreachable."
         set output 1
         exp_continue
      }
      # Reconnected to qmaster 
      $text2 {
         ts_log_fine "Qsub output: Reconnected to qmaster."
         set recon 1
      }
      "_END_OF_FILE_" {
         set error 1
         append error_text "Could no reconnect to qmaster\n"
      }
   }

   close_spawn_process $id 

   if {$output != 1} {
      append error_text "\"Qmaster down after qsub -sync y\" FAILED due to an unexpected output\n"
      set error 1 
   }
   if {$recon != 1} {
      append error_text "\"Qmaster down after qsub -sync y\" FAILED because the execd was unable to reconnect\n"
      set error 1
   }

   if {$error == 1} {
      ts_log_severe $error_text
   } 
}
