#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name
global check_description 
global check_needs 
global check_functions
global check_category
global check_highest_level
global check_init_level_procedure
global ts_config
global check_root_access_needs
global env

# some parameters to huge_script test

set check_root_access_needs "no"

# setup check's highest level

set check_highest_level 0

# set description for each level
set check_description(0)  "check qrsub command and options"

set check_init_level_procedure "qrsub_init_level"
set check_name         "qrsub"
set check_category     "COMPATIBILITY SYSTEM VERIFIED"
set check_needs        "init_core_system"       ;# dependencies of this check (name of other check)

# setup and cleanup functions
set check_setup_function "qrsub_setup"
set check_cleanup_function "qrsub_cleanup"

# define test's procedure order
set check_functions {}
lappend check_functions "check_submit_ar"
lappend check_functions "check_submit_ar_invalid_arg"
lappend check_functions "check_submit_ar_invalid_option_arg"
lappend check_functions "check_option_a"
lappend check_functions "check_option_A"
lappend check_functions "check_option_ckpt"
lappend check_functions "check_option_d"
lappend check_functions "check_option_e"
lappend check_functions "check_option_help"
lappend check_functions "check_option_he"
lappend check_functions "check_option_l"
lappend check_functions "check_option_m"
lappend check_functions "check_option_M"
lappend check_functions "check_option_now"
lappend check_functions "check_option_N"
lappend check_functions "check_option_pe"
lappend check_functions "check_option_q"
lappend check_functions "check_option_w"
lappend check_functions "check_option_u"
lappend check_functions "check_option_masterq"

# test specific globals:

# -------- local test procedures: initialization------------------------------

proc qrsub_setup {} {
   global ts_config
   global actual_host 
   global qinstance 

   ts_log_fine "qrsub test setup"

   set actual_host [host_conf_get_suited_hosts]

   set qinstance [get_queue_instance "all.q" $actual_host]

   set pe(slots)           "10"
   set pe(allocation_rule) "\$round_robin"
   add_pe "qrsub_pe" pe
   assign_queues_with_pe_object "all.q" "" "qrsub_pe"
   add_ckpt "qrsub_ckpt"
   assign_queues_with_ckpt_object "all.q" "" "qrsub_ckpt"
}

proc qrsub_cleanup {} {
   global ts_config

   delete_all_jobs
   delete_all_ars
   wait_for_end_of_all_jobs 60
   unassign_queues_with_pe_object "qrsub_pe"
   del_pe "qrsub_pe"
   unassign_queues_with_ckpt_object "qrsub_ckpt"
   del_ckpt "qrsub_ckpt"
   ts_log_fine "qrsub cleanup function"
}

proc qrsub_init_level {} {
   global CHECK_ACT_LEVEL

   if {$CHECK_ACT_LEVEL == 0} {
      return 0
   }

   return -1 
}

proc check_submit_ar {} {
   global ts_config
 
   # positive tests
   set args "-d 1000"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   ts_log_fine "test check_submit_ar OK"
}

proc check_submit_ar_invalid_arg {} {
   global ts_config
  
   # negative tests
   set args "dfdf -d 1000"
 
   set ar_id [submit_ar $args "" "" 0]

   if {$ar_id != -32} {
      ts_log_severe "error 'invalid option argument' was not shown"
   }
   ts_log_fine "test check_submit_ar_invalid_arg OK"
}

proc check_submit_ar_invalid_option_arg {} {
   global ts_config
  
   # negative tests
   set args "-dl 1101010101 -d 1000"
 
   set ar_id [submit_ar $args "" "" 0]

   if {$ar_id != -31} {
      ts_log_severe "error 'invalid option argument' was not shown"
      return
   }
   delete_all_ars
   ts_log_fine "test check_submit_ar_invalid_option_arg OK"
}

proc check_option_a {} {
   global ts_config
   
   set now [clock seconds]
   set then [expr $now + 10000]
   set start1 [clock format $then -format "%Y%m%d%H%M.%S"]
   set starto [clock format $then -format "%m/%d/%Y %H:%M:%S"]
   set then2 [expr $now + 20000]
   set start2 [clock format $then2 -format "%Y%m%d%H%M.%S"]
   
   # positive tests
   set args "-a $start1 -d 1000"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(start_time)                     "$starto"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }

   # negative tests
   set args "-a $start1"
 
   set ar_id [submit_ar $args "" "" 0]

   if {$ar_id != -55} {
      ts_log_severe "error 'end time or duration' was not shown"
      return
   }

   set args "-a 0101010101 -d 1000"
 
   set ar_id [submit_ar $args "" "" 0]

   if {$ar_id != -58} {
      ts_log_severe "error 'start time is in the past' was not shown"
      return
   }

   set args "-a $start2 -e $start1"
 
   set ar_id [submit_ar $args "" "" 0]

   if {$ar_id != -57} {
      ts_log_severe "error 'start time is later than end time' was not shown"
      return
   }

   set args "-a errl -d 1000"
 
   set ar_id [submit_ar $args "" "" 0]

   if {$ar_id != -38} {
      ts_log_severe "error $ar_id: 'Wrong date/time format' was not shown"
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_a OK"
}

proc check_option_A {} {
   global ts_config

   # positive tests
   set elm "test_ar_account"
   set args "-d 1000 -A $elm"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(account)                        "$elm"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_A OK"
}

proc check_option_ckpt {} {
   global ts_config 

   # positive tests
   set elm "qrsub_ckpt"
   set args "-d 1000 -ckpt $elm"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(checkpoint_name)                        "$elm"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_ckpt OK"
}

proc check_option_d {} {
   global ts_config

   # positive tests
   set args "-d 3600"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(duration)                     "01:00:00"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }

   set args "-d 01:01:01"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(duration)                     "01:01:01"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }

   # negative tests
   set args "-d 01-01-01"
 
   set ar_id [submit_ar $args "" "" 0]

   if {$ar_id != -40} {
      ts_log_severe "error $ar_id: 'Wrong time format' was not shown"
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_d OK"
}

proc check_option_e {} {
   global ts_config

   set now [clock seconds]
   set then [expr $now + 20000]
   set start1 [clock format $then -format "%Y%m%d%H%M.%S"]
   set starto [clock format $then -format "%m/%d/%Y %H:%M:%S"]
 
   # positive tests
   set args "-e $start1 -d 1000"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }


   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(end_time)                     "$starto"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }

   # negative tests
   set args "-e 0101010101 -d 1000"
 
   set ar_id [submit_ar $args "" "" 0]
   if {$ar_id != -58} {
      ts_log_severe "error 'end time is in the past' was not shown"
      return
   }

   set args "-e 01-01-01 -d 1000"
 
   set ar_id [submit_ar $args "" "" 0]

   if {$ar_id != -38} {
      ts_log_severe "error $ar_id: 'Invalid day specification.' was not shown"
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_e OK"
}

proc check_option_help {} {
   global ts_config

   # positive tests
   set args "-help"
 
   set ar_id [submit_ar $args "" "" 0]

   if {$ar_id != -2} {
      ts_log_severe "error in help $ar_id"
      return
   }
   
   set args ""
   set ar_id [submit_ar $args "" "" 0]

   if {$ar_id != -3} {
      ts_log_severe "qrsub with no option doesn't show help ($ar_id)"
   }
   
   # check return codes 
   set output_help [start_sge_bin "qrsub" "-help" "" "" prg_exit_state]
   
   if { $prg_exit_state != 0 } {
      ts_log_severe "The return code of qrsub -help was not 0 (it was $prg_exit_state)!"
   }  
   
   # check if qrsub is mapped to qrsub -help but with error code and 
   # return code 1
   set output [start_sge_bin "qrsub" "" "" "" prg_exit_state]
   
   if { $prg_exit_state != 1 } {
      ts_log_severe "The return code of qrsub with no option was not 1 (it was $prg_exit_state)!"
   }  

   # compare output: output_help must be a subset of output 
   # because output has to contain an error message
   if { [string first $output_help $output] == -1 } {
      ts_log_severe "qrsub with no option does not return the text showed by -help"
   } 
   
   delete_all_ars
   ts_log_fine "test check_option_help OK"
}

proc check_option_he {} {
   global ts_config

   # positive tests
   set args "-he yes -d 1000"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(error_handling)                     "true"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }

   # negative tests
   set args "-he blaf"
 
   set ar_id [submit_ar $args "" "" 0]

   if {$ar_id != -31} {
      ts_log_severe "invalid option error in -he blaf not shown"
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_he OK"
}

proc check_option_l {} {
   global ts_config
   global actual_host

   # positive tests
   set args "-l 'h=$actual_host, h_rt=1000' -d 1000"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(resource_list)                     "hostname=$actual_host, h_rt=1000"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_l OK"
}

proc check_option_m {} {
   global ts_config

   # positive tests
   set args "-m abe -d 1000"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(mail_options)                     "abe"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_m OK"
}

proc check_option_now {} {
   global ts_config

   # positive tests
   set args "-now y -d 1000"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   set args "-now n -d 1000"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_now OK"
}

proc check_option_M {} {
   global ts_config
   global CHECK_REPORT_EMAIL_TO

   set args "-M $CHECK_REPORT_EMAIL_TO -d 1000"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(mail_list)                     "$CHECK_REPORT_EMAIL_TO"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_M OK"
}

proc check_option_N {} {
   global ts_config

   set args "-N test_ar_name -d 1000"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(name)                     "test_ar_name"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_N OK"
}

proc check_option_pe {} {
   global ts_config
   global qinstance

   if {[llength $ts_config(execd_nodes)] < 3} {
      ts_log_config "test is not supported with less than 3 exec hosts"
      return
   }

   delete_all_ars

   set args "-pe qrsub_pe 3 -d 1000 "

   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(granted_parallel_environment)   "qrsub_pe slots 3"
   set check_values(granted_slots_list)             "all.q@*=1,all.q@*=1,all.q@*=1"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_pe OK"
}

proc check_option_q {} {
   global ts_config
   global qinstance

   set args "-q $qinstance -d 1000"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }


   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(granted_slots_list)                     "$qinstance=1"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_q OK"
}

proc check_option_w {} {
   global ts_config

   set args " -w e -d 1000"
 
   set ar_id [submit_ar $args]

   if {$ar_id < 0} {
      ts_log_severe "invalid submition message"
      return
   }

   set args " -w v -d 1000"
 
   set ar_id [submit_ar $args]

   if {$ar_id != 1} {
      ts_log_severe "invalid submition message"
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_w OK"
}

proc check_option_u {} {
   global ts_config
   global CHECK_FIRST_FOREIGN_SYSTEM_USER
   global CHECK_SECOND_FOREIGN_SYSTEM_USER
   global CHECK_USER

   set args " -u '$CHECK_USER,!$CHECK_FIRST_FOREIGN_SYSTEM_USER,$CHECK_SECOND_FOREIGN_SYSTEM_USER,!root' -d 1000"
 
   set ar_id [submit_ar $args]
   if {$ar_id < 0} {
      return
   }

   ts_log_fine "qrstat -ar $ar_id\n"
   set check_values(acl_list)               "$CHECK_USER,$CHECK_SECOND_FOREIGN_SYSTEM_USER"
   set check_values(xacl_list)              "$CHECK_FIRST_FOREIGN_SYSTEM_USER,root"
   set ret [parse_qrstat_check $ar_id check_values]
   if {$ret != 0 } {
      return
   }
   delete_all_ars
   ts_log_fine "test check_option_u OK"
}

proc check_option_masterq {} {
   global ts_config

   foreach host $ts_config(execd_nodes) {
      set masterq "all.q@$host"
      set args " -pe mytestpe 1 -masterq $masterq -d 1000"
      set ar_id [submit_ar $args]
      if {$ar_id < 0} {
         return
      }
      set check_values(master_hard_queue_list) "$masterq"
      set check_values(granted_slots_list)     "$masterq=1"
      set ret [parse_qrstat_check $ar_id check_values]
      if {$ret != 0 } {
         return
      }
      delete_ar $ar_id
   }
   delete_all_ars
   ts_log_fine "test check_option_masterq OK"
}
