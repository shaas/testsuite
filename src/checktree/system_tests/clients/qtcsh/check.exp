#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

# define a level initialization procedure:
set check_init_level_procedure "qtcsh_init_level"

# define test's name and run level descriptions
set check_name            "qtcsh"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level    5
set check_description(0)   "checking qtcsh with local .qtcsh, SGE_ROOT set"
set check_description(1)   "checking qtcsh with global qtcsh, SGE_ROOT set"
set check_description(2)   "checking qtcsh with local .qtcsh, SGE_ROOT unsetenv"
set check_description(3)   "checking qtcsh with global qtcsh, SGE_ROOT unsetenv"
set check_description(4)   "checking qtcsh with global qtcsh and local .qtcsh, SGE_ROOT set"
set check_description(5)   "checking qtcsh with global qtcsh and local .qtcsh, SGE_ROOT unsetenv"

# define test's dependencies
set check_needs           "init_core_system" 
# set check_root_access_needs  "yes"

# setup and cleanup functions
set check_setup_function   "qtcsh_setup"
set check_cleanup_function "qtcsh_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "qtcsh_command_line_test"      ;# test -ABLR options	
lappend check_functions "qtcsh_spawn_test"             ;# test -ABLR options via spawn task

# run level initialization
#                                                             max. column:     |
#****** qtcsh/qtcsh_init_level() ******
# 
#  NAME
#     qtcsh_init_level -- Initialize which qtcsh command to use,
#                         with or without SGE_ROOT set; and which home
#                         to use for the qtask file, 
#                         $CHECK_PRODUCT_ROOT/$sge_cell/common/ or $env(HOME) depending
#                         on the level: 
#                         0 - $env(HOME)/.qtask, SGE_ROOT set; 
#                         1 - $CHECK_PRODUCT_ROOT/$sge_cell/common/qtask, SGE_ROOT set; 
#                         2 - $env(HOME)/.qtask, SGE_ROOT unsetenv; 
#                         3 - $CHECK_PRODUCT_ROOT/$sge_cell/common/qtask, SGE_ROOT unsetenv; 
#                         4 - $env(HOME)/.qtask,  $CHECK_PRODUCT_ROOT/$sge_cell/common/qtask 
#                             SGE_ROOT set; 
#                         5 - $env(HOME)/.qtask,  $CHECK_PRODUCT_ROOT/$sge_cell/common/qtask 
#                             SGE_ROOT unsetenv; 
#                          
#  SYNOPSIS
#     qtcsh_init_level { } 
#
#  FUNCTION
#     sets qtask home, SGE_ROOT values
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc qtcsh_init_level {} {
   global CHECK_ACT_LEVEL qtcsh_command_sh qtcsh_command_tcsh

   set qtcsh_command_sh ""
   set qtcsh_command_tcsh ""

   switch -- $CHECK_ACT_LEVEL {
     0 { 
       return 0 
     }
     1 { 
       return 0
     } 
     2 { 
       set qtcsh_command_sh "SGE_ROOT=\"\"; export SGE_ROOT" 
       set qtcsh_command_tcsh "unsetenv SGE_ROOT"
       return 0
     }
     3 { 
       set qtcsh_command_sh "SGE_ROOT=\"\"; export SGE_ROOT"
       set qtcsh_command_tcsh "unsetenv SGE_ROOT"
       return 0
     }
     4 { 
       return 0 
     }
     5 { 
       set qtcsh_command_sh "SGE_ROOT=\"\"; export SGE_ROOT" 
       set qtcsh_command_tcsh "unsetenv SGE_ROOT"
       return 0 
     }
   }
  
   return -1  ;# no other level else
}

#****** qtcsh/qtcsh_setup() ******
#
#  NAME
#     qtcsh_setup --  create $env(HOME)/.qtask,   and/or 
#                     $CHECK_PRODUCT_ROOT/$sge_cell/common/qtask as needed
#
#  SYNOPSIS
#     qtcsh_setup { }
#
#  FUNCTION
#    setup qtask files
#
#  INPUTS
#
#  RESULT
#     ???
#
#  EXAMPLE
#     ???
#
#  NOTES
#     ???
#
#  BUGS
#     ???
#
#  SEE ALSO
#     ???/???
#*******************************
proc qtcsh_setup {} {
   set_error 0 "ok"
}

#****** qtcsh/qtcsh_cleanup() ******
#
#  NAME
#     qtcsh_cleanup --  cleanup qtcsh test 
#                          
#  SYNOPSIS
#     qtcsh_cleanup { }
#
#  FUNCTION
#    clean up after ourselves, delete local qtask file and restore global
#    qtask file from template
#
#*******************************
proc qtcsh_cleanup {} {
   global env ts_config CHECK_USER

   set check_user_home $env(HOME)
   set hostname [lindex $ts_config(execd_nodes) 0]

   delete_remote_file $hostname $CHECK_USER $check_user_home/.qtask
   restore_qtask_file
   delete_all_jobs
   wait_for_end_of_all_jobs 60
}

#****** qtcsh/qtcsh_spawn_task_test() ******
#
#  NAME
#     qtcsh_spawn_task_test -- Spawn qtcsh shell, execute qrshmode.
#
#  SYNOPSIS
#     qtcsh_spawn_task_test { { option "" } { command "env"} }
#
#  FUNCTION
#    Spawn qtcsh shell, execute qrshmode.
#    Execute remote command of qtcsh, with spawning process.
#    We look at the options "{}, -A, -B, -L, -R, -X"
#    The last option is an illegal one. Check to see that
#    qtcsh gives usage.
#    We start qtcsh, then we either send {}, or 
#    "qrshmode -A", "qrshmode -B", "qrshmode -L", qrshmode -R",
#    qrshmode -X". Then we send command "hostname" or 
#    uname -n". We then pass the result to qtcsh_evaluate.
#
#*******************************
proc qtcsh_spawn { { option "" } { command "hostname" } } {

   global CHECK_OUTPUT CHECK_PRODUCT_ROOT
   global CHECK_USER ts_config qtcsh_command_tcsh

   set hostname [lindex $ts_config(execd_nodes) 0]
   set hostname_arch [ resolve_arch $hostname ]
   set hostname_remote [lindex $ts_config(execd_nodes) 1]

   set qtcsh_program "$CHECK_PRODUCT_ROOT/bin/$hostname_arch/qtcsh"
   puts $CHECK_OUTPUT "\n\noption is $option, command is $command"
   puts $CHECK_OUTPUT "open remote process for command: $qtcsh_program on host $hostname"
   set qtcsh_id [open_remote_spawn_process $hostname $CHECK_USER "true" "; $qtcsh_program"]
    
   set qtcsh_sp_id [lindex $qtcsh_id 1]

   set timeout 30
   expect {
      -i $qtcsh_sp_id full_buffer {
         add_proc_error "qtcsh_spawn" -1 "expect full_buffer error"
         close_spawn_process $qtcsh_id
         return -1
      }
      -i $qtcsh_sp_id timeout {
         add_proc_error "qtcsh_spawn" -1 "timeout error"
         close_spawn_process $qtcsh_id
         return -1
      }
      -i $qtcsh_sp_id "_start_mark_" {
      }
   }

   puts $CHECK_OUTPUT "found start mark ..."

   set my_tries 60
   set timeout 1

   while {1} {
      expect {
         -i $qtcsh_sp_id {[A-Za-z>$%]*} {
            puts $CHECK_OUTPUT "startup ..."
            break;
         }
         -i $qtcsh_sp_id default {
            if { $my_tries > 0 } {
                incr my_tries -1
                puts -nonewline $CHECK_OUTPUT "."
                flush $CHECK_OUTPUT
                continue
            } else { 
               add_proc_error "submit_wait_type_job" -1 "startup timeout" 
               break;
            }
         }
      }
   }

   puts $CHECK_OUTPUT "found shell startup ..."

   if { "$qtcsh_command_tcsh" != "" } {
      puts $CHECK_OUTPUT "testsuite send -> $qtcsh_command_tcsh\\n" 
      send -i $qtcsh_sp_id "$qtcsh_command_tcsh\n"
   }
   if { "$option" != "" } {
      puts $CHECK_OUTPUT "testsuite send -> qrshmode $option\\n" 
      send -i $qtcsh_sp_id -- "qrshmode $option\n"
   }
   puts $CHECK_OUTPUT "testsuite send -> $command; echo _command_finished_\\n" 
   send -i $qtcsh_sp_id "$command; echo \"AA\${?}AA\"\n"


   # Now, depending on the result, we set our last output
   set do_stop 0
   set last_output ""
   set timeout 1
   set counter 30
   set found_finished 0
   while { $do_stop == 0 } {
      expect {
         -i $qtcsh_sp_id full_buffer {
            set do_stop 1
            add_proc_error "qtcsh_spawn" -1 "expect full_buffer error"
         }
         -i $qtcsh_sp_id timeout {
            incr counter -1
            if { $counter <= 0 } {
               add_proc_error "qtcsh_spawn" -1 "timeout error"
               set do_stop 1
            } 
         }
         -i $qtcsh_sp_id "*\n" {
            foreach line [split $expect_out(0,string) "\n"] {
              if { $line == "" } {
                 continue
              }
              if { [string match "*exited with exit code*" $line] } {
                 puts $CHECK_OUTPUT "ignore: $line"
                 continue
              }
              if { [string match "*reading exit code from shepherd*" $line] } {
                 puts $CHECK_OUTPUT "ignore: $line"
                 continue
              } else {
                 puts $CHECK_OUTPUT "got: $line"
              }
              if { [string match "*_exit_status_*" $line] } {
                 set do_stop 1
              } 
              if { [string match "*Usage*" $line ] } {
                 set last_output "Usage"
                 set found_finished 1
              }
              if { [string match "*critical*" $line ] } {
                 set last_output "critical"
                 set found_finished 1
              }

              if { [string match "*AA0AA*" $line] } {
                 set found_finished 1
                 puts $CHECK_OUTPUT "finished without error"
                 send -i $qtcsh_sp_id "exit\n"
              } 
              if { [string match "*AA1AA*" $line] } {
                 set found_finished 1
                 puts $CHECK_OUTPUT "finished with error"
                 send -i $qtcsh_sp_id "exit\n"
              } 


              if { $found_finished == 0 } {
                 set last_output [string trim $line]
              }
            }
         }
      }
   }
   puts $CHECK_OUTPUT "closing spawn process ..."
   close_spawn_process $qtcsh_id

   puts $CHECK_OUTPUT "============================="
   puts $CHECK_OUTPUT "qtcsh returned: \"$last_output\""
   puts $CHECK_OUTPUT "============================="

   # We then evaluate this output using qtcsh_evaluate.
   set qtcsh_evaluate_result [qtcsh_evaluate "$last_output" "$option" "$command" "spawn"] 

   if { ( $qtcsh_evaluate_result == 0 ) } {
      puts $CHECK_OUTPUT "qtcsh_spawn_command succeeded for option $option and command $command"
      return 0 
   } else {
      return -1 
   }

}

#****** qtcsh/qtcsh_local_command() ******
#
#  NAME
#     qtcsh_local_command -- Execute local qtcsh run
#
#  SYNOPSIS
#     qtcsh_local_command { { option "" } { command "env"} }
#
#  FUNCTION
#    Execute local qtcsh run
#    Execute local command of qtcsh, without spawning process.
#    We look at the options "{}, -A, -B, -L, -R, -X"
#    The last option is an illegal one. Check to see that
#    qtcsh gives usage.
#
#*******************************
proc qtcsh_local_command { { option "" } { command "hostname"} } {

   global CHECK_OUTPUT CHECK_PRODUCT_ROOT
   global CHECK_USER ts_config qtcsh_command_sh

   set hostname [lindex $ts_config(execd_nodes) 0]
   set hostname_arch [ resolve_arch $hostname ]
   set hostname_remote [lindex $ts_config(execd_nodes) 1]
   if { $qtcsh_command_sh == "" } {
      set qtcsh_program "; $CHECK_PRODUCT_ROOT/bin/$hostname_arch/qtcsh"
   } else {
      set qtcsh_program "; $qtcsh_command_sh; $CHECK_PRODUCT_ROOT/bin/$hostname_arch/qtcsh"
   }

   # We pass in the variable "option," which can be blank or -A, -B, -L, -R, -X
   # The last one is a negative test, to see that qtcsh gives Usage
   # if passed an invalid option

   set command_string "$option -c \"$command\""

   # Now test qtcsh with command_string
   set result [ start_remote_prog $hostname $CHECK_USER "true" "$qtcsh_program $command_string" ]
   #puts $CHECK_OUTPUT $result

   set qtcsh_evaluate_result [qtcsh_evaluate "$result" "$option" "$command" "" ]

   return $qtcsh_evaluate_result

}
 

#****** qtcsh/qtcsh_evaluate() ******
#
#  NAME
#     qtcsh_evaluate --  Evaluate qtcsh run for result with option, command and mode. 
#
#  SYNOPSIS
#     qtcsh_evaluate { { result "" } { option "" } { command "env"} { mode "command_line" } }
#
#  FUNCTION
#    Evaluate qtcsh run for result with option, command and mode. Mode is to handle
#    some different cases for the spawn process cases.
#    Evaluate what we get from running "qtcsh $option $command"
#    We look at the options "{}, -A, -B, -L, -R, -X" 
#    The last option is an illegal one. Check to see that 
#
#*******************************
proc qtcsh_evaluate { { result "" } { option "" } { command "hostname"} { mode "command_line" } } {

   global CHECK_OUTPUT CHECK_PRODUCT_ROOT 
   global CHECK_USER ts_config
   global CHECK_ACT_LEVEL

   set ret_value -1

   set result [string trim $result]

   set hostname [lindex $ts_config(execd_nodes) 0]
   if {[string compare $option "-L"] == 0} {
      set hostname_remote $hostname
   } else {
      set hostname_remote [lindex $ts_config(execd_nodes) 1]
   }

   puts $CHECK_OUTPUT "try to find out what I expect for \nresult $result, option $option, command $command and mode $mode ..."
   puts $CHECK_OUTPUT "hostname = $hostname, hostname_remote = $hostname_remote"
   # Now when we need to map out what to expect for the different combinations
   # of flag:"{} -A -B -L -B"; command:"hostname {uname -n}"; level: "0 1 2 3".
   # There are a total of 5x2x4 = 40 total number of possibilities: 
   # {}, hostname, 0; {} hostname, 1; ...; -R  uname -n 3. 
   # The expected results can be: dt218-130; dt218-123;... dt218-123.

   if { ( $CHECK_ACT_LEVEL == 0 || $CHECK_ACT_LEVEL == 4 ) &&
        ( [string first "hostname" $command ] >= 0) &&
        ( [string first $hostname_remote $result] >= 0 ) } {
      puts $CHECK_OUTPUT "(1) expecting $hostname_remote"
      set ret_value 0
   } elseif {
        ( $CHECK_ACT_LEVEL == 1 || $CHECK_ACT_LEVEL == 2 || $CHECK_ACT_LEVEL == 3 || $CHECK_ACT_LEVEL == 5 ) &&
        ( [string first "hostname" $command ] >= 0) &&
        ( [string first $hostname $result] >= 0 ) } {
      puts $CHECK_OUTPUT "(2) expecting $hostname"
      set ret_value 0 
   } elseif {
        ( $CHECK_ACT_LEVEL == 2 || $CHECK_ACT_LEVEL == 3  || $CHECK_ACT_LEVEL == 5 &&  $mode == "spawn" ) &&
        ( [string first "hostname" $command ] >= 0) &&
        ( [string first "critical" $result] >= 0 ) } {
      puts $CHECK_OUTPUT "(3) expecting critical"
      set ret_value 0
   } elseif {
        ( $CHECK_ACT_LEVEL == 0 ) &&
        ( [string first "uname" $command ] >= 0) &&
        ( [string first $hostname_remote $result] >= 0 ) } {
      puts $CHECK_OUTPUT "(4) expecting $hostname_remote"
      set ret_value 0
   } elseif {
        ( $CHECK_ACT_LEVEL == 1 || $CHECK_ACT_LEVEL == 2 || $CHECK_ACT_LEVEL == 3 || $CHECK_ACT_LEVEL == 4 || $CHECK_ACT_LEVEL == 5 )  &&
        ( [string first "uname" $command ] >= 0) &&
        ( [string first $hostname $result] >= 0 ) } {
      puts $CHECK_OUTPUT "(5) expecting $hostname"
      set ret_value 0
   } elseif {
        ( $CHECK_ACT_LEVEL == 2 || $CHECK_ACT_LEVEL == 3 || $CHECK_ACT_LEVEL == 5 && $mode == "spawn" ) &&
        ( [string first "uname" $command ] >= 0) &&
        ( [string first "critical" $result] >= 0 ) } {
      puts $CHECK_OUTPUT "(6) expecting critical"
      set ret_value 0
   } elseif {
       ( [string first "Usage" $result] >= 0 ) &&
       ( [string first "-X" $option ] >= 0) } {
      puts $CHECK_OUTPUT "(7) expecting Usage"
      set ret_value 0
   } 

   if { $ret_value != 0 } {
      add_proc_error "qtcsh_evaluate" -1 "qtcsh test for $command failed got $result"
   }

   return $ret_value 

}

#****** qtcsh/qtask_local_global() ******
#
#  NAME
#     qtask_local_global -- Create the local and global qtask files
#
#                     
#
#  SYNOPSIS
#     qtask_local_global { }
#
#  FUNCTION
#    Create the local or global qtask file by running
#    shell scripts qtask_local.sh or qtask_global.sh .
#    We create the line for command "hostname" which will run on $hostname_remote
#    and is not overridable, as is the line for command "ps"
#    The script does the following for the global qtask file:
#    We create the line for command "hostname" which will run on $hostname_remote
#    and is not overridable. Here,  command "ps" is overrideable, indicated by
#	  the "!".
#
#*******************************
proc qtask_local_global { } {

   global CHECK_OUTPUT CHECK_USER CHECK_ACTUAL_TEST_PATH
   global CHECK_PRODUCT_ROOT ts_config env CHECK_ACT_LEVEL

   set hostname [lindex $ts_config(execd_nodes) 0]
   set hostname_remote [lindex $ts_config(execd_nodes) 1]

   set sge_cell $ts_config(cell)
   set check_user_home $env(HOME)

   # Then, we setup the .qtask file in  respective home directory
   # and qtask for $CHECK_PRODUCT_ROOT/$sge_cell/common/qtask in global directory
   # Copy the local or global qtask*.sh script in this directory, $CHECK_ACTUAL_TEST_PATH
   # For levels 0 - 3, we just use one qtask file; for levels 4 & 5, we use both qtask
   # files.

   set local_qtask_file "$check_user_home/.qtask"
   set global_qtask_file "$CHECK_PRODUCT_ROOT/$sge_cell/common/qtask"

   set list0_2 "$hostname_remote $local_qtask_file"
   set list1_3 "$hostname $global_qtask_file"

   puts $CHECK_OUTPUT "creating qtask file\n"

   delete_remote_file $hostname $CHECK_USER $local_qtask_file 
   delete_remote_file $hostname $CHECK_USER $global_qtask_file

   wait_for_remote_file $hostname $CHECK_USER $local_qtask_file 60 1 1 
   wait_for_remote_file $hostname $CHECK_USER $global_qtask_file 60 1 1 

   if { ( $CHECK_ACT_LEVEL == 0 || $CHECK_ACT_LEVEL == 2 ) } { 
      set result_local_return [ start_remote_prog $hostname $CHECK_USER "$CHECK_ACTUAL_TEST_PATH/qtask_local.sh" "$list0_2" ]
      puts $CHECK_OUTPUT $result_local_return
      wait_for_remote_file $hostname $CHECK_USER $local_qtask_file 60 
      return 0
   } elseif { ( $CHECK_ACT_LEVEL == 1 || $CHECK_ACT_LEVEL == 3 ) } { 
      set result_global_return [ start_remote_prog $hostname $CHECK_USER "$CHECK_ACTUAL_TEST_PATH/qtask_global.sh"  "$list1_3"]
      puts $CHECK_OUTPUT $result_global_return
      wait_for_remote_file $hostname $CHECK_USER $global_qtask_file 60 
      
      return 0
   } elseif { ( $CHECK_ACT_LEVEL == 4 || $CHECK_ACT_LEVEL == 5 ) } {
      set result_local_return [ start_remote_prog $hostname $CHECK_USER "$CHECK_ACTUAL_TEST_PATH/qtask_local.sh" "$list0_2"]
      puts $CHECK_OUTPUT $result_local_return

      set result_global_return [ start_remote_prog $hostname $CHECK_USER "$CHECK_ACTUAL_TEST_PATH/qtask_global.sh"  "$list1_3"]
      puts $CHECK_OUTPUT $result_global_return

      wait_for_remote_file $hostname_remote $CHECK_USER $local_qtask_file 60 
      wait_for_remote_file $hostname_remote $CHECK_USER $global_qtask_file 60 

      return 0
   } else {
      return -1
   }
}
#****** qtcsh/qtcsh_command_line_test() ******
#
#  NAME
#     qtcsh_command_line_test --  Test qtcsh
#
#  SYNOPSIS
#     qtcsh_command_line_test { }
#
#  FUNCTION
#    Test qtcsh
#    Run the qtcsh test for various flags and commands
#    We first setup the qtask in the appropiate home, then
#    run the tests.
#
#*******************************
proc qtcsh_command_line_test {} {

   global CHECK_OUTPUT 

   set qtask_setup [qtask_local_global]
   if { $qtask_setup != 0 } {
      add_proc_error "qtcsh_init_level" -1 "qtcsh setup failed"
   } else {

      set flags "{} -A -B -L -R -X"

      set commands "hostname \"uname -n\""
      set do_stop 0
      foreach var2 $flags {
         foreach var3 $commands {
            set qtcsh_evaluate_return [qtcsh_local_command "$var2" "$var3" ]
            if { $qtcsh_evaluate_return == 0 } {
               puts $CHECK_OUTPUT "qtcsh_command_line_test succeeded for option $var2 and command $var3 "
            } else {
               add_proc_error "qtcsh_command_line_test" -2 "skipping further tests"
               set do_stop 1
               break
            }
         }
         if { $do_stop == 1 } {
            break
         }
      }
   }

   set_error 0 "ok"
}

proc qtcsh_spawn_test {} {

   global CHECK_OUTPUT

   set qtask_setup [qtask_local_global]
   if { $qtask_setup != 0 } {
      add_proc_error "qtcsh_init_level" -1 "qtcsh setup failed"
   } else {
      set option_list "{} -A -B -L -R -X"

      set command_list "hostname \"uname -n\""
      set do_stop 0
      foreach option $option_list {
         foreach command $command_list {
            if { [qtcsh_spawn $option $command] != 0 } {
               add_proc_error "qtcsh_spawn_test" -2 "skipping further tests"
                set do_stop 1
               break
            }
         }
        if { $do_stop == 1} {
           break
        }
      }
   }

   set_error 0 "ok"
}
