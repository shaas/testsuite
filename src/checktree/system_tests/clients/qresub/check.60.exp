#!/vol2/TCL_TK/glinux/bin/expect
# global variables ... (defined in main check routine, but you can use it)
#
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions
global check_category
global check_root_access_needs
set check_root_access_needs "yes"

set check_name         "qresub"
set check_category     "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)  "check every qresub option"
set check_needs        "init_core_system"       ;# dependencies of this check (name of other check)

# define a level initialization procedure:
set check_init_level_procedure "qresub_init_level"

# setup and cleanup functions
set check_setup_function "qresub_setup"
set check_cleanup_function "qresub_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "qresub_minus_help_option"
lappend check_functions "qresub_issue_2726" 
lappend check_functions "qresub_minus_h_o_option"
lappend check_functions "qresub_minus_h_u_option"
lappend check_functions "qresub_minus_h_s_option"
lappend check_functions "qresub_check_permissions"

proc qresub_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level else
}

proc qresub_setup {} {
   global ts_user_config
   global qresub_host qresub_queue
   global nonadmin_user 
   global operator

   set qresub_host  [host_conf_get_suited_hosts]
   set qresub_queue [get_queue_instance "all.q" $qresub_host]

   set nonadmin_user $ts_user_config(first_foreign_user)

   # create an operator 
   ts_log_fine "adding $ts_user_config(second_foreign_user) as operator"
   if {[add_operator $ts_user_config(second_foreign_user)] != 0} {
      ts_log_severe "Unable to add operator $ts_user_config(second_foreign_user)"
   }

   set operator $ts_user_config(second_foreign_user)

}

proc qresub_cleanup {} {
   global operator   
   global ts_user_config
 
   delete_all_jobs
   wait_for_end_of_all_jobs

   # delete operator
   if {[delete_operator $ts_user_config(second_foreign_user)] != 0} {
      ts_log_severe "Unable to delete operator $ts_user_config(second_foreign_user)"
   }

}



#****** check.60/qresub_minus_h_u_option() *************************************
#  NAME
#     qresub_minus_h_u_option() -- Checks -h u option. 
#
#  SYNOPSIS
#     qresub_minus_h_u_option { } 
#
#  FUNCTION
#     Checks -h u option. 
#
#*******************************************************************************
proc qresub_minus_h_u_option { } {
   global nonadmin_user
   get_current_cluster_config_array ts_config

   # -h | -h {u|s|o|n|U|O|S}...

   # `u'  denotes a user hold.

   # submit job with a user hold
   set job_id [submit_job "-o /dev/null -e /dev/null -h -b y sleep 2000" 1 60 $ts_config(master_host) $nonadmin_user]

   # resubmit job with a user hold  
   set ret [resubmit_job "-h u $job_id" 0 60 $ts_config(master_host) $nonadmin_user]

   if {$ret != 3 && $ret != 1} {
      ts_log_severe "resubmission of job $job_id with user hold (-h u) was not possible ($ret)!"
      return 
   }

   # delete user hold 
   set option "-h u"
   ts_log_fine "release user hold as non admin user $nonadmin_user for job $job_id"
   set qalterresult [start_sge_bin "qrls" "$option $job_id" $ts_config(master_host) $nonadmin_user]
   if {$prg_exit_state != 0} {
      ts_log_severe "qrls $option as non admin user failed:\n$qalterresult"
      return
   }
   
   delete_all_jobs
}


#****** check.60/qresub_minus_h_s_option() *************************************
#  NAME
#     qresub_minus_h_s_option() -- Checks qresub -h s option. 
#
#  SYNOPSIS
#     qresub_minus_h_s_option { } 
#
#  FUNCTION
#     Checks qresub -h s option. 
#
#*******************************************************************************
proc qresub_minus_h_s_option { } {
   global nonadmin_user
   global operator
   get_current_cluster_config_array ts_config

   # `s'  denotes a system hold.

   # ------------------------------------------------------------------
   # resub with system hold should not be allowed for the nonadmin_user 
   # ------------------------------------------------------------------

   # submit job with a user hold
   set job_id [submit_job "-o /dev/null -e /dev/null -h -b y sleep 2000" 1 60 $ts_config(master_host) $nonadmin_user]

   # resubmit job with a system hold  
   set ret [resubmit_job "-h s $job_id" 0 60 $ts_config(master_host) $nonadmin_user]

   # expect that the resubmitting user has manager privileges 
   if {$ret != -5} {
      ts_log_severe "resubmission of job $job_id with system hold (-h s) was possible for non manager!"
      return 
   } else {
      ts_log_fine "Ok! It is not allowed to set a system hold for non manager user!"
   }

   # --------------------------------------------------------------------------------------
   # resub with system hold should be allowed for the default user, because he is a manager 
   # --------------------------------------------------------------------------------------

   # submit job with a user hold
   set job_id [submit_job "-o /dev/null -e /dev/null -h -b y sleep 2000" 1 60 $ts_config(master_host)]

   # resubmit job with a system hold  
   set ret [resubmit_job "-h s $job_id" 0 60 $ts_config(master_host)]

   # expect that the resubmitting user has manager privileges 
   if {$ret != 1 && $ret != 3} {
      ts_log_severe "resubmission of job $job_id with system hold (-h s) was not possible for manager ($ret)!"
      return 
   } else {
      ts_log_fine "Ok! It is allowed to set a system hold for manager!"
   }

   # ---------------------------------------------------------------------------------
   # resub with system hold should not be allowed for the operator, only for a manager 
   # ---------------------------------------------------------------------------------

   # submit job with a user hold
   set job_id [submit_job "-o /dev/null -e /dev/null -h -b y sleep 2000" 1 60 $ts_config(master_host) $operator]

   # resubmit job with a system hold  
   set ret [resubmit_job "-h s $job_id" 0 60 $ts_config(master_host) $operator]

   # expect that the resubmitting user has manager privileges 
   if {$ret != -5} {
      ts_log_severe "resubmission of job $job_id with system hold (-h s) was possible for operator ($ret)!"
      return 
   } else {
      ts_log_fine "Ok! It is not allowed to set a system hold for an operator!"
   }

   delete_all_jobs
}

#****** check.60/qresub_minus_h_o_option() *************************************
#  NAME
#     qresub_minus_h_o_option() -- Checks qresub -h o option. 
#
#  SYNOPSIS
#     qresub_minus_h_o_option { } 
#
#  FUNCTION
#     Checks qresub -h o option.  
#
#*******************************************************************************
proc qresub_minus_h_o_option { } {
   global nonadmin_user
   global operator
   get_current_cluster_config_array ts_config


   # `o'  denotes an operator hold.
   # --------------------------------------------------------------------
   # resub with operator hold should not be allowed for the nonadmin_user 
   # --------------------------------------------------------------------

   # submit job with an operator hold
   set job_id [submit_job "-o /dev/null -e /dev/null -h -b y sleep 2000" 1 60 $ts_config(master_host) $nonadmin_user]

   # resubmit job with an operator hold  
   set ret [resubmit_job "-h o $job_id" 0 60 $ts_config(master_host) $nonadmin_user]

   # expect that the resubmitting user has no operator privileges 
   if {$ret != -4} {
      ts_log_severe "resubmission of job $job_id with operator hold (-h o) was possible but user is not operator!"
      return 
   }

   # ----------------------------------------------------------------------------------------
   # resub with operator hold should be allowed for the default user, because he is a manager 
   # ----------------------------------------------------------------------------------------

   # submit job with a user hold
   set job_id [submit_job "-o /dev/null -e /dev/null -h -b y sleep 2000" 1 60 $ts_config(master_host)]

   # resubmit job with a operator hold  
   set ret [resubmit_job "-h o $job_id" 0 60 $ts_config(master_host)]

   # expect that the resubmitting user has manager privileges 
   if {$ret != 1 && $ret != 3} {
      ts_log_severe "resubmission of job $job_id with system hold (-h o) was not possible for manager ($ret)!"
      return 
   } else {
      ts_log_fine "Ok! It is allowed to set a system hold for operator!"
   }

   # ----------------------------------------------------------------
   # resub with operator hold should be allowed for the operator user 
   # ----------------------------------------------------------------

   # submit job with a user hold
   set job_id [submit_job "-o /dev/null -e /dev/null -h -b y sleep 2000" 1 60 $ts_config(master_host) $operator]

   # resubmit job with a operator hold  
   set ret [resubmit_job "-h o $job_id" 0 60 $ts_config(master_host) $operator]

   # expect that the resubmitting user has operator privileges 
   if {$ret != 1 && $ret != 3} {
      ts_log_severe "resubmission of job $job_id with system hold (-h o) was not possible for operator ($ret)!"
      return 
   } else {
      ts_log_fine "Ok! It is allowed to set a system hold for operator!"
   }

   delete_all_jobs
}

#****** check.60/qresub_minus_help_option() ************************************
#  NAME
#     qresub_minus_help_option() -- ??? 
#
#  SYNOPSIS
#     qresub_minus_help_option { } 
#
#  FUNCTION
#     Checks if -help has return code 0 and qresub "with no option" has 
#     return code 1. Checks if usage message is printed when submitting 
#     with no option.
#
#*******************************************************************************
proc qresub_minus_help_option { } {
   global nonadmin_user
   get_current_cluster_config_array ts_config
   
   set ret [resubmit_job "-help"]
   if { $ret != 2 } {
      ts_log_severe "Error code from qresub -help was: $ret"
   }
   
   
   # check return code
   set output [start_sge_bin "qresub" "-help" $ts_config(master_host) $nonadmin_user]
   if {$ts_config(gridengine_version) >= "61"} {
      if { $prg_exit_state != 0 } {
         ts_log_severe "The return code of qresub -help was not 0 ($prg_exit_state)!"
      }
   }
   
   # check return code
   set output_no_option [start_sge_bin "qresub" "" $ts_config(master_host) $nonadmin_user]
   
   if { $prg_exit_state != 1 } {
      ts_log_severe "The return code of qresub with no further option was not 1 ($prg_exit_state)!"
   }  
   
   # check if qresub with no option print help output 
   if { [string first $output $output_no_option] == -1 } {
      ts_log_severe "qresub without option didn't return the same help message as qresub -help"
   }
   
   delete_all_jobs
}


#****** check.60/qresub_check_permissions() ************************************
#  NAME
#     qresub_check_permissions() -- Checks if permissions are taken into account 
#     when resubmitting user jobs. 
#
#  SYNOPSIS
#     qresub_check_permissions { } 
#
#  FUNCTION
#     Checks that only managers can resubmit user jobs.  
#
#*******************************************************************************
proc qresub_check_permissions { } {
   global ts_user_config
   global nonadmin_user
   global operator
   get_current_cluster_config_array ts_config

   # -----------------------------------------------
   # submit as nonadmin_user and resubmit as manager  
   # -----------------------------------------------
   
   # submit job with a user hold
   set job_id [submit_job "-o /dev/null -e /dev/null -h -b y sleep 2000" 1 60 $ts_config(master_host) $nonadmin_user]

   # resubmit job as current user (manager)  
   set ret [resubmit_job "$job_id" 0 60 $ts_config(master_host)]

   # expect that the resubmitting user has manager privileges 
   if {$ret != 1 && $ret != 3} {
      ts_log_severe "resubmission of job $job_id from user $nonadmin_user was not possible for manager/current user ($ret)!"
      return 
   } else {
      ts_log_fine "Ok! It is allowed to resub a job from another as manager!"
   }

   # -------------------------------------------------------
   # submit as nonadmin_user and resubmit as nonadmin_user_2  
   # -> has to fail
   # -------------------------------------------------------

   # submit job with a user hold as current user
   set job_id [submit_job "-o /dev/null -e /dev/null -h -b y sleep 2000" 1 60 $ts_config(master_host)]

   # resubmit job as first_foreign_user 
   set ret [resubmit_job "$job_id" 0 60 $ts_config(master_host) $ts_user_config(first_foreign_user)]

   # expect that the resubmitting user has operator privileges 
   if {$ret != 1 && $ret != 3} {
      ts_log_fine "resubmission of own job $job_id was not possible for other normal user ($ret)!"
      return 
   } else {
      ts_log_severe "resubmission of own job $job_id from another user was possible - this should not be allowed!"
   }

   delete_all_jobs
}   

#                                                             max. column:     |
#****** qresub/qresub_issue_2726 ******
# 
#  NAME
#     qresub_issue_2726 -- Check if DB_NOTFOUND is in output message.  
#
#  SYNOPSIS
#     qresub_issue_2726 { } 
#
#  FUNCTION
#     Checks if the issue 2726 is present. 
#
#*******************************
proc qresub_issue_2726 { } {
   global qresub_queue
   global nonadmin_user
   get_current_cluster_config_array ts_config

   # This jobs has to be long enough to survive the starting of the next jobs
   set job_id [submit_job "-o /dev/null -e /dev/null -q $qresub_queue -b y sleep 2" 1 60 $ts_config(master_host) $nonadmin_user]
   if {$job_id < 0 } {
      ts_log_warning "Couldn't submit a binary sleeper job!"
      return
   }
   
   # Do a qresub 
   set output [start_sge_bin "qresub" "$job_id" $ts_config(master_host) $nonadmin_user]
   
   if {[string first "DB_NOTFOUND" $output] != -1} {
      # this is bug "qresub on -b y jobs raises wrong error condition"
      # a script is searched in berkeley db bot nothing is found 
      ts_log_severe "It is bug 2726: qresub on -b y jobs raises wrong error condition"
      return
   } else {
      ts_log_fine "Everything is fine: Bug 2726 does NOT occur!"
   }

   delete_all_jobs
}

