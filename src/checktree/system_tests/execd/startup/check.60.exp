#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__



# Template for testsuite check
# 
# 1) replace the following symbols by your test specific names
#    o startup_execd   name of your test (e.g. consumable_test)
#    o 
#
# 2) set check_root_access_needs to "yes" or "no" (if you need root access)
#
# 3) set check_category
#
# 4) set check_highest_level ( e.g.: runlevel "short" has reserved values from 0 to 99 ) 
#
# 5) set check_needs (e.g.: "init_core_system" this means that this test is not 
#    started without succesfull run of "init_core_system" test
# 6) implement the default functions (e.g.: startup_execd_init_level)
#
# 7) you can add any function name to check_functions (all function (no paramters allowed) are started 
#    within each runlevel number
#    PLEASE finish each check_function with a set_error() function call
#    PLEASE use add_proc_error() to submit errors
#    add_proc_error() is used in many testsuite standard functions, so not every 
#    function call must check the return state.
# 



# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "startup_execd_init_level"

# define test's name and run level descriptions
set check_name            "startup_execd"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   3
set check_description(0)  "Starting second execd on host with same execd port"
set check_description(1)  "Starting second execd on host with different execd ports"
set check_description(2)  "Starting execd without running qmaster"
set check_description(3)  "Kill execd with -9 and restart execd"
set check_description(4)  ""
set check_description(5)  ""
set check_description(6)  ""
set check_description(7)  ""
set check_description(8)  ""







# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function startup_execd_setup
set check_cleanup_function startup_execd_cleanup



# define test's procedure order
set check_functions ""
lappend check_functions "startup_execd_test1"


global startup_execd_test_hosts
global startup_execd_saved_slot_count

proc startup_execd_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0
      } 
      "1" {
         return 0
      }
      "2" {
         return 0
      }
      "3" {
         return 0
      }
   } 
   return -1  ;# no other level 
}




# -------- local test procedures: initialization------------------------------


proc startup_execd_setup  {} {
   global CHECK_OUTPUT ts_config

   set_error 0 "ok"
}

proc startup_execd_cleanup  {} {
   global CHECK_OUTPUT ts_config

   set_error 0 "ok"
}


proc startup_execd_test1 {} {
   global startup_execd_test_hosts check_description CHECK_ARCH CHECK_HOST
   global CHECK_OUTPUT ts_config CHECK_CORE_MASTER CHECK_ACT_LEVEL CHECK_SCRIPT_FILE_DIR

   set execd_port $ts_config(commd_port)
   incr execd_port 1
   
   set hostname [lindex $ts_config(execd_nodes) 0]

   puts $CHECK_OUTPUT "==================================================="
   puts $CHECK_OUTPUT $check_description($CHECK_ACT_LEVEL)
   puts $CHECK_OUTPUT "==================================================="

   puts $CHECK_OUTPUT "login to host $hostname as user root ..."
   set output [start_remote_prog "$hostname" "root" "echo" "hallo"]
   puts $CHECK_OUTPUT $output

   if { $CHECK_ACT_LEVEL == 0 } {
      set CL_RETVAL_BIND_SOCKET [translate $CHECK_HOST 1 0 0 [sge_macro MSG_CL_RETVAL_BIND_SOCKET]]
      
      set start_time [timestamp]
      puts $CHECK_OUTPUT "Starting second execd on host $hostname (on the running SGE_EXECD_PORT=$execd_port) ..."
      set remote_arch [ resolve_arch $hostname ]
      set output [start_remote_prog "$hostname" "root" "$ts_config(product_root)/bin/$remote_arch/sge_execd" ""]
      set end_time [timestamp]

      set run_time [ expr ( $end_time - $start_time ) ]

      set output [string trim $output]

      puts $CHECK_OUTPUT "--- output start ---"
      puts $CHECK_OUTPUT $output
      puts $CHECK_OUTPUT "--- output end ---"

      set lines [split $output "\n"]
      set line_count [llength $lines]

      puts $CHECK_OUTPUT "startup took $run_time seconds."
      puts $CHECK_OUTPUT "output has $line_count lines."

      if { [string match "*$CL_RETVAL_BIND_SOCKET*" $output ] } {
         puts $CHECK_OUTPUT "==> Found \"$CL_RETVAL_BIND_SOCKET\" in output. OK."
      } else {
         add_proc_error "startup_execd_test1" -1 "can't find \"$CL_RETVAL_BIND_SOCKET\" output in:\n$output"
      }

      if { $run_time <= 35 } {
         puts $CHECK_OUTPUT "==> Starttime is below 35 seconds. OK."
      } else {
         add_proc_error "startup_execd_test1" -1 "Starting up execd took $run_time ( > 35 seconds)"
      }

      if { $line_count <= 5 } {
         puts $CHECK_OUTPUT "==> Execd did not print more that 5 lines. OK."
      } else {
         add_proc_error "startup_execd_test1" -1 "Execd printed out $line_count lines ( > 5 ):\n$output"
      }
   }

   if { $CHECK_ACT_LEVEL == 1 } {

      add_proc_error "startup_execd_test1" -3 "This test would fail as long BT: 6350264, IZ: 1893 is not fixed!\nSkipping $check_description($CHECK_ACT_LEVEL)"
      # TODO: activate this code after BT: 6350264, IZ: 1893 is fixed
#      set reserved_execd_port $ts_config(reserved_port)
#
#      set CL_RETVAL_ENDPOINT_NOT_UNIQUE [translate $CHECK_HOST 1 0 0 [sge_macro MSG_CL_RETVAL_ENDPOINT_NOT_UNIQUE]]
#
#      
#      set start_time [timestamp]
#      puts $CHECK_OUTPUT "Starting second execd on host $hostname (on SGE_EXECD_PORT=$reserved_execd_port) ..."
#      set remote_arch [ resolve_arch $hostname ]
#
#      set execd_envirnoment(SGE_EXECD_PORT) $reserved_execd_port
#      set output [start_remote_prog "$hostname" "root" "$ts_config(product_root)/bin/$remote_arch/sge_execd" ""  prg_exit_state 60 0 execd_envirnoment ]
#      set end_time [timestamp]
#
#      set run_time [ expr ( $end_time - $start_time ) ]
#
#      set output [string trim $output]
#      puts $CHECK_OUTPUT "--- output start ---"
#      puts $CHECK_OUTPUT $output
#      puts $CHECK_OUTPUT "--- output end ---"
#
#      set lines [split $output "\n"]
#      set line_count [llength $lines]
#
#      puts $CHECK_OUTPUT "startup took $run_time seconds."
#      puts $CHECK_OUTPUT "output has $line_count lines."
#
#      if { [string match "*$CL_RETVAL_ENDPOINT_NOT_UNIQUE*" $output ] } {
#         puts $CHECK_OUTPUT "==> Found \"$CL_RETVAL_ENDPOINT_NOT_UNIQUE\" in output. OK."
#      } else {
#         add_proc_error "startup_execd_test1" -1 "can't find \"$CL_RETVAL_ENDPOINT_NOT_UNIQUE\" output in:\n$output"
#      }
#
#      if { $run_time <= 25 } {
#         puts $CHECK_OUTPUT "==> Starttime is below 25 seconds. OK."
#      } else {
#         add_proc_error "startup_execd_test1" -1 "Starting up execd took $run_time ( > 25 seconds)"
#      }
#
#      if { $line_count <= 5 } {
#         puts $CHECK_OUTPUT "==> Execd did not print more that 5 lines. OK."
#      } else {
#         add_proc_error "startup_execd_test1" -1 "Execd printed out $line_count lines ( > 5 ):\n$output"
#      }
   }


   if { $CHECK_ACT_LEVEL == 2 } {

      set CL_RETVAL_CONNECT_ERROR [translate $CHECK_HOST 1 0 0 [sge_macro MSG_CL_RETVAL_CONNECT_ERROR]]

      shutdown_system_daemon $ts_config(master_host) "qmaster"
      shutdown_system_daemon $hostname "execd"
      
      set start_time [timestamp]
      puts $CHECK_OUTPUT "Starting execd on host $hostname (on SGE_EXECD_PORT=$execd_port) ..."
      set remote_arch [ resolve_arch $hostname ]

      set output [start_remote_prog "$hostname" "root" "$ts_config(product_root)/bin/$remote_arch/sge_execd" ""]
      set end_time [timestamp]

      set run_time [ expr ( $end_time - $start_time ) ]

      set output [string trim $output]
      puts $CHECK_OUTPUT "--- output start ---"
      puts $CHECK_OUTPUT $output
      puts $CHECK_OUTPUT "--- output end ---"

      set lines [split $output "\n"]
      set line_count [llength $lines]

      puts $CHECK_OUTPUT "startup took $run_time seconds."
      puts $CHECK_OUTPUT "output has $line_count lines."

      if { [string match "*$CL_RETVAL_CONNECT_ERROR*" $output ] } {
         puts $CHECK_OUTPUT "==> Found \"$CL_RETVAL_CONNECT_ERROR\" in output. OK."
      } else {
         add_proc_error "startup_execd_test1" -1 "can't find \"$CL_RETVAL_CONNECT_ERROR\" output in:\n$output"
      }

      if { $run_time <= 25 } {
         puts $CHECK_OUTPUT "==> Starttime is below 25 seconds. OK."
      } else {
         add_proc_error "startup_execd_test1" -1 "Starting up execd took $run_time ( > 25 seconds)"
      }

      if { $line_count <= 5 } {
         puts $CHECK_OUTPUT "==> Execd did not print more that 5 lines. OK."
      } else {
         add_proc_error "startup_execd_test1" -1 "Execd printed out $line_count lines ( > 5 ):\n$output"
      }

      startup_qmaster 0

      wait_for_load_from_all_queues 60
   }

   if { $CHECK_ACT_LEVEL == 3 } {

      shutdown_system_daemon $hostname "execd" 0
      
      set start_time [timestamp]
      puts $CHECK_OUTPUT "Starting execd on host $hostname (on SGE_EXECD_PORT=$execd_port) ..."
      set remote_arch [ resolve_arch $hostname ]

      set output [start_remote_prog "$hostname" "root" "$ts_config(product_root)/bin/$remote_arch/sge_execd" ""]
      set end_time [timestamp]

      set run_time [ expr ( $end_time - $start_time ) ]

      set output [string trim $output]
      puts $CHECK_OUTPUT "--- output start ---"
      puts $CHECK_OUTPUT $output
      puts $CHECK_OUTPUT "--- output end ---"

      set lines [split $output "\n"]
      set line_count [llength $lines]

      puts $CHECK_OUTPUT "startup took $run_time seconds."
      puts $CHECK_OUTPUT "output has $line_count lines."

      if { $run_time <= 25 } {
         puts $CHECK_OUTPUT "==> Starttime is below 25 seconds. OK."
      } else {
         add_proc_error "startup_execd_test1" -1 "Starting up execd took $run_time ( > 25 seconds)"
      }

      if { $line_count <= 5 } {
         puts $CHECK_OUTPUT "==> Execd did not print more that 5 lines. OK."
      } else {
         add_proc_error "startup_execd_test1" -1 "Execd printed out $line_count lines ( > 5 ):\n$output"
      }

      wait_for_load_from_all_queues 60
   }
  
   set my_timeout [timestamp]
   incr my_timeout 100
   while { [timestamp] < $my_timeout } {
      # check for only one running execd on $hostname
      puts $CHECK_OUTPUT "test if there is only one execd running on host $hostname ..."
      set found_p [ ps_grep "$ts_config(product_root)" $hostname ]
      set execd_count 0
      foreach elem $found_p {
         if { [string match "*sge_execd*" $ps_info(string,$elem)] } {
            puts $CHECK_OUTPUT $ps_info(string,$elem)
            incr execd_count 1
         }
      }
      if { $execd_count == 1 } {
         break
      }
      after 3000
   }

   if { $execd_count != 1 } {
      add_proc_error "startup_execd_test1" -1 "There are $execd_count execds running on host $hostname"
   } else {
      puts $CHECK_OUTPUT "Found $execd_count sge_execd process on host $hostname. OK."
   }

   set_error 0 "ok"
}


