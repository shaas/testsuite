#!/vol2/TCL_TK/glinux/bin/expect --
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# Define the global veriables to give them back
global check_name check_description check_needs check_functions check_errno check_errstr 
global check_category
set check_name         "loadcheck"
set check_category     "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_description(0)  "checking \"loadcheck\" binary in utilbin - num_proc for each execution host"
set check_needs        ""  ;# dependencies of this check (name of other check)

# define a level initialization procedure:
set check_init_level_procedure "loadcheck_init_level"

# setup and cleanup functions
set check_setup_function ""
set check_cleanup_function ""

# define test's procedure order
set check_functions    ""             ;# functions to call (in order)
lappend check_functions    "check_numb_proc"  
set check_errno       "-1"                          ;# 0 -> OK , != 0 means error
set check_errstr        "was never running"           ;# string for error description


proc loadcheck_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level else
}

#                                                             max. column:     |
#****** loadcheck/get_numb_proc() ******
# 
#  NAME
#     get_numb_proc -- ??? 
#
#  SYNOPSIS
#     get_numb_proc { hostname } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#     hostname - ??? 
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc get_numb_proc { hostname } {
  global CHECK_PRODUCT_ROOT CHECK_USER

  set result ""
  set remote_arch [ resolve_arch $hostname ]

  set result [start_remote_prog $hostname $CHECK_USER "$CHECK_PRODUCT_ROOT/utilbin/$remote_arch/loadcheck" ""]
   
  # split each line as listelement
  set help [split $result "\n"]

  foreach elem $help {
     if {[string compare [lindex $elem 0] "num_proc"] == 0} {
        set numproc [lindex $elem 1]
     }
  }

  return  $numproc    
}


# here starts the test
#                                                             max. column:     |
#****** loadcheck/check_numb_proc() ******
# 
#  NAME
#     check_numb_proc -- ??? 
#
#  SYNOPSIS
#     check_numb_proc { } 
#
#  FUNCTION
#     ??? 
#
#  INPUTS
#
#  RESULT
#     ??? 
#
#  EXAMPLE
#     ??? 
#
#  NOTES
#     ??? 
#
#  BUGS
#     ??? 
#
#  SEE ALSO
#     ???/???
#*******************************
proc check_numb_proc {} {
   global ts_config
   global CHECK_OUTPUT 

   foreach host $ts_config(execd_nodes) {
      set num_expected [node_get_processors $host]
      set num_proc [get_numb_proc $host]

      puts $CHECK_OUTPUT "$host: Expected processors: $num_expected"
      puts $CHECK_OUTPUT "$host: read processors:     $num_proc"
  
      if { $num_proc != $num_expected } {
         add_proc_error "check_numb_proc" -1 "num_proc=$num_proc doesn't match $num_expected expected processors on host $host"
      }
   }

   # ok - no errors, very very nice ;-) 
   set_error 0 "check_numb_proc - no errors"
}
