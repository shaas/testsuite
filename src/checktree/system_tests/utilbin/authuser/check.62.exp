#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

#set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "authuser_init_level"

# define test's name and run level descriptions
set check_name            "authuser"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "test authuser"


# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
#set check_setup_function authuser_setup
#set check_cleanup_function authuser_cleanup



# define test's procedure order
set check_functions {}
lappend check_functions "test_authuser_permissions"

proc authuser_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------
#
# Currently we don't need setup/cleanup
#proc authuser_setup {} {
#   global ts_config CHECK_OUTPUT
#}
#
#proc authuser_cleanup {} {
#   global ts_config CHECK_OUTPUT
#}
#

#test whether authuser with non-root user works!
proc test_authuser_permissions {} {
   global ts_config CHECK_OUTPUT CHECK_USER

   set arch [resolve_arch $ts_config(master_host)]
   set authuser "$ts_config(product_root)/utilbin/$arch/authuser"
   puts $CHECK_OUTPUT "test_authuser_permissions: negative test with user:$CHECK_USER on host:$ts_config(master_host)"

   set sid [open_remote_spawn_process $ts_config(master_host) $CHECK_USER $authuser "system"]
   set sp_id [lindex $sid 1]
   set ONLYSUUSER [translate_macro MSG_AUTHUSER_ONLY_ROOT_S "*"]

   expect {
      -i $sp_id "sername:" {
       add_proc_error "test_authuser_permissions" -1 "Got username question ...negative test failed!!!"
      }
      -i $sp_id $ONLYSUUSER {
       puts $CHECK_OUTPUT "Got expected error, \n test_authuser_permissions negative test success!!!"
      }
      -i $sp_id default {
       add_proc_error "test_authuser_permissions" -1 "Generic error, ...negative test failed!!!"
     }
   }

   close_spawn_process $sid
}
