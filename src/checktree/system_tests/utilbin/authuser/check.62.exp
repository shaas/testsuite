#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "authuser_init_level"

# define test's name and run level descriptions
set check_name            "authuser"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "test authuser"


# define test's dependencies
set check_needs           "init_core_system" 

# define test's procedure order
set check_functions {}
lappend check_functions "test_authuser"

proc authuser_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 {
         return 0
      }
   }

   return -1  ;# no other level
}

proc test_authuser {} {
   global ts_config CHECK_USER

   foreach host $ts_config(execd_nodes) {
      set arch [resolve_arch $host]
      set authuser "$ts_config(product_root)/utilbin/$arch/authuser"

      set ONLYSUUSER [translate_macro MSG_AUTHUSER_ONLY_ROOT_S "*"]

      set sid [open_remote_spawn_process $host $CHECK_USER $authuser "system"]
      set sp_id [lindex $sid 1]

      set timeout 10
      expect {
         -i $sp_id eof {
            ts_log_severe "got eof while waiting for authuser output on host $host"
         }
         -i $sp_id timeout {
            ts_log_severe "timeout while waiting for authuser output on host $host"
         }
         -i $sp_id $ONLYSUUSER {
            ts_log_severe "authuser binary apparently not suid root:\n$ONLYSUUSER"
         }
         -i $sp_id "sername:" {
            ts_log_fine "got username question, sending \"root\""
            ts_send $sp_id "root\n" $host
            exp_continue
         }
         -i $sp_id "assword:" {
            after 1000
            set root_passwd [get_root_passwd]
            ts_log_fine "got password question, sending root passwd"
            ts_send $sp_id "${root_passwd}\n" $host 1
            exp_continue
         }
         -i $sp_id "_exit_status_:(*)" {
            set exit_status [get_string_value_between "_exit_status_:(" ")" $expect_out(0,string)]
            ts_log_fine "authuser exited with exit code $exit_status"
            if {$exit_status != 0} {
               ts_log_severe "authuser exited with exit status $exit_status on host $host"
            }
         }
      }

      close_spawn_process $sid
   }
}

