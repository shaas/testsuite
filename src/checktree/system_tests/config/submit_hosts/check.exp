#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

# set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "submit_hosts_init_level"

# define test's name and run level descriptions
set check_name            "submit_hosts"
set check_category        "COMPATIBILITY SYSTEM L10N VERIFIED"
set check_highest_level   1
set check_description(0)  "checking submit host functionality without local configuration"
set check_description(1)  "checking submit host functionality with local qsh_command"

# define test's dependencies
set check_needs           "init_core_system" 


# setup and cleanup functions
set check_setup_level_function "submit_hosts_setup"
set check_cleanup_level_function "submit_hosts_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "submit_hosts_test"
global submit_hosts_use_local_conf

proc submit_hosts_init_level {} {
  global CHECK_ACT_LEVEL
  global submit_hosts_use_local_conf

  switch -- $CHECK_ACT_LEVEL {
     "0" { set submit_hosts_use_local_conf 0 ; return 0  } 
     "1" { set submit_hosts_use_local_conf 1 ; return 0  }
  } 
  return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------



proc submit_hosts_setup {} {
   global CHECK_OUTPUT
   global CHECK_PRODUCT_ROOT
   global CHECK_ARCH
   global CHECK_SUBMIT_ONLY_HOSTS
   global CHECK_JOB_OUTPUT_DIR
   global submit_hosts_use_local_conf

   foreach submit_host $CHECK_SUBMIT_ONLY_HOSTS { 
      catch {  eval exec "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf" "-ds $submit_host" } result
      puts $CHECK_OUTPUT "$result"

      if { $submit_hosts_use_local_conf != 0 } {
         set used_arch [resolve_arch $submit_host]
         puts $CHECK_OUTPUT "generating submit script for host $submit_host"
         create_shell_script $CHECK_JOB_OUTPUT_DIR/rsh_${submit_host}.sh $submit_host "echo" "WRAPPER_SCRIPT ; $CHECK_PRODUCT_ROOT/utilbin/$used_arch/rsh \$\*"
         puts $CHECK_OUTPUT "generating local cluster configuration for host $submit_host"
         set new_conf(rsh_command) "$CHECK_JOB_OUTPUT_DIR/rsh_${submit_host}.sh"
         set_config new_conf $submit_host 1
         puts $CHECK_OUTPUT "setup done"
      } else {
         puts $CHECK_OUTPUT "removing local cluster configuration for host $submit_host"
         catch {  eval exec "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf" "-dconf $submit_host" } result
         puts $CHECK_OUTPUT "$result"
      }
   }

   puts $CHECK_OUTPUT "done"
   set_error 0 "ok"
}

proc submit_hosts_cleanup {} {
   global CHECK_OUTPUT
   global CHECK_PRODUCT_ROOT 
   global CHECK_ARCH
   global CHECK_SUBMIT_ONLY_HOSTS 
   global CHECK_JOB_OUTPUT_DIR
   global submit_hosts_use_local_conf

   delete_all_jobs
   wait_for_end_of_all_jobs 60

   foreach submit_host $CHECK_SUBMIT_ONLY_HOSTS { 
      catch {  eval exec "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf" "-ds $submit_host" } result
      puts $CHECK_OUTPUT "$result"
    
      puts $CHECK_OUTPUT "removing local cluster configuration for host $submit_host"
      catch {  eval exec "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf" "-dconf $submit_host" } result
      puts $CHECK_OUTPUT "$result"

      file delete $CHECK_JOB_OUTPUT_DIR/rsh_${submit_host}.sh
       
   }
   set_error 0 "ok"
}



proc submit_hosts_test {} {
   global ts_config
   global CHECK_OUTPUT
   global CHECK_SUBMIT_ONLY_HOSTS 
   global CHECK_USER
   global CHECK_PRODUCT_ROOT CHECK_ARCH
   global submit_hosts_use_local_conf
   global CHECK_CORE_MASTER
   global CHECK_HOST
   

   if {[ llength $CHECK_SUBMIT_ONLY_HOSTS ] <= 0 } {
      set_error -3 "No submit hosts specified in test configuration file - run setup option"
      return
   }

   set actual_id [ submit_job "-o /dev/null -e /dev/null $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1" ]
   wait_for_jobend $actual_id "leeper" 30 0
 
   foreach submit_host $CHECK_SUBMIT_ONLY_HOSTS { 
      puts $CHECK_OUTPUT "testing host $submit_host"

      puts $CHECK_OUTPUT "*** step 1 on $submit_host ***"
      set arguments "-o /dev/null -e /dev/null $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 20"
      set output [ start_remote_prog $submit_host $CHECK_USER "qsub" $arguments ]
      puts $CHECK_OUTPUT $output
      puts $CHECK_OUTPUT "qsub exit state: $prg_exit_state"
      if { $prg_exit_state == 0 } {
         add_proc_error "submit_hosts_test" -1 "submitting on host $submit_host should not work here"
      } 
 
      puts $CHECK_OUTPUT "*** step 2 on $submit_host ***"
      set output [ start_remote_prog $submit_host $CHECK_USER "qstat" "-f" ]
      puts $CHECK_OUTPUT $output
      puts $CHECK_OUTPUT "qstat exit state: $prg_exit_state"
      if { $prg_exit_state == 0 } {
         add_proc_error "submit_hosts_test" -1 "qstat -f on host $submit_host should not work here"
      }

      puts $CHECK_OUTPUT "*** step 3 on $submit_host ***"
      set output [ start_remote_prog $submit_host $CHECK_USER "qrsh" "uname -n" ]
      puts $CHECK_OUTPUT $output
      puts $CHECK_OUTPUT "qrsh exit state: $prg_exit_state"
      if { $prg_exit_state == 0 } {
         add_proc_error "submit_hosts_test" -1 "qrsh on host $submit_host should not work here"
      }

      puts $CHECK_OUTPUT "*** step 4 on $submit_host ***"
      set output [ start_remote_prog $submit_host $CHECK_USER "qconf" "-mconf" ]
      puts $CHECK_OUTPUT $output
      puts $CHECK_OUTPUT "qconf exit state: $prg_exit_state"
      set NOR_SUBMIT_OR_ADMIN_HOST [ translate $CHECK_HOST 1 0 0 [sge_macro MSG_SGETEXT_NOSUBMITORADMINHOST_S] $submit_host] 
      if { [ string first "neither submit nor admin host" $output ] < 0 && [ string first $NOR_SUBMIT_OR_ADMIN_HOST $output ] < 0 } {
         add_proc_error "submit_hosts_test" -1 "qconf -mconf on host $submit_host should not work here"
      }
   } 
  
   wait_for_end_of_all_jobs 120
   set actual_id [ submit_job "-o /dev/null -e /dev/null $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 1" ]
   wait_for_jobend $actual_id "leeper" 30 0


   foreach submit_host $CHECK_SUBMIT_ONLY_HOSTS { 
      catch {  eval exec "$CHECK_PRODUCT_ROOT/bin/$CHECK_ARCH/qconf" "-as $submit_host" } result
      puts $CHECK_OUTPUT "$result"
   }
   foreach submit_host $CHECK_SUBMIT_ONLY_HOSTS { 
      puts $CHECK_OUTPUT "testing host $submit_host"
      set arguments "-o /dev/null -e /dev/null $CHECK_PRODUCT_ROOT/examples/jobs/sleeper.sh 10000"
      set output [ start_remote_prog $submit_host $CHECK_USER "qsub" $arguments ]
      puts $CHECK_OUTPUT $output
      puts $CHECK_OUTPUT "qsub exit state: $prg_exit_state"
      if { $prg_exit_state != 0 } {
         add_proc_error "submit_hosts_test" -1 "submitting on host $submit_host doesn't work"
      } 
   }


   foreach submit_host $CHECK_SUBMIT_ONLY_HOSTS { 
      set actual_id [ expr ( $actual_id + 1 ) ]
      wait_for_jobstart $actual_id "leeper" 60
      wait_for_end_of_transfer $actual_id 60
      delete_job $actual_id
   }
   foreach submit_host $CHECK_SUBMIT_ONLY_HOSTS { 
      puts $CHECK_OUTPUT "testing host $submit_host"

      set output [ start_remote_prog $submit_host $CHECK_USER "qstat" "-f" ]
      puts $CHECK_OUTPUT $output
      puts $CHECK_OUTPUT "qstat exit state: $prg_exit_state"
      if { $prg_exit_state != 0 } {
         add_proc_error "submit_hosts_test" -1 "qstat -f on host $submit_host doesn't work"
      } 

      foreach host $ts_config(unique_arch_nodes) {
         set command_args "qrsh -l h=${host} uname -n"
         set output [ start_remote_prog $submit_host $CHECK_USER "qrsh" "-l h=${host} uname -n" ]
         puts $CHECK_OUTPUT $output
         puts $CHECK_OUTPUT "qrsh exit state: $prg_exit_state"
         if { $prg_exit_state != 0 } {
            add_proc_error "submit_hosts_test" -1 "${command_args} on host $submit_host doesn't work\n$output"
         }
         if { $submit_hosts_use_local_conf != 0 } {
            if { [ string first "WRAPPER_SCRIPT" $output] < 0 } {
               add_proc_error "submit_hosts_test" -1 "${command_args} on host $submit_host did not use local configuration\n$output"
            }
         } else {
            if { [ string first "WRAPPER_SCRIPT" $output] >= 0 } {
               add_proc_error "submit_hosts_test" -1 "${command_args} on host $submit_host should not use local configuration\n$output"
            }
         }
         if { [ string first $host $output] < 0 } {
            add_proc_error "submit_hosts_test" -1 "${command_args} on host $submit_host did no \"rsh uname -n\" on host \"${host}\"\n$output"
         }
      }

      set output [ start_remote_prog $submit_host $CHECK_USER "qconf" "-mconf" ]
      puts $CHECK_OUTPUT $output
      puts $CHECK_OUTPUT "qconf exit state: $prg_exit_state"
      if { $prg_exit_state == 0 } {
         add_proc_error "submit_hosts_test" -1 "qconf -mconf on host $submit_host should only work on admin host"
      }

   }
   wait_for_end_of_all_jobs 120

   set_error 0 "ok"
}




