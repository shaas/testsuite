#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__


# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "host_aliases_test_init_level"

# define test's name and run level descriptions
set check_name            "host_aliases_test"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "test host aliases file"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function host_aliases_test_setup
set check_cleanup_function host_aliases_test_cleanup



# define test's procedure order
set check_functions ""
lappend check_functions "host_aliases_test_test1"


global have_host_aliases
set have_host_aliases "false"

proc host_aliases_test_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0
      } 
   } 

   return -1  ;# no other level 
}



# -------- local test procedures: initialization------------------------------


proc host_aliases_test_setup  {} {
   global ts_config have_host_aliases CHECK_USER host_aliases_host
   
   set host_aliases_host ""

   # first try to find host where we can test host aliasing
   foreach host [get_all_hosts] {
      set output [start_sge_bin "gethostbyname" "-all $host" $host "" prg_exit_state 60 "" "utilbin"]
      parse_gethostbyname_output $output
      ts_log_fine "hostname: \"$host_name_array(hostname)\""
      ts_log_fine "sgename:  \"$host_name_array(sgename)\""
      ts_log_fine "aliases:  \"$host_name_array(aliases)\""
      set nr_aliases [llength $host_name_array(aliases)]
      if {$nr_aliases > 0} {
         set host_aliases_host $host
         break;
      }
   }

   if {$host_aliases_host == ""} {
      ts_log_config "can't run test, host $ts_config(master_host) has no aliases"
      return 99
   }
   
   if { [is_remote_file $ts_config(master_host) $CHECK_USER $ts_config(product_root)/$ts_config(cell)/common/host_aliases] } {
      start_remote_prog $ts_config(master_host) $CHECK_USER "mv" \
         "$ts_config(product_root)/$ts_config(cell)/common/host_aliases $ts_config(product_root)/$ts_config(cell)/common/host_aliases.saved"
      start_remote_prog $ts_config(master_host) $CHECK_USER "cp" \
         "$ts_config(product_root)/$ts_config(cell)/common/host_aliases.saved $ts_config(product_root)/$ts_config(cell)/common/host_aliases"
      # if we don't copy the needed host_aliases file the qstat -f will fail which should check the queue loads
      set have_host_aliases "true"
   } else {
      set have_host_aliases "false"
   }
   ts_log_fine "found existing host aliases file: $have_host_aliases"

   delete_remote_file $ts_config(master_host) $CHECK_USER $ts_config(product_root)/$ts_config(cell)/common/host_aliases
   foreach host [get_all_hosts] {
      wait_for_remote_file $host $CHECK_USER $ts_config(product_root)/$ts_config(cell)/common/host_aliases 60 1 1
   }
}

proc host_aliases_test_cleanup  {} {
   global ts_config have_host_aliases CHECK_USER
   
   set host_aliases_file "$ts_config(product_root)/$ts_config(cell)/common/host_aliases"
   set fshost [fs_config_get_server_for_path $host_aliases_file 0]
   if {$fshost == ""} {
      set fshost $ts_config(master_host)
   }

   if {$have_host_aliases == "true"} {
      if {[is_remote_file $fshost $CHECK_USER $host_aliases_file.saved]} {
         delete_remote_file $fshost $CHECK_USER $host_aliases_file

         foreach host [get_all_hosts] {
            wait_for_remote_file $host $CHECK_USER $host_aliases_file 60 1 1
         }
         start_remote_prog $fshost $CHECK_USER "mv" "$host_aliases_file.saved $host_aliases_file"
      }
      foreach host [get_all_hosts] {
         wait_for_remote_file $host $CHECK_USER $host_aliases_file
      }
   } else {
      if {[is_remote_file $fshost $CHECK_USER $host_aliases_file]} {
         delete_remote_file $fshost $CHECK_USER $host_aliases_file
      }
      foreach host [get_all_hosts] {
         wait_for_remote_file $host $CHECK_USER $host_aliases_file 60 1 1
      }
   }
   startup_core_system
   wait_for_load_from_all_queues 60
}

proc parse_gethostbyname_output { output {result host_name_array}} {
   upvar $result res_array
   set lines [split $output "\n"]
   foreach line $lines {
      if {[string match "*Hostname*" $line]} {
         set help [split $line ":"]
         set hostname [lindex $help 1]
         set res_array(hostname) [string trim $hostname]
      }
      if {[string match "*SGE name:*" $line]} {
         set help [split $line ":"]
         set hostname [lindex $help 1]
         set res_array(sgename) [string trim $hostname]
      }
      if {[string match "*Aliases:*" $line]} {
         set help [split $line ":"]
         set hostname [lindex $help 1]
         set res_array(aliases) [string trim $hostname]
      }
   }
}

proc host_aliases_test_test1 {} {
   global host_aliases_test_test_hosts check_description CHECK_USER
   global ts_config CHECK_ACT_LEVEL
   global host_aliases_host

   ts_log_fine $check_description($CHECK_ACT_LEVEL)

   shutdown_core_system

   if { $CHECK_ACT_LEVEL == 0 } {
      set output [start_sge_bin "gethostbyname" "-all $host_aliases_host" $host_aliases_host "" prg_exit_state 60 "" "utilbin"]
      parse_gethostbyname_output $output
      ts_log_fine "hostname: \"$host_name_array(hostname)\""
      ts_log_fine "sgename:  \"$host_name_array(sgename)\""
      ts_log_fine "aliases:  \"$host_name_array(aliases)\""
      set nr_aliases [llength $host_name_array(aliases)]
      if { $host_name_array(hostname) != $host_name_array(sgename) } {
         ts_log_severe "there seems to be an host_aliases file, because hostname and sgename are not identical"
      }
      set last_alias $nr_aliases
      incr last_alias -1
      set aliased_name [lindex $host_name_array(aliases) $last_alias]

      ts_log_fine "expecting sge name: \"$aliased_name\""
      ts_log_fine "writing alias file $ts_config(product_root)/$ts_config(cell)/common/host_aliases ..."

      # test the hostname case compare by using upper letters for the hostname
      set name_to_alias [string toupper $host_name_array(hostname)]
      if { $name_to_alias == $host_name_array(hostname) } {
         set name_to_alias [string tolower $host_name_array(hostname)]
      }
      start_remote_prog $host_aliases_host $CHECK_USER "echo" "\"$aliased_name $name_to_alias\" > $ts_config(product_root)/$ts_config(cell)/common/host_aliases"
      wait_for_remote_file $host_aliases_host $CHECK_USER $ts_config(product_root)/$ts_config(cell)/common/host_aliases
      set file [start_remote_prog $host_aliases_host $CHECK_USER "cat" "$ts_config(product_root)/$ts_config(cell)/common/host_aliases"]
      ts_log_fine "cat host_aliases:\n$file"
      # re-resolve the host
      set output [start_sge_bin "gethostbyname" "-all $host_aliases_host" $host_aliases_host "" prg_exit_state 60 "" "utilbin"]
      parse_gethostbyname_output $output result
      ts_log_fine "hostname: \"$result(hostname)\""
      ts_log_fine "sgename:  \"$result(sgename)\""
      ts_log_fine "aliases:  \"$result(aliases)\""
      
      if { $result(sgename) != $aliased_name } {
         ts_log_severe "host aliasing not working!"
      }
   }
}


