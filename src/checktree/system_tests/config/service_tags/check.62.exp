#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "sge_st_init_level"

# define test's name and run level descriptions
set check_name            "sge_st"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "dist/sgeST/age_at enable|disable|register|unregister|check|enabled|supported|help checks"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function sge_st_setup
set check_cleanup_function sge_st_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "test_enable"
lappend check_functions "test_disable"
lappend check_functions "test_register"
lappend check_functions "test_unregister"
lappend check_functions "test_supported"

global sge_st_cmd
global st_file

proc sge_st_init_level {} {
   global CHECK_ACT_LEVEL ts_config

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc sge_st_setup {} {
   global ts_config CHECK_OUTPUT CHECK_USER
   global sge_st_cmd st_file

   set st_file "$ts_config(product_root)/$ts_config(cell)/common/st.enabled"
   set sge_st_cmd "$ts_config(product_root)/util/sgeST/sge_st"
}

proc sge_st_cleanup {} {
   global ts_config CHECK_OUTPUT

}

proc sge_st { cmd } {
   global ts_config CHECK_OUTPUT CHECK_USER sge_st_cmd

   #there must be root,to avoid the permision denied
   set user "root"


   if { [is_remote_file $ts_config(master_host) $user $sge_st_cmd 1] == 0 } {
      add_proc_error "sge_st" -1 "The $ts_config(product_root)/util/sgeST/sge_st command not found. Try to update you sources and call the distinst"
      return ""
   }

   set output [start_remote_prog $ts_config(master_host) $user $sge_st_cmd $cmd ]
   return "[string trim $output]"
}

proc test_enable {} {
   global CHECK_OUTPUT

   puts $CHECK_OUTPUT "sge_st enable"
   puts $CHECK_OUTPUT [sge_st "enable"]

   set output [sge_st "enabled"]
   puts $CHECK_OUTPUT "sge_st enabled output: $output should be true"
   if { "$output" != "true" } {
      add_proc_error "sge_st_setup" -1 "The Service Tags Support should be enabled"
   }
}

proc test_disable {} {
   global CHECK_OUTPUT

   puts $CHECK_OUTPUT "sge_st disable"
   puts $CHECK_OUTPUT [sge_st "disable"]

   set output [sge_st "enabled"]
   puts $CHECK_OUTPUT "sge_st enabled output: $output should be false"
   if { $output != "false" } {
      add_proc_error "sge_st_setup" -1 "The Service Tags Support should be disabled"
   }
  
}
proc test_register {} {
   global CHECK_OUTPUT

   if { [sge_st "supported"] == "false" } {
      add_proc_error "test_supported" -3 "The Service Tags packages are not present, the test is unsupported"
      return 0
   }

   puts $CHECK_OUTPUT "sge_st register"
   puts $CHECK_OUTPUT [sge_st "register"]

   set output [sge_st "check"]
   puts $CHECK_OUTPUT "sge_st check output: $output should not be unregistered"
   if { $output == "unregistered" } {
      add_proc_error "sge_st_setup" -1 "The Product instance should be registered"
   }
}

proc test_unregister {} {
   global CHECK_OUTPUT

   if { [sge_st "supported"] == "false" } {
      add_proc_error "test_supported" -3 "The Service Tags packages are not present, the test is unsupported"
      return 0
   }

   puts $CHECK_OUTPUT "sge_st unregister"
   puts $CHECK_OUTPUT [sge_st "unregister"]

   set output [sge_st "check"]
   puts $CHECK_OUTPUT "sge_st check output: $output should be unregistered"
   if {  $output != "unregistered" } {
      add_proc_error "sge_st_setup" -1 "The Product instance should be unregistered"
   }
}


proc test_supported {} {
   global CHECK_OUTPUT

   puts $CHECK_OUTPUT "The service tags are supported = [sge_st supported ]"
   if { [sge_st "supported"] == "false" } {
      add_proc_error "test_supported" -3 "The Service Tags packages are not present, the test is unsupported"
      return 0
   }
}

