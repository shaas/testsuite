#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

#define test's procedure order
lappend check_functions "display_win_gui"

#****** display_win_gui() *****************************************************
#
#  NAME
#     display_win_gui() -- tests usage of complex variable display_win_gui
#
#  SYNOPSIS
#     display_win_gui { }
#
#  FUNCTION
#     Tests the usage of the complex variable display_win_gui.
#     Also tests CR 6428621: add a reserved complex value to control
#                            displaying Windows GUIs
#
#  RESULT
#     int 0 - test succeeded
#        -1 - test failed
#
#  SEE ALSO
#******************************************************************************
proc display_win_gui {} {
   global ts_config CHECK_OUTPUT
   global CHECK_USER
   global host

   set requests "dwg=true display_win_gui=true dwg=false\
                 display_win_gui=false a=win32-x86\
                 dwg=true display_win_gui=true dwg=false\
                 display_win_gui=false a=win32-x86"

   set expected {57 57 x x 0 x x 0 0 0}

   #        \Service| running     stopped
   # request \__ __ |
   #   dwg         \|
   # ------------------------------------------
   #   true         |   57        not scheduled
   #   false        |not sched    0 
   #   none         |   0         0 
   #   
   #     ^
   #     |
   #    Request in short (dwg) and long (display_win_gui) form
   #
   # This table is the exit_status matrix of GUI_test.exe, showing the expected
   # exit stati depending on the requested values for "display_win_gui" complex
   # variable and depending on if the "N1 Grid Engine Helper Service" is running
   # or stopped on the exec host.
   # The variables "requests" and "expected" express this matrix, too.
   # "expected" is first the left column (true and false each requested in
   # short (dwg) and long (display_win_gui) form), then the right column.
   # "x" means "don't expect any exit status, this job will never be scheduled"
   #
   # The exit status 57 of GUI_test.exe means that it was able to display it's
   # GUI on the visible desktop. 0 means that it wasn't able to display it.

   if {$ts_config(gridengine_version) < 65} {
      puts $CHECK_OUTPUT "Grid Engine version below 6.5, not testing \
            display_win_gui complex variable."
      return 0
   }

   set SGE_Helper_Servcie_was_running [is_SGE_Helper_Service_running $host]

   # make sure that the "N1 Grid Engine Helper Service" runs on the exec host.
   if {[start_SGE_Helper_Service] != 0} {
      add_proc_error "display_win_gui" -1 \
         "error starting N1 Grid Engine Helper Service"
   }
   
   # do all submits according to the table above and check "failed" and
   # "exit_status" from qacct.
   set i 0

   foreach request $requests {
      if {$i == 5} {
         # stop the "N1 Grid Engine Helper Service" for the second half
         # of the submits.

         if {[stop_SGE_Helper_Service] != 0} {
            add_proc_error "display_win_gui" -1 \
               "error stopping N1 Grid Engine Helper Service"
         }
      }

      # submit job
      puts $CHECK_OUTPUT ""
      set job_id [submit_job "-l $request -l h=$host -b y -shell no\
                  $ts_config(source_dir)/WIN32_X86/GUI_test.exe"]

      if {$job_id < 0} {
         add_proc_error "display_win_gui" -1 "error submitting job" 
      }

      # wait for job end - now accounting should be written
      set ret [wait_for_jobstart $job_id "" 30 0 1]
      if {$ret == -1} {
         if {[lindex $expected $i] == "x"} {
            # in this case, it's expected that the job is not scheduled
            puts $CHECK_OUTPUT "expected that this job doesn't get scheduled, and it\
                  wasn't scheduled. deleting it."
            delete_all_jobs
            wait_for_job_end 60
         } else {
            add_proc_error "display_win_gui" -1 \
               "job was not scheduled to exec host"
         }
      }

      # if job ought be scheduled, wait for jobend and analyze accounting data.
      if {[lindex $expected $i] != "x" } {
         if {[wait_for_jobend $job_id "" 30 1] != 0} {
            add_proc_error "display_win_gui" -1 \
               "job didn't end within timeout"
         }

         # get accounting
         if {[get_qacct $job_id] == 0} {
            # check if job failed
            if {[string index $qacct_info(failed) 0] != "0" } {
               add_proc_error -1 "job failed, $qacct_info(failed)"
            }

            # read job exit_status from accounting record
            if {$qacct_info(exit_status) != [lindex $expected $i]} {
               add_proc_error "display_win_gui" -1 \
                  "incorrect job exit status, expected [lindex $expected $i],\
                   but got $qacct_info(exit_status)"
            }
            puts $CHECK_OUTPUT "exit_status expected: [lindex $expected $i], exit_status\
                  read from qacct: $qacct_info(exit_status)"
         } else {
            add_proc_error "display_win_gui" -1 \
               "field exit_status is missing in qacct output."
         }
      }
      incr i
   }
   if {$SGE_Helper_Servcie_was_running == 1} {
      # start "N1 Grid Engine Helper Service" again on the exec host.
      if {[start_SGE_Helper_Service] != 0} {
         add_proc_error "display_win_gui" -1 \
            "error starting N1 Grid Engine Helper Service"
      }
   }
}

#****** service_error_handling() **********************************************
#
#  NAME
#     service_error_handling() -- tests correct error handling of 
#                                 SGE_Helper_Service
#
#  SYNOPSIS
#     service_error_handling { } 
#
#  FUNCTION
#     Tests correct handling of errors for jobs with display_win_gui=true
#     requirement in SGE_Helper_Service and in sge_shepherd.
#     Also tests CR 6464927: Failed Windows GUI jobs are reported as 
#     finished successfully.
#
#     This is the test for Grid Engine version 6.1 and higher, there is another
#     version for Grid Engine version 6.0.
#
#  RESULT
#     int 0 - test succeeded
#        -1 - test failed
#
#  SEE ALSO
#******************************************************************************
proc service_error_handling {} {
   global CHECK_OUTPUT
   global ts_config
   global host
   set queue "all.q"

   # Submit jobs that should display their GUI on the Windows execution host.
   # 1. If the SGE_Helper_Service.exe is not running, the job mustn't
   #    be scheduled.
   # 2. The job must be set into error state when
   #    a) the job binary doesn't exist
   #    b) the job binary is not executable

   # 1. If the SGE_Helper_Service.exe is not running, the job mustn't
   #    be scheduled.

   # make sure that the "N1 Grid Engine Helper Service" doesn't run
   # on the exec host.
   if {[stop_SGE_Helper_Service] != 0} {
      add_proc_error "service_error_handling" -1 \
         "error stopping N1 Grid Engine Helper Service"
   }

   set submit_command [get_display_win_gui_parameter]
   set submit_command "$submit_command -q $queue -l h=$host -b y\
                      -shell no /dev/fs/C/WINDOWS/notepad.exe"

   # submit job
   puts $CHECK_OUTPUT ""
   set job_id [submit_job $submit_command]

   if {$job_id < 0} {
      add_proc_error "service_error_handling" -1 "error submitting job"
   }

   # wait for job to be scheduled, expect timeout
   if {[wait_for_jobstart $job_id "" 30 0 1] == 0} {
      add_proc_error "service_error_handling" -1 \
         "job was scheduled, but was expected to get not scheduled."
      return -1
   }

   # delete job
   delete_job $job_id

   # 2) the job must be set into error state when
   #    a) the job binary doesn't exist

   # make sure that the "N1 Grid Engine Helper Service" runs
   # on the exec host.
   if {[start_SGE_Helper_Service] != 0} {
      add_proc_error "service_error_handling" -1 \
         "error starting N1 Grid Engine Helper Service"
   }

   set submit_command [get_display_win_gui_parameter]
   set submit_command "$submit_command -q $queue -l h=$host -b y\
                       -shell no /dev/fs/C/WINDOWS/troet.bla"

   set ret [submit_job_expect_failure $submit_command "job_error"]
   if {$ret != 0} {
      return $ret
   }


   # 2) the job must be set into error state when
   #    b) the job binary is not executable

   set submit_command [get_display_win_gui_parameter]
   set submit_command "$submit_command -q $queue -l h=$host -b y -shell no \
                       $ts_config(product_root)/examples/jobs/sleeper.sh 10"

   set ret [submit_job_expect_failure $submit_command "job_error"]
   return $ret
}

#****** get_display_win_gui_parameter() ****************************************
#  NAME
#     get_display_win_gui_parameter() -- returns the qsub parameter to start
#                                        Windows jobs that display their GUI on
#                                        the visible screen.
#
#  SYNOPSIS
#     get_display_win_gui_parameter { }
#
#  FUNCTION
#     Returns the qsub parameter to start Windows jobs that display their GUI
#     on the visible screen.
#
#  RESULT
#     string - the qsub parameter
#
#  SEE ALSO
#*******************************************************************************
proc get_display_win_gui_parameter {} {
   return "-l display_win_gui=true"
}

#****** is_SGE_Helper_Service_running() ****************************************
#  NAME
#     is_SGE_Helper_Service_running() -- check if SGE_Helper_Service.exe is
#                                        running on the execution host
#
#  SYNOPSIS
#     is_SGE_Helper_Service_running {host}
#
#  FUNCTION
#     Checks if the SGE_Helper_Service is running on the execution host.
#
#  INPUTS
#     host             - execution host that is to check
#
#  RESULT
#     0 if the SGE_Helper_Service is not running,
#     1 if it is running.
#
#  SEE ALSO
#     config/get_exechost()
#*******************************************************************************
proc is_SGE_Helper_Service_running {host} {
   set ret 0
   if {[get_exechost exec_host $host] == 0} {
      set load $exec_host(load_values)
      set lines [split $load ","]
      foreach line $lines {
         set words [split $line "="]
         if {[lindex $words 0] == "display_win_gui"} {
            if {[lindex $words 1] == 1} {
               set ret 1
            }
         }
      }
   }
   return $ret
}

