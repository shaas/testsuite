#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__



# Template for testsuite check
# 
# 1) replace the following symbols by your test specific names
#    o __TESTSUITE_TEST_NAME   name of your test (e.g. consumable_test)
#      (vi: 21s)
#
# 2) set check_root_access_needs to "yes" or "no" (if you need root access)
#
# 3) set check_category
#
# 4) set check_highest_level ( e.g.: runlevel "short" has reserved values from 0 to 99 ) 
#
# 5) set check_needs (e.g.: "init_core_system" this means that this test is not 
#    started without succesfull run of "init_core_system" test
# 6) implement the default functions (e.g.: __TESTSUITE_TEST_NAME_init_level)
#
# 7) you can add any function name to check_functions (all function (no paramters allowed) are started 
#    within each runlevel number
#    PLEASE use ts_log_severe() to submit errors
#    ts_log_severe() is used in many testsuite standard functions, so not every 
#    function call must check the return state.
# 
# 8) set check_need_running_system != "yes" if you shutdown the qmaster in the setup(level)
#    procedures. This will skip the qmaster alive test before starting test procedures.


# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global check_need_running_system

#set check_root_access_needs "yes"
#set check_need_running_system "no"

# define a level initialization procedure:
set check_init_level_procedure "__TESTSUITE_TEST_NAME_init_level"

# define test's name and run level descriptions
set check_name            "__TESTSUITE_TEST_NAME"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   1
set check_description(0)  ""
set check_description(1)  ""

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function __TESTSUITE_TEST_NAME_setup
set check_cleanup_function __TESTSUITE_TEST_NAME_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "__TESTSUITE_TEST_NAME_test1"
#lappend check_functions "__TESTSUITE_TEST_NAME_test2"
#lappend check_functions "__TESTSUITE_TEST_NAME_test3"

proc __TESTSUITE_TEST_NAME_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      0 -
      1 {
         return 0
      }
   }

   return -1  ;# no other level
}

# -------- local test procedures: initialization------------------------------

proc __TESTSUITE_TEST_NAME_setup {} {
   global ts_config
   global __TESTSUITE_TEST_NAME_hosts __TESTSUITE_TEST_NAME_backup

   # let's assume we need 2 test hosts
   set __TESTSUITE_TEST_NAME_hosts [host_conf_get_suited_hosts 2]

   # we want to modify the global config - make a backup
   get_config __TESTSUITE_TEST_NAME_backup
}

proc __TESTSUITE_TEST_NAME_cleanup {} {
   global ts_config
   global __TESTSUITE_TEST_NAME_hosts __TESTSUITE_TEST_NAME_backup

   delete_all_jobs
   wait_for_end_of_all_jobs

   # restore config
   set_config __TESTSUITE_TEST_NAME_backup

   # unset our test's global variables
   foreach var "__TESTSUITE_TEST_NAME_hosts __TESTSUITE_TEST_NAME_backup" {
      if {[info exists $var]} {
         unset $var
      }
   }
}


proc __TESTSUITE_TEST_NAME_test1 {} {
   global ts_config CHECK_USER
   global __TESTSUITE_TEST_NAME_hosts
   global CHECK_ACT_LEVEL

   if {$CHECK_ACT_LEVEL == 0} {
      ts_log_fine "this is the test for runlevel $CHECK_ACT_LEVEL"
   }

   if {$CHECK_ACT_LEVEL == 1} {
      ts_log_fine "runlevel 1 produces a warning:"
      ts_log_config "this is a dummy config message: This test can only be run with CSP mode"
      # this would be an error:
      # ts_log_severe "this is a dummy error"
   }
}

