#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__



# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "display_test_init_level"

# define test's name and run level descriptions
set check_name            "display_test"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "test correct testsuite display settings for all users"


# define test's dependencies
set check_needs           "" 

# define test's procedure order
set check_functions "display_test_test"

proc display_test_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0
      } 
   } 
   return -1  ;# no other level 
}



# -------- local test procedures: initialization------------------------------

proc display_test_test {} {
   global display_test_test_hosts check_description CHECK_USER
   global ts_config CHECK_ACT_LEVEL CHECK_DISPLAY_OUTPUT
   global ts_user_config

   ts_log_fine $check_description($CHECK_ACT_LEVEL)

   set users [user_conf_get_cluster_users]
   set hosts [get_all_hosts]

   set display_opt ""
   foreach user $users {
      ts_log_fine "user: $user"
      set display_opt "-display $CHECK_DISPLAY_OUTPUT"

      foreach host $hosts {
         ts_log_progress FINE "\r   open xterm on host $host: \r"
         set xterm_path [get_binary_path $host "xterm"]
         set output [start_remote_prog $host $user $xterm_path "-bg darkolivegreen -fg navajowhite -sl 5000 -sb -j $display_opt -e sleep 0"]
         if { $prg_exit_state != 0 } {
            set disp_result($user,$host) 0
            set error_result($user,$host,out) $output
            set error_result($user,$host,cmd) "${host}(${user}): $xterm_path -bg darkolivegreen -fg navajowhite -sl 5000 -sb -j $display_opt -e sleep 0"

             
            ts_log_fine "xterm returned exit state: $prg_exit_state\nOutput:\n$output"
         } else {
            set disp_result($user,$host) 1
            ts_log_fine "ok"
            # just for fun !!!
            #start_remote_prog $host $user $xterm_path "-bg darkolivegreen -fg navajowhite -sl 5000 -sb -j -display $CHECK_DISPLAY_OUTPUT -e sleep 3" prg_exit_state 25 1
         } 
      }
   }
   ts_log_fine [print_xy_array $users $hosts disp_result]
   set error_text ""
   foreach user $users {
      foreach host $hosts {
         if { $disp_result($user,$host) == 0 } {
            append error_text "====================================================\n"
            append error_text "Error for user $user on host $host:\n"
            append error_text "   starting xterm returned:\n$error_result($user,$host,out)\n"
            append error_text "   commandline (sh) was:\n$error_result($user,$host,cmd)\n"
         }
      }
   }
   if { $error_text != "" } {
      ts_log_severe $error_text
   }
}


