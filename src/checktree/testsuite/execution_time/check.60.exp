#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__



# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "execution_time_init_level"

# define test's name and run level descriptions
set check_name            "execution_time"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   0
set check_description(0)  "test testsuite average execution time on each cluster host"


# define test's dependencies
set check_needs           "" 

# define test's procedure order
set check_functions "execution_time_test"


proc execution_time_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0
      } 
   } 
   return -1  ;# no other level 
}




# -------- local test procedures: initialization------------------------------

proc execution_time_test {} {
   global execution_time_test_hosts check_description CHECK_USER
   global CHECK_OUTPUT ts_config CHECK_ACT_LEVEL CHECK_DISPLAY_OUTPUT
   global ts_user_config

   puts $CHECK_OUTPUT $check_description($CHECK_ACT_LEVEL)

   set max_user_len 0
   set max_host_len 0

   set host_list [get_all_hosts]
   set user_list [user_conf_get_cluster_users]

   foreach user $user_list {
      if { $max_user_len < [string length $user] } {
         set max_user_len [string length $user]
      }
   }

   foreach host $host_list {
      if { $max_host_len < [string length $host] } {
         set max_host_len [string length $host]
      }
   }

   foreach user $user_list {
      foreach host $host_list {
         puts $CHECK_OUTPUT [format "%-${max_user_len}s on %-${max_host_len}s: open connection ..." $user $host]
         start_remote_prog $host $user "echo" "hallo"
      }
   }


   puts $CHECK_OUTPUT ""
   puts $CHECK_OUTPUT "starting performance test ..."
   set total_runs 0
   set total_result 0
   foreach user $user_list {
      foreach host $host_list {
         puts -nonewline $CHECK_OUTPUT [format "%-${max_user_len}s on %-${max_host_len}s: " $user $host]
 
         set starttime [clock clicks -milliseconds]
         set runs 5
         set run $runs
         while { $run > 0 } {
            set result [start_remote_prog $host $user "echo" "hallo_$run"]
#               set result [start_remote_prog $host $user "echo" "hallo"]
            incr run -1
         }
         set endtime [clock clicks -milliseconds]
         set endtime [expr $endtime - $starttime]
         set result [expr $endtime / $runs ]
         if { [string length $result ] > $max_user_len } {
            set max_user_len [string length $result ]
         }
         set result_array($user,$host) $result
         puts $CHECK_OUTPUT [format "average execution time: %5s ms" $result]

         incr total_runs
         incr total_result $result
      }
   }
   
   puts $CHECK_OUTPUT ""
   puts $CHECK_OUTPUT [print_xy_array $user_list $host_list result_array]
   puts $CHECK_OUTPUT ""
   puts $CHECK_OUTPUT "total average: [expr $total_result / $total_runs]"
   puts $CHECK_OUTPUT ""
   puts $CHECK_OUTPUT ""
}


