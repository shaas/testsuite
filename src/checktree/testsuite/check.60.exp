#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__



# Template for testsuite check
# 
# 1) replace the following symbols by your test specific names
#    o ts_performance_test   name of your test (e.g. consumable_test)
#    o 
#
# 2) set check_root_access_needs to "yes" or "no" (if you need root access)
#
# 3) set check_category
#
# 4) set check_highest_level ( e.g.: runlevel "short" has reserved values from 0 to 99 ) 
#
# 5) set check_needs (e.g.: "init_core_system" this means that this test is not 
#    started without succesfull run of "init_core_system" test
# 6) implement the default functions (e.g.: ts_performance_test_init_level)
#
# 7) you can add any function name to check_functions (all function (no paramters allowed) are started 
#    within each runlevel number
#    PLEASE finish each check_function with a set_error() function call
#    PLEASE use add_proc_error() to submit errors
#    add_proc_error() is used in many testsuite standard functions, so not every 
#    function call must check the return state.
# 



# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_errno 
global check_errstr 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "ts_performance_test_init_level"

# define test's name and run level descriptions
set check_name            "ts_performance_test"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   2
set check_description(2)  "dummy test"
set check_description(1)  "test testsuite average execution time on each cluster host"
set check_description(0)  "test system time on each cluster daemon host"





# define test's dependencies
set check_needs           "" 

# setup and cleanup functions
set check_setup_function ts_performance_test_setup
set check_cleanup_function ts_performance_test_cleanup



# define test's procedure order
set check_functions "ts_performance_test_test"


global ts_performance_test_test_hosts
global ts_performance_test_saved_slot_count

proc ts_performance_test_init_level {} {
   global CHECK_ACT_LEVEL

   switch -- $CHECK_ACT_LEVEL {
      "0" { 
         return 0
      } 
      "1" {
         return 0
      }
      "2" {
         return 0
      }

   } 

   return -1  ;# no other level 
}




# -------- local test procedures: initialization------------------------------


proc ts_performance_test_setup  {} {
   global CHECK_OUTPUT ts_config

   puts $CHECK_OUTPUT "this is a dummy setup function"

   set_error 0 "ok"
}

proc ts_performance_test_cleanup  {} {
   global CHECK_OUTPUT ts_config

#   delete_all_jobs
#   wait_for_end_of_all_jobs 60
   puts $CHECK_OUTPUT "this is a dummy cleanup function"

   set_error 0 "ok"
}


proc ts_performance_test_test {} {
   global ts_performance_test_test_hosts check_description CHECK_ARCH CHECK_USER CHECK_HOST
   global CHECK_OUTPUT ts_config CHECK_CORE_MASTER CHECK_ACT_LEVEL CHECK_SCRIPT_FILE_DIR
   global ts_user_config

   puts $CHECK_OUTPUT $check_description($CHECK_ACT_LEVEL)

   if {$CHECK_ACT_LEVEL == 1} {
      set max_user_len 0
      set max_host_len 0

      set host_list [host_conf_get_cluster_hosts]
      set user_list [user_conf_get_cluster_users]
   
      foreach user $user_list {
         if { $max_user_len < [string length $user] } {
            set max_user_len [string length $user]
         }
      }

      foreach host $host_list {
         if { $max_host_len < [string length $host] } {
            set max_host_len [string length $host]
         }
      }

      foreach user $user_list {
         foreach host $host_list {
            puts $CHECK_OUTPUT [format "%-${max_user_len}s on %-${max_host_len}s: open connection ..." $user $host]
            start_remote_prog $host $user "echo" "hallo"
         }
      }


      puts $CHECK_OUTPUT ""
      puts $CHECK_OUTPUT "starting performance test ..."
      foreach user $user_list {
         foreach host $host_list {
            puts -nonewline $CHECK_OUTPUT [format "%-${max_user_len}s on %-${max_host_len}s: " $user $host]
    
            set starttime [clock clicks -milliseconds]
            set runs 5
            set run $runs
            while { $run > 0 } {
               set result [start_remote_prog $host $user "echo" "hallo_$run"]
#               set result [start_remote_prog $host $user "echo" "hallo"]
               incr run -1
            }
            set endtime [clock clicks -milliseconds]
            set endtime [expr $endtime - $starttime]
            set result [expr $endtime / $runs ]
            if { [string length $result ] > $max_user_len } {
               set max_user_len [string length $result ]
            }
            set result_array($user,$host) $result
            puts $CHECK_OUTPUT [format "average execution time: %5s ms" $result]
         }
      }
      
      puts $CHECK_OUTPUT ""
      puts $CHECK_OUTPUT [print_xy_array $user_list $host_list result_array]
      puts $CHECK_OUTPUT ""
   }

   if {$CHECK_ACT_LEVEL == 0} {
      check_all_system_times
   }

   if {$CHECK_ACT_LEVEL == 2} {
      dump_spawn_rlogin_sessions
#      reset_schedd_config
   }

   set_error 0 "ok"
}


