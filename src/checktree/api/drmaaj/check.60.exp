#!/vol2/TCL_TK/glinux/bin/expect
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

# define global variable in this namespace
global check_name 
global check_category
global check_description 
global check_needs
global check_functions 
global check_highest_level
global check_init_level_procedure
global check_root_access_needs
global env

set check_root_access_needs "yes"

# define a level initialization procedure:
set check_init_level_procedure "drmaaj_init_level"

# define test's name and run level descriptions
set check_name            "drmaa-j"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_highest_level   202
set check_description(200)  "tests to verify DRMAA-J 0.5 library with DRMAA-C 0.95 library"
set check_description(201)  "tests to verify DRMAA-J 0.5 library with DRMAA-C 1.0 library"
set check_description(202)  "tests to verify DRMAA-J 1.0 library with DRMAA-C 1.0 library"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function "drmaaj_setup"
set check_cleanup_function "drmaaj_cleanup"

# define test's procedure order
set check_functions ""
lappend check_functions "drmaaj_check"

# this function is called each time before
# a new run level is started
proc drmaaj_init_level {} {
  global CHECK_ACT_LEVEL ts_config

  # returning -1 causes disabling a certain runlevel
  # here per run level settings can be prepared
  switch -- $CHECK_ACT_LEVEL {
     "200" { 
           return 0
     } 
     "201" {
           if {$ts_config(gridengine_version) == 60} {
              return 0
           } else {
              return -1
           }
     } 
     "202" {
           if {$ts_config(gridengine_version) == 61} {
              return 0
           } else {
              return -1
           }
     } 
  } 
  return -1  ;# no other level else
}

# -------- local test procedures -----------------------------------------------

# here the actual test is done
proc drmaaj_check {} {
   global ts_config env
   global CHECK_ACTUAL_TEST_PATH
   global CHECK_USER CHECK_ACT_LEVEL

   set local_host [gethostname]
   set local_arch [resolve_arch $local_host]

   ts_log_fine "arch is $local_arch"
   ts_log_fine "host is $local_host"

   # make sure that we have a drmaa.jar, drmaa-test.jar and
   # suspendable_sleeper.sh
   set needed_files ""
   lappend needed_files $ts_config(product_root)/lib/drmaa.jar
   lappend needed_files $ts_config(source_dir)/CLASSES/drmaa-test.jar
   lappend needed_files $ts_config(testsuite_root_dir)/scripts/suspendable_sleeper.sh
   set missing_files ""

   foreach file $needed_files {
      if {[file exists $file] == 0} {
         append missing_files " $file"
      }
   }

   if {$missing_files != ""} {
      ts_log_config "The following necessary files are missing: [string trim $missing_files]"
      return -3
   }

   foreach host $ts_config(unique_arch_nodes) {
      set binary_arch [resolve_arch $host]

      # try to use java 1.4, 
      # if not configured, java 1.5
      # if not configured, give it a try with the java in PATH
      set JAVA [get_binary_path $host "java14" 0]
      if {$JAVA == "java14"} {
         set JAVA [get_binary_path $host "java15" 0]
         if {$JAVA == "java15"} {
            set JAVA "java"
         }
      }

      ts_log_fine "Java binary is $JAVA"

      switch -- $binary_arch {
         "sol-sparc" -
         "sol-sparc64" -
         "sol-x86" -
         "lx24-x86" -
         "lx24-amd64" -
         "ulx24-x86" -
         "ulx24-amd64" -
         "aix51" -
         "irix65" -
         "hp11" -
         "hp11-64" -
         "tru64" -
         "darwin" -
         "darwin-ppc" -
         "darwin-x86" -
         "alpha5" {
            ts_log_fine "architecture $binary_arch is supported"
         }

         default {
            ts_log_info "DRMAA-J not supported for binary architecture $binary_arch"
            continue
         }
      }

      if { $CHECK_ACT_LEVEL == 200 } {
         drmaa_redirect_lib "0.95" $host

         set classpath "$ts_config(product_root)/lib/drmaa"

         if {$ts_config(gridengine_version) == 61} {
            set classpath "${classpath}-0.5"
         }

         set classpath "${classpath}.jar:"

         if {$ts_config(gridengine_version) == 60} {
            set classpath "$classpath$ts_config(source_dir)/CLASSES/drmaa-test.jar"
         } else {
            set classpath "$classpath$ts_config(testsuite_root_dir)/lib/drmaa-0.5-test.jar"
         }

         set classpath "$classpath:$ts_config(testsuite_root_dir)/lib/junit.jar"
      } else {
         # 201 and 202 have the same setup
         drmaa_redirect_lib "1.0" $host
         set classpath "$ts_config(product_root)/lib/drmaa.jar:$ts_config(source_dir)/CLASSES/drmaa-test.jar:$ts_config(testsuite_root_dir)/lib/junit.jar"
      }

      set compile_arch_mt "[resolve_build_arch $host]"
      ts_log_fine "host is $host has arch $compile_arch_mt with classpath $classpath"

      set options [build_java_env_list]

      if { $binary_arch == "sol-sparc64" } {
         ts_log_fine "using 64-bit VM"
         set options "-d64 $options"
      }

      set options "-cp $classpath $options"

      ts_log_fine "Starting VM: $JAVA $options junit.textui.TestRunner DrmaaSuite"
      set test_output [start_remote_prog $host $CHECK_USER $JAVA "$options junit.textui.TestRunner DrmaaSuite" prg_exit_state 600 0 "" "" 1 0 1]

      if {$prg_exit_state != 0} {
         ts_log_severe "DRMAA-J jUnit test suite failed at host $host:\n$test_output"
      }
   }
}

proc drmaaj_setup {} {
   global drmaaj_config current_drmaa_mode ts_config

   # must forbit reschedule on job exiting with 99 
   # must forbit job error upon job exiting with 100
   # otherwise drmaa_test ST_EXIT_STATUS never finishes

   # backup old settings
   get_config drmaaj_config

   # set new value
   set new_config(qmaster_params) "FORBID_RESCHEDULE=TRUE,FORBID_APPERROR=TRUE"
   set new_config(delegated_file_staging) "true"
   set_config new_config

   # setup file staging scripts
   foreach host $ts_config(unique_arch_nodes) {
      set current_drmaa_mode($host) [get_current_drmaa_mode $host]
   }
}

# undo what we've done in drmaa_setup
proc drmaaj_cleanup  {} {
   global backup_qmaster_params drmaaj_config ts_config
   global current_drmaa_mode

   delete_all_jobs
   wait_for_end_of_all_jobs 60

   # undo configuration changes that were made for this test
   set_config drmaaj_config

   # restore DRMAA library version
   foreach host $ts_config(unique_arch_nodes) {
      drmaa_redirect_lib $current_drmaa_mode($host) $host
   }
}
